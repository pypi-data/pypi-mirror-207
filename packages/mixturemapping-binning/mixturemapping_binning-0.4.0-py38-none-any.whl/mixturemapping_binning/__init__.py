from .__pytransform import pyarmor_runtime

"""
# MixtureMapping

[![Documentation](https://github.com/VK/dash-express-components/workflows/Publish%20release/badge.svg)](https://vk.github.io/mixturemapping-doc)
[![PyPI version](https://badge.fury.io/py/mixturemapping.svg)](https://badge.fury.io/py/mixturemapping)

Train Gaussian Mixture Mappings


## Provides:
  1. Layers to build tensorflow models to map Gaussian mixtures
  2. Tools to compute yield values of Gaussian mixtures in complex binning schemes

## Example
  
    import mixturemapping as mm  
    import tensorflow as tf

    inMeans = tf.keras.Input(shape=(mixN, inputMixM), name="Means", dtype=dataType)
    inStdDevs = tf.keras.Input(shape=(mixN, inputMixM), name="StdDevs", dtype=dataType)
    inWeight = tf.keras.Input(shape=(mixN), name="Weights", dtype=dataType)

    mapModel = tf.keras.Sequential()
    mapModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    mapModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    mapModel.add( tf.keras.layers.Dense(outputMixM))
    y = mapModel(inMeans)

    deltaModel = tf.keras.Sequential()
    deltaModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    deltaModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    deltaModel.add( tf.keras.layers.Dense(outputMixM))
    yDelta = deltaModel(inMeans)

    covALayer = mm.layers.TrainableCovMatrix(outputMixM, name="CovA")
    covA = covALayer(inMeans)

    mapLayer = mm.layers.GeneralMapping(outputMixM, name="Mapping", dtype=dataType)
    newDist = mapLayer({'means': inMeans, 'y':y, 'yDelta':yDelta, 'stdDevs': inStdDevs, 'weights': inWeight, 'covA': covA})

    distLayer = mm.layers.Distribution(dtype=dataType, regularize_cov_epsilon=0.95)
    dist = distLayer(newDist)

### Developement
```
$ py -m venv env
$ .\env\Scripts\activate
$ pip install -r requirements.txt
```


"""


pyarmor_runtime()
__pyarmor__(__name__, __file__, b'\x50\x59\x41\x52\x4d\x4f\x52\x00\x00\x03\x08\x00\x55\x0d\x0d\x0a\x08\x2d\xa0\x01\x00\x00\x00\x00\x01\x00\x00\x00\x40\x00\x00\x00\x8c\x01\x00\x00\x00\x00\x00\x18\x79\x27\x2f\xe7\x8a\xd5\x1d\x12\x63\x6e\x2e\x54\x59\x0e\x76\x80\x00\x00\x00\x00\x00\x00\x00\x00\x34\x08\xc2\x9c\x06\xab\xdd\x2a\x06\x24\x16\xd2\x01\xfc\xad\x4c\xc9\xfd\xd3\x61\x5b\xf4\x95\x62\x9a\xc1\xd7\xc3\x2d\x0e\x06\xd9\xf5\x92\xa6\xc7\x8a\x97\xf9\x9b\xf5\x2b\x1e\xb6\xe1\xa1\x49\x93\x2a\x9b\x7b\xd5\xe9\xaa\xbf\x19\x8f\xa3\x3a\xcf\x7a\x3d\x6f\xb0\x11\xbe\xb0\xc6\xb8\x0b\x0e\x0b\x51\x50\x2c\x5b\xf3\x32\xd0\xd4\x31\xc7\x5b\x31\x2c\x90\x03\x17\xbf\x03\xf3\xc2\x63\x38\xa5\x52\xc2\x9d\x80\x4b\x78\xdc\x03\x78\x73\xca\xf0\xde\x14\x7f\x98\x8b\xf6\x6e\x08\x84\x80\x83\x6f\xf0\xa5\xe4\x4d\x89\xdd\x45\x28\x84\xf2\xa6\xe6\x79\x89\xa4\x8d\x81\x98\x79\x63\x32\xdf\xe4\xde\xa5\x8d\x7a\xec\xe9\x2e\x92\xc0\xde\x57\x2b\xfb\xa8\xaa\x87\xf8\x29\x53\xef\xbd\xf4\xbb\xd6\xdc\x89\x30\x8a\x64\x06\x0c\x3c\x38\xe5\xf4\xbf\x82\x82\xaa\xe5\xd2\x72\x85\xfd\x03\xc0\xed\xdf\x7d\xe6\x44\xd1\xb5\xe3\xfe\x40\xdc\x4a\xfb\x60\xc4\x1c\xef\xeb\x92\xc9\xe4\xe5\x38\xd3\x33\xf8\xd8\x03\xe9\xd5\xc9\x7c\xf3\x77\x41\xd9\x77\x4c\x1d\x61\x3f\x9f\x2f\xd7\x40\x09\x3a\xbe\x4c\xf5\x53\x4c\x48\xed\xfa\xed\x80\xc5\xb4\x02\xe6\x79\xc4\x6b\xb8\xc0\x18\x37\x8d\x29\x6c\x4c\x69\xef\x72\xbf\x85\xfe\xf8\x1e\x92\x85\x2f\x70\x1b\x43\xce\xf3\xf3\x1a\x74\xa7\xd5\x57\x64\x4f\x2d\x80\x7a\x5a\x8c\x72\xbf\x54\x9b\x82\xb1\x04\xd5\x14\x42\x3b\x71\x82\x5a\x8e\x74\x0f\x90\xa7\xfa\xb0\x64\x76\x68\x38\x93\x28\xd1\x81\xd2\x8f\x74\x4e\xc1\x12\xbe\xb1\x08\x79\x1e\xda\xad\x91\x98\x9e\x5b\xd4\x8f\x87\x6e\xc1\xbd\xd8\x76\x08\x80\xee\x7b\xf4\x1e\x66\xc4\x3b\x80\x67\xea\x5c\x22\x5d\x74\x67\x19\xdf\x7c\xfe\xbd\xf4\x94\xc6\xf2\x79\xdc\xfc\xa4\xfc\x3f\x0f\x7d\x24\x18\x93\x6b\x6c\xb4\x5a\xed\x63\xe4\xa7\xef\x01\x51\x7f\xa4\xf1\x09\x40', 2)

# cleanup
del pyarmor_runtime

