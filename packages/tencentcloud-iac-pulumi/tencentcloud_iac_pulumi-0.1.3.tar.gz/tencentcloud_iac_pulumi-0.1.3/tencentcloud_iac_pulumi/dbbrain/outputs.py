# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ModifyDiagDbInstanceOperationInstanceConfs',
    'SqlFilterSessionToken',
    'TdsqlAuditLogFilter',
    'GetDiagEventsListResult',
    'GetDiagHistoryEventResult',
    'GetHealthScoresDataResult',
    'GetHealthScoresDataIssueTypeResult',
    'GetHealthScoresDataIssueTypeEventResult',
    'GetSecurityAuditLogExportTasksListResult',
    'GetSlowLogTimeSeriesStatsSeriesDataResult',
    'GetSlowLogTimeSeriesStatsSeriesDataSeriesResult',
    'GetSlowLogTimeSeriesStatsTimeSeriesResult',
    'GetSlowLogTopSqlsRowResult',
    'GetSlowLogTopSqlsSchemaListResult',
    'GetSlowLogUserHostStatsItemResult',
    'GetSqlFiltersListResult',
]

@pulumi.output_type
class ModifyDiagDbInstanceOperationInstanceConfs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dailyInspection":
            suggest = "daily_inspection"
        elif key == "overviewDisplay":
            suggest = "overview_display"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModifyDiagDbInstanceOperationInstanceConfs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModifyDiagDbInstanceOperationInstanceConfs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModifyDiagDbInstanceOperationInstanceConfs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 daily_inspection: Optional[str] = None,
                 overview_display: Optional[str] = None):
        """
        :param str daily_inspection: Database inspection switch, Yes/No.
        :param str overview_display: Instance overview switch, Yes/No.
        """
        if daily_inspection is not None:
            pulumi.set(__self__, "daily_inspection", daily_inspection)
        if overview_display is not None:
            pulumi.set(__self__, "overview_display", overview_display)

    @property
    @pulumi.getter(name="dailyInspection")
    def daily_inspection(self) -> Optional[str]:
        """
        Database inspection switch, Yes/No.
        """
        return pulumi.get(self, "daily_inspection")

    @property
    @pulumi.getter(name="overviewDisplay")
    def overview_display(self) -> Optional[str]:
        """
        Instance overview switch, Yes/No.
        """
        return pulumi.get(self, "overview_display")


@pulumi.output_type
class SqlFilterSessionToken(dict):
    def __init__(__self__, *,
                 password: str,
                 user: str):
        """
        :param str password: password.
        :param str user: user name.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        user name.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class TdsqlAuditLogFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "affectRows":
            suggest = "affect_rows"
        elif key == "dbNames":
            suggest = "db_names"
        elif key == "execTime":
            suggest = "exec_time"
        elif key == "sentRows":
            suggest = "sent_rows"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TdsqlAuditLogFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TdsqlAuditLogFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TdsqlAuditLogFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 affect_rows: Optional[int] = None,
                 db_names: Optional[Sequence[str]] = None,
                 exec_time: Optional[int] = None,
                 hosts: Optional[Sequence[str]] = None,
                 sent_rows: Optional[int] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param int affect_rows: Number of affected rows. Indicates filtering audit logs whose affected rows are greater than this value.
        :param Sequence[str] db_names: Database name.
        :param int exec_time: Execution time. The unit is: us. It means to filter the audit logs whose execution time is greater than this value.
        :param Sequence[str] hosts: Client Address.
        :param int sent_rows: Return the number of rows. It means to filter the audit log with the number of returned rows greater than this value.
        :param Sequence[str] users: Username.
        """
        if affect_rows is not None:
            pulumi.set(__self__, "affect_rows", affect_rows)
        if db_names is not None:
            pulumi.set(__self__, "db_names", db_names)
        if exec_time is not None:
            pulumi.set(__self__, "exec_time", exec_time)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if sent_rows is not None:
            pulumi.set(__self__, "sent_rows", sent_rows)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="affectRows")
    def affect_rows(self) -> Optional[int]:
        """
        Number of affected rows. Indicates filtering audit logs whose affected rows are greater than this value.
        """
        return pulumi.get(self, "affect_rows")

    @property
    @pulumi.getter(name="dbNames")
    def db_names(self) -> Optional[Sequence[str]]:
        """
        Database name.
        """
        return pulumi.get(self, "db_names")

    @property
    @pulumi.getter(name="execTime")
    def exec_time(self) -> Optional[int]:
        """
        Execution time. The unit is: us. It means to filter the audit logs whose execution time is greater than this value.
        """
        return pulumi.get(self, "exec_time")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Client Address.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="sentRows")
    def sent_rows(self) -> Optional[int]:
        """
        Return the number of rows. It means to filter the audit log with the number of returned rows greater than this value.
        """
        return pulumi.get(self, "sent_rows")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Username.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetDiagEventsListResult(dict):
    def __init__(__self__, *,
                 diag_item: str,
                 diag_type: str,
                 end_time: str,
                 event_id: int,
                 instance_id: str,
                 metric: str,
                 outline: str,
                 region: str,
                 severity: int,
                 start_time: str):
        """
        :param str diag_item: diag item.
        :param str diag_type: diag type.
        :param str end_time: end time.
        :param int event_id: event id.
        :param str instance_id: instance id.
        :param str metric: metric.
        :param str outline: outline.
        :param str region: region.
        :param int severity: severity.
        :param str start_time: start time.
        """
        pulumi.set(__self__, "diag_item", diag_item)
        pulumi.set(__self__, "diag_type", diag_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "outline", outline)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="diagItem")
    def diag_item(self) -> str:
        """
        diag item.
        """
        return pulumi.get(self, "diag_item")

    @property
    @pulumi.getter(name="diagType")
    def diag_type(self) -> str:
        """
        diag type.
        """
        return pulumi.get(self, "diag_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        """
        event id.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        metric.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def outline(self) -> str:
        """
        outline.
        """
        return pulumi.get(self, "outline")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def severity(self) -> int:
        """
        severity.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetDiagHistoryEventResult(dict):
    def __init__(__self__, *,
                 diag_item: str,
                 diag_type: str,
                 end_time: str,
                 event_id: int,
                 instance_id: str,
                 metric: str,
                 outline: str,
                 region: str,
                 severity: int,
                 start_time: str):
        """
        :param str diag_item: Description of the diagnostic item.
        :param str diag_type: Diagnostic type.
        :param str end_time: End time, such as `2019-09-11 12:13:14`, the interval between the end time and the start time can be up to 2 days.
        :param int event_id: Event unique ID.
        :param str instance_id: instance id.
        :param str metric: reserved text. Note: This field may return null, indicating that no valid value can be obtained.
        :param str outline: Diagnostic summary.
        :param str region: region.
        :param int severity: severity. The severity is divided into 5 levels, according to the degree of impact from high to low: 1: Fatal, 2: Serious, 3: Warning, 4: Prompt, 5: Healthy.
        :param str start_time: Start time, such as `2019-09-10 12:13:14`.
        """
        pulumi.set(__self__, "diag_item", diag_item)
        pulumi.set(__self__, "diag_type", diag_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "outline", outline)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="diagItem")
    def diag_item(self) -> str:
        """
        Description of the diagnostic item.
        """
        return pulumi.get(self, "diag_item")

    @property
    @pulumi.getter(name="diagType")
    def diag_type(self) -> str:
        """
        Diagnostic type.
        """
        return pulumi.get(self, "diag_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        End time, such as `2019-09-11 12:13:14`, the interval between the end time and the start time can be up to 2 days.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        """
        Event unique ID.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        reserved text. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def outline(self) -> str:
        """
        Diagnostic summary.
        """
        return pulumi.get(self, "outline")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def severity(self) -> int:
        """
        severity. The severity is divided into 5 levels, according to the degree of impact from high to low: 1: Fatal, 2: Serious, 3: Warning, 4: Prompt, 5: Healthy.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Start time, such as `2019-09-10 12:13:14`.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetHealthScoresDataResult(dict):
    def __init__(__self__, *,
                 events_total_count: int,
                 health_level: str,
                 health_score: int,
                 issue_types: Sequence['outputs.GetHealthScoresDataIssueTypeResult']):
        """
        :param int events_total_count: The total number of abnormal events.
        :param str health_level: Health level, such as: HEALTH, SUB_HEALTH, RISK, HIGH_RISK.
        :param int health_score: Health score.
        :param Sequence['GetHealthScoresDataIssueTypeArgs'] issue_types: Exception details.
        """
        pulumi.set(__self__, "events_total_count", events_total_count)
        pulumi.set(__self__, "health_level", health_level)
        pulumi.set(__self__, "health_score", health_score)
        pulumi.set(__self__, "issue_types", issue_types)

    @property
    @pulumi.getter(name="eventsTotalCount")
    def events_total_count(self) -> int:
        """
        The total number of abnormal events.
        """
        return pulumi.get(self, "events_total_count")

    @property
    @pulumi.getter(name="healthLevel")
    def health_level(self) -> str:
        """
        Health level, such as: HEALTH, SUB_HEALTH, RISK, HIGH_RISK.
        """
        return pulumi.get(self, "health_level")

    @property
    @pulumi.getter(name="healthScore")
    def health_score(self) -> int:
        """
        Health score.
        """
        return pulumi.get(self, "health_score")

    @property
    @pulumi.getter(name="issueTypes")
    def issue_types(self) -> Sequence['outputs.GetHealthScoresDataIssueTypeResult']:
        """
        Exception details.
        """
        return pulumi.get(self, "issue_types")


@pulumi.output_type
class GetHealthScoresDataIssueTypeResult(dict):
    def __init__(__self__, *,
                 events: Sequence['outputs.GetHealthScoresDataIssueTypeEventResult'],
                 issue_type: str,
                 total_count: int):
        """
        :param Sequence['GetHealthScoresDataIssueTypeEventArgs'] events: unusual event.
        :param str issue_type: Index classification: AVAILABILITY: availability, MAINTAINABILITY: maintainability, PERFORMANCE, performance, RELIABILITY reliability.
        :param int total_count: The total number of abnormal events.
        """
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "issue_type", issue_type)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.GetHealthScoresDataIssueTypeEventResult']:
        """
        unusual event.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> str:
        """
        Index classification: AVAILABILITY: availability, MAINTAINABILITY: maintainability, PERFORMANCE, performance, RELIABILITY reliability.
        """
        return pulumi.get(self, "issue_type")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total number of abnormal events.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetHealthScoresDataIssueTypeEventResult(dict):
    def __init__(__self__, *,
                 count: int,
                 diag_type: str,
                 end_time: str,
                 event_id: int,
                 metric: str,
                 outline: str,
                 score_lost: int,
                 severity: int,
                 start_time: str):
        """
        :param int count: Number of alerts.
        :param str diag_type: Diagnostic type.
        :param str end_time: End Time.
        :param int event_id: Event ID.
        :param str metric: reserved text.
        :param str outline: overview.
        :param int score_lost: Points deducted.
        :param int severity: severity. The severity is divided into 5 levels, according to the degree of impact from high to low: 1: Fatal, 2: Serious, 3: Warning, 4: Prompt, 5: Healthy.
        :param str start_time: Starting time.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "diag_type", diag_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "event_id", event_id)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "outline", outline)
        pulumi.set(__self__, "score_lost", score_lost)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Number of alerts.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="diagType")
    def diag_type(self) -> str:
        """
        Diagnostic type.
        """
        return pulumi.get(self, "diag_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        End Time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        """
        Event ID.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        reserved text.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def outline(self) -> str:
        """
        overview.
        """
        return pulumi.get(self, "outline")

    @property
    @pulumi.getter(name="scoreLost")
    def score_lost(self) -> int:
        """
        Points deducted.
        """
        return pulumi.get(self, "score_lost")

    @property
    @pulumi.getter
    def severity(self) -> int:
        """
        severity. The severity is divided into 5 levels, according to the degree of impact from high to low: 1: Fatal, 2: Serious, 3: Warning, 4: Prompt, 5: Healthy.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Starting time.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetSecurityAuditLogExportTasksListResult(dict):
    def __init__(__self__, *,
                 async_request_id: int,
                 create_time: str,
                 danger_levels: Sequence[int],
                 end_time: str,
                 log_end_time: str,
                 log_start_time: str,
                 progress: int,
                 start_time: str,
                 status: str,
                 total_size: int):
        """
        :param int async_request_id: async request id.
        :param str create_time: create time.
        :param Sequence[int] danger_levels: danger level list.
        :param str end_time: end time.
        :param str log_end_time: log end time.
        :param str log_start_time: log start time.
        :param int progress: task progress.
        :param str start_time: start time.
        :param str status: status.
        :param int total_size: the total size of log.
        """
        pulumi.set(__self__, "async_request_id", async_request_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "danger_levels", danger_levels)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "log_end_time", log_end_time)
        pulumi.set(__self__, "log_start_time", log_start_time)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "total_size", total_size)

    @property
    @pulumi.getter(name="asyncRequestId")
    def async_request_id(self) -> int:
        """
        async request id.
        """
        return pulumi.get(self, "async_request_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dangerLevels")
    def danger_levels(self) -> Sequence[int]:
        """
        danger level list.
        """
        return pulumi.get(self, "danger_levels")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="logEndTime")
    def log_end_time(self) -> str:
        """
        log end time.
        """
        return pulumi.get(self, "log_end_time")

    @property
    @pulumi.getter(name="logStartTime")
    def log_start_time(self) -> str:
        """
        log start time.
        """
        return pulumi.get(self, "log_start_time")

    @property
    @pulumi.getter
    def progress(self) -> int:
        """
        task progress.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> int:
        """
        the total size of log.
        """
        return pulumi.get(self, "total_size")


@pulumi.output_type
class GetSlowLogTimeSeriesStatsSeriesDataResult(dict):
    def __init__(__self__, *,
                 series: Sequence['outputs.GetSlowLogTimeSeriesStatsSeriesDataSeriesResult'],
                 timestamps: Sequence[int]):
        """
        :param Sequence['GetSlowLogTimeSeriesStatsSeriesDataSeriesArgs'] series: Monitor metrics.
        :param Sequence[int] timestamps: Statistics start time.
        """
        pulumi.set(__self__, "series", series)
        pulumi.set(__self__, "timestamps", timestamps)

    @property
    @pulumi.getter
    def series(self) -> Sequence['outputs.GetSlowLogTimeSeriesStatsSeriesDataSeriesResult']:
        """
        Monitor metrics.
        """
        return pulumi.get(self, "series")

    @property
    @pulumi.getter
    def timestamps(self) -> Sequence[int]:
        """
        Statistics start time.
        """
        return pulumi.get(self, "timestamps")


@pulumi.output_type
class GetSlowLogTimeSeriesStatsSeriesDataSeriesResult(dict):
    def __init__(__self__, *,
                 metric: str,
                 unit: str,
                 values: Sequence[int]):
        """
        :param str metric: Indicator name.
        :param str unit: Indicator unit.
        :param Sequence[int] values: Index value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        Indicator name.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        Indicator unit.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def values(self) -> Sequence[int]:
        """
        Index value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSlowLogTimeSeriesStatsTimeSeriesResult(dict):
    def __init__(__self__, *,
                 count: int,
                 timestamp: int):
        """
        :param int count: total.
        :param int timestamp: Statistics start time.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        total.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        """
        Statistics start time.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetSlowLogTopSqlsRowResult(dict):
    def __init__(__self__, *,
                 exec_times: int,
                 lock_time: float,
                 lock_time_avg: float,
                 lock_time_max: float,
                 lock_time_min: float,
                 lock_time_ratio: float,
                 md5: str,
                 query_time: float,
                 query_time_avg: float,
                 query_time_max: float,
                 query_time_min: float,
                 query_time_ratio: float,
                 rows_examined: int,
                 rows_examined_avg: float,
                 rows_examined_max: int,
                 rows_examined_min: int,
                 rows_examined_ratio: float,
                 rows_sent: int,
                 rows_sent_avg: float,
                 rows_sent_max: int,
                 rows_sent_min: int,
                 rows_sent_ratio: float,
                 schema: str,
                 sql_template: str,
                 sql_text: str):
        """
        :param int exec_times: Execution times.
        :param float lock_time: SQL total lock waiting time, in seconds.
        :param float lock_time_avg: Average lock waiting time, in seconds.
        :param float lock_time_max: Maximum lock waiting time, in seconds.
        :param float lock_time_min: Minimum lock waiting time, in seconds.
        :param float lock_time_ratio: The ratio of the total lock waiting time of SQL, in %.
        :param str md5: MD5 value of SOL template.
        :param float query_time: Total time, in seconds.
        :param float query_time_avg: Average execution time, in seconds.
        :param float query_time_max: The maximum execution time, in seconds.
        :param float query_time_min: The minimum execution time, in seconds.
        :param float query_time_ratio: Total time-consuming ratio, unit %.
        :param int rows_examined: total scan lines.
        :param float rows_examined_avg: average number of lines scanned.
        :param int rows_examined_max: Maximum number of scan lines.
        :param int rows_examined_min: Minimum number of scan lines.
        :param float rows_examined_ratio: The proportion of the total number of scanned lines, unit %.
        :param int rows_sent: total number of rows returned.
        :param float rows_sent_avg: average number of rows returned.
        :param int rows_sent_max: Maximum number of rows returned.
        :param int rows_sent_min: Minimum number of rows returned.
        :param float rows_sent_ratio: The proportion of the total number of rows returned, in %.
        :param str schema: DB name.
        :param str sql_template: sql template.
        :param str sql_text: SQL with parameters (random).
        """
        pulumi.set(__self__, "exec_times", exec_times)
        pulumi.set(__self__, "lock_time", lock_time)
        pulumi.set(__self__, "lock_time_avg", lock_time_avg)
        pulumi.set(__self__, "lock_time_max", lock_time_max)
        pulumi.set(__self__, "lock_time_min", lock_time_min)
        pulumi.set(__self__, "lock_time_ratio", lock_time_ratio)
        pulumi.set(__self__, "md5", md5)
        pulumi.set(__self__, "query_time", query_time)
        pulumi.set(__self__, "query_time_avg", query_time_avg)
        pulumi.set(__self__, "query_time_max", query_time_max)
        pulumi.set(__self__, "query_time_min", query_time_min)
        pulumi.set(__self__, "query_time_ratio", query_time_ratio)
        pulumi.set(__self__, "rows_examined", rows_examined)
        pulumi.set(__self__, "rows_examined_avg", rows_examined_avg)
        pulumi.set(__self__, "rows_examined_max", rows_examined_max)
        pulumi.set(__self__, "rows_examined_min", rows_examined_min)
        pulumi.set(__self__, "rows_examined_ratio", rows_examined_ratio)
        pulumi.set(__self__, "rows_sent", rows_sent)
        pulumi.set(__self__, "rows_sent_avg", rows_sent_avg)
        pulumi.set(__self__, "rows_sent_max", rows_sent_max)
        pulumi.set(__self__, "rows_sent_min", rows_sent_min)
        pulumi.set(__self__, "rows_sent_ratio", rows_sent_ratio)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "sql_template", sql_template)
        pulumi.set(__self__, "sql_text", sql_text)

    @property
    @pulumi.getter(name="execTimes")
    def exec_times(self) -> int:
        """
        Execution times.
        """
        return pulumi.get(self, "exec_times")

    @property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> float:
        """
        SQL total lock waiting time, in seconds.
        """
        return pulumi.get(self, "lock_time")

    @property
    @pulumi.getter(name="lockTimeAvg")
    def lock_time_avg(self) -> float:
        """
        Average lock waiting time, in seconds.
        """
        return pulumi.get(self, "lock_time_avg")

    @property
    @pulumi.getter(name="lockTimeMax")
    def lock_time_max(self) -> float:
        """
        Maximum lock waiting time, in seconds.
        """
        return pulumi.get(self, "lock_time_max")

    @property
    @pulumi.getter(name="lockTimeMin")
    def lock_time_min(self) -> float:
        """
        Minimum lock waiting time, in seconds.
        """
        return pulumi.get(self, "lock_time_min")

    @property
    @pulumi.getter(name="lockTimeRatio")
    def lock_time_ratio(self) -> float:
        """
        The ratio of the total lock waiting time of SQL, in %.
        """
        return pulumi.get(self, "lock_time_ratio")

    @property
    @pulumi.getter
    def md5(self) -> str:
        """
        MD5 value of SOL template.
        """
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter(name="queryTime")
    def query_time(self) -> float:
        """
        Total time, in seconds.
        """
        return pulumi.get(self, "query_time")

    @property
    @pulumi.getter(name="queryTimeAvg")
    def query_time_avg(self) -> float:
        """
        Average execution time, in seconds.
        """
        return pulumi.get(self, "query_time_avg")

    @property
    @pulumi.getter(name="queryTimeMax")
    def query_time_max(self) -> float:
        """
        The maximum execution time, in seconds.
        """
        return pulumi.get(self, "query_time_max")

    @property
    @pulumi.getter(name="queryTimeMin")
    def query_time_min(self) -> float:
        """
        The minimum execution time, in seconds.
        """
        return pulumi.get(self, "query_time_min")

    @property
    @pulumi.getter(name="queryTimeRatio")
    def query_time_ratio(self) -> float:
        """
        Total time-consuming ratio, unit %.
        """
        return pulumi.get(self, "query_time_ratio")

    @property
    @pulumi.getter(name="rowsExamined")
    def rows_examined(self) -> int:
        """
        total scan lines.
        """
        return pulumi.get(self, "rows_examined")

    @property
    @pulumi.getter(name="rowsExaminedAvg")
    def rows_examined_avg(self) -> float:
        """
        average number of lines scanned.
        """
        return pulumi.get(self, "rows_examined_avg")

    @property
    @pulumi.getter(name="rowsExaminedMax")
    def rows_examined_max(self) -> int:
        """
        Maximum number of scan lines.
        """
        return pulumi.get(self, "rows_examined_max")

    @property
    @pulumi.getter(name="rowsExaminedMin")
    def rows_examined_min(self) -> int:
        """
        Minimum number of scan lines.
        """
        return pulumi.get(self, "rows_examined_min")

    @property
    @pulumi.getter(name="rowsExaminedRatio")
    def rows_examined_ratio(self) -> float:
        """
        The proportion of the total number of scanned lines, unit %.
        """
        return pulumi.get(self, "rows_examined_ratio")

    @property
    @pulumi.getter(name="rowsSent")
    def rows_sent(self) -> int:
        """
        total number of rows returned.
        """
        return pulumi.get(self, "rows_sent")

    @property
    @pulumi.getter(name="rowsSentAvg")
    def rows_sent_avg(self) -> float:
        """
        average number of rows returned.
        """
        return pulumi.get(self, "rows_sent_avg")

    @property
    @pulumi.getter(name="rowsSentMax")
    def rows_sent_max(self) -> int:
        """
        Maximum number of rows returned.
        """
        return pulumi.get(self, "rows_sent_max")

    @property
    @pulumi.getter(name="rowsSentMin")
    def rows_sent_min(self) -> int:
        """
        Minimum number of rows returned.
        """
        return pulumi.get(self, "rows_sent_min")

    @property
    @pulumi.getter(name="rowsSentRatio")
    def rows_sent_ratio(self) -> float:
        """
        The proportion of the total number of rows returned, in %.
        """
        return pulumi.get(self, "rows_sent_ratio")

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        DB name.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sqlTemplate")
    def sql_template(self) -> str:
        """
        sql template.
        """
        return pulumi.get(self, "sql_template")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> str:
        """
        SQL with parameters (random).
        """
        return pulumi.get(self, "sql_text")


@pulumi.output_type
class GetSlowLogTopSqlsSchemaListResult(dict):
    def __init__(__self__, *,
                 schema: str):
        """
        :param str schema: DB name.
        """
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        DB name.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetSlowLogUserHostStatsItemResult(dict):
    def __init__(__self__, *,
                 count: int,
                 ratio: float,
                 user_host: str):
        """
        :param int count: The number of slow logs for this source address.
        :param float ratio: The ratio of the number of slow logs of the source address to the total, in %.
        :param str user_host: source address.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "ratio", ratio)
        pulumi.set(__self__, "user_host", user_host)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of slow logs for this source address.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def ratio(self) -> float:
        """
        The ratio of the number of slow logs of the source address to the total, in %.
        """
        return pulumi.get(self, "ratio")

    @property
    @pulumi.getter(name="userHost")
    def user_host(self) -> str:
        """
        source address.
        """
        return pulumi.get(self, "user_host")


@pulumi.output_type
class GetSqlFiltersListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 current_concurrency: int,
                 current_time: str,
                 expire_time: str,
                 id: int,
                 max_concurrency: int,
                 origin_keys: str,
                 origin_rule: str,
                 rejected_sql_count: int,
                 sql_type: str,
                 status: str):
        """
        :param str create_time: create time.
        :param int current_concurrency: current concurrency.
        :param str current_time: current time.
        :param str expire_time: expire time.
        :param int id: task id.
        :param int max_concurrency: maxmum concurrency.
        :param str origin_keys: origin keys.
        :param str origin_rule: origin rule.
        :param int rejected_sql_count: rejected sql count.
        :param str sql_type: sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        :param str status: task status, optional value is RUNNING, FINISHED, TERMINATED.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "current_concurrency", current_concurrency)
        pulumi.set(__self__, "current_time", current_time)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "origin_keys", origin_keys)
        pulumi.set(__self__, "origin_rule", origin_rule)
        pulumi.set(__self__, "rejected_sql_count", rejected_sql_count)
        pulumi.set(__self__, "sql_type", sql_type)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="currentConcurrency")
    def current_concurrency(self) -> int:
        """
        current concurrency.
        """
        return pulumi.get(self, "current_concurrency")

    @property
    @pulumi.getter(name="currentTime")
    def current_time(self) -> str:
        """
        current time.
        """
        return pulumi.get(self, "current_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        expire time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        task id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> int:
        """
        maxmum concurrency.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter(name="originKeys")
    def origin_keys(self) -> str:
        """
        origin keys.
        """
        return pulumi.get(self, "origin_keys")

    @property
    @pulumi.getter(name="originRule")
    def origin_rule(self) -> str:
        """
        origin rule.
        """
        return pulumi.get(self, "origin_rule")

    @property
    @pulumi.getter(name="rejectedSqlCount")
    def rejected_sql_count(self) -> int:
        """
        rejected sql count.
        """
        return pulumi.get(self, "rejected_sql_count")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> str:
        """
        sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        """
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        task status, optional value is RUNNING, FINISHED, TERMINATED.
        """
        return pulumi.get(self, "status")


