# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tink/proto/kms_aead.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x19tink/proto/kms_aead.proto\x12\x12google.crypto.tink\"#\n\x10KmsAeadKeyFormat\x12\x0f\n\x07key_uri\x18\x01 \x01(\t\"S\n\nKmsAeadKey\x12\x0f\n\x07version\x18\x01 \x01(\r\x12\x34\n\x06params\x18\x02 \x01(\x0b\x32$.google.crypto.tink.KmsAeadKeyFormatBP\n\x1c\x63om.google.crypto.tink.protoP\x01Z.github.com/google/tink/proto/kms_aead_go_protob\x06proto3')



_KMSAEADKEYFORMAT = DESCRIPTOR.message_types_by_name['KmsAeadKeyFormat']
_KMSAEADKEY = DESCRIPTOR.message_types_by_name['KmsAeadKey']
KmsAeadKeyFormat = _reflection.GeneratedProtocolMessageType('KmsAeadKeyFormat', (_message.Message,), {
  'DESCRIPTOR' : _KMSAEADKEYFORMAT,
  '__module__' : 'tink.proto.kms_aead_pb2'
  # @@protoc_insertion_point(class_scope:google.crypto.tink.KmsAeadKeyFormat)
  })
_sym_db.RegisterMessage(KmsAeadKeyFormat)

KmsAeadKey = _reflection.GeneratedProtocolMessageType('KmsAeadKey', (_message.Message,), {
  'DESCRIPTOR' : _KMSAEADKEY,
  '__module__' : 'tink.proto.kms_aead_pb2'
  # @@protoc_insertion_point(class_scope:google.crypto.tink.KmsAeadKey)
  })
_sym_db.RegisterMessage(KmsAeadKey)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\034com.google.crypto.tink.protoP\001Z.github.com/google/tink/proto/kms_aead_go_proto'
  _KMSAEADKEYFORMAT._serialized_start=49
  _KMSAEADKEYFORMAT._serialized_end=84
  _KMSAEADKEY._serialized_start=86
  _KMSAEADKEY._serialized_end=169
# @@protoc_insertion_point(module_scope)
