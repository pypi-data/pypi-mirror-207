# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceInitParam',
    'ParametersParam',
    'GetAccountsListResult',
    'GetDatabaseObjectsFuncResult',
    'GetDatabaseObjectsProcResult',
    'GetDatabaseObjectsTableResult',
    'GetDatabaseObjectsViewResult',
    'GetDatabaseTableColResult',
    'GetDatabasesDatabaseResult',
    'GetDbInstancesInstanceResult',
    'GetDbInstancesInstanceResourceTagResult',
    'GetSecurityGroupsListResult',
    'GetSecurityGroupsListInboundResult',
    'GetSecurityGroupsListOutboundResult',
]

@pulumi.output_type
class InstanceInitParam(dict):
    def __init__(__self__, *,
                 param: str,
                 value: str):
        """
        :param str param: parameter name.
        :param str value: parameter value.
        """
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def param(self) -> str:
        """
        parameter name.
        """
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ParametersParam(dict):
    def __init__(__self__, *,
                 param: str,
                 value: str):
        """
        :param str param: parameter name.
        :param str value: parameter value.
        """
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def param(self) -> str:
        """
        parameter name.
        """
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccountsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 delay_thresh: int,
                 description: str,
                 host: str,
                 read_only: int,
                 slave_const: int,
                 update_time: str,
                 user_name: str):
        """
        :param str create_time: creation time.
        :param int delay_thresh: This field is meaningful for read-only accounts, indicating that the standby machine with the active-standby delay less than this value is selected.
        :param str description: User remarks.
        :param str host: The host from which the user can log in (corresponding to the host field of MySQL users, UserName + Host uniquely identifies a user, in the form of IP, and the IP segment ends with %; supports filling in %; if it is empty, it defaults to %).
        :param int read_only: Read-only flag, `0`: No, `1`: The SQL request of this account is preferentially executed on the standby machine, and the host machine is selected for execution when the standby machine is unavailable, `2`: The standby machine is preferentially selected for execution, and the operation fails when the standby machine is unavailable.
        :param int slave_const: For read-only accounts, set whether the policy is to fix the standby machine, `0`: The standby machine is not fixed, that is, the standby machine does not meet the conditions and will not disconnect from the client, and the Proxy selects other available standby machines, `1`: The standby machine does not meet the conditions Disconnect, make sure one connection secures the standby.
        :param str update_time: Update time.
        :param str user_name: username.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delay_thresh", delay_thresh)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "slave_const", slave_const)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="delayThresh")
    def delay_thresh(self) -> int:
        """
        This field is meaningful for read-only accounts, indicating that the standby machine with the active-standby delay less than this value is selected.
        """
        return pulumi.get(self, "delay_thresh")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User remarks.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host from which the user can log in (corresponding to the host field of MySQL users, UserName + Host uniquely identifies a user, in the form of IP, and the IP segment ends with %; supports filling in %; if it is empty, it defaults to %).
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> int:
        """
        Read-only flag, `0`: No, `1`: The SQL request of this account is preferentially executed on the standby machine, and the host machine is selected for execution when the standby machine is unavailable, `2`: The standby machine is preferentially selected for execution, and the operation fails when the standby machine is unavailable.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="slaveConst")
    def slave_const(self) -> int:
        """
        For read-only accounts, set whether the policy is to fix the standby machine, `0`: The standby machine is not fixed, that is, the standby machine does not meet the conditions and will not disconnect from the client, and the Proxy selects other available standby machines, `1`: The standby machine does not meet the conditions Disconnect, make sure one connection secures the standby.
        """
        return pulumi.get(self, "slave_const")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        username.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseObjectsFuncResult(dict):
    def __init__(__self__, *,
                 func: str):
        """
        :param str func: func name.
        """
        pulumi.set(__self__, "func", func)

    @property
    @pulumi.getter
    def func(self) -> str:
        """
        func name.
        """
        return pulumi.get(self, "func")


@pulumi.output_type
class GetDatabaseObjectsProcResult(dict):
    def __init__(__self__, *,
                 proc: str):
        """
        :param str proc: proc name.
        """
        pulumi.set(__self__, "proc", proc)

    @property
    @pulumi.getter
    def proc(self) -> str:
        """
        proc name.
        """
        return pulumi.get(self, "proc")


@pulumi.output_type
class GetDatabaseObjectsTableResult(dict):
    def __init__(__self__, *,
                 table: str):
        """
        :param str table: table name.
        """
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def table(self) -> str:
        """
        table name.
        """
        return pulumi.get(self, "table")


@pulumi.output_type
class GetDatabaseObjectsViewResult(dict):
    def __init__(__self__, *,
                 view: str):
        """
        :param str view: view name.
        """
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def view(self) -> str:
        """
        view name.
        """
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDatabaseTableColResult(dict):
    def __init__(__self__, *,
                 col: str,
                 type: str):
        """
        :param str col: column name.
        :param str type: column type.
        """
        pulumi.set(__self__, "col", col)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def col(self) -> str:
        """
        column name.
        """
        return pulumi.get(self, "col")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        column type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 db_name: str):
        """
        :param str db_name: Database name.
        """
        pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetDbInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 db_version_id: str,
                 instance_id: str,
                 instance_name: str,
                 memory: int,
                 project_id: int,
                 region: str,
                 resource_tags: Sequence['outputs.GetDbInstancesInstanceResourceTagResult'],
                 storage: int,
                 subnet_id: str,
                 vpc_id: str,
                 zone: str):
        """
        :param str db_version_id: db version id.
        :param str instance_id: instance id.
        :param str instance_name: instance name.
        :param int memory: meory of instance.
        :param int project_id: project id.
        :param str region: region.
        :param Sequence['GetDbInstancesInstanceResourceTagArgs'] resource_tags: resource tags.
        :param int storage: storage of instance.
        :param str subnet_id: subnet id.
        :param str vpc_id: vpc id.
        :param str zone: available zone.
        """
        pulumi.set(__self__, "db_version_id", db_version_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_tags", resource_tags)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> str:
        """
        db version id.
        """
        return pulumi.get(self, "db_version_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        meory of instance.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Sequence['outputs.GetDbInstancesInstanceResourceTagResult']:
        """
        resource tags.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter
    def storage(self) -> int:
        """
        storage of instance.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        available zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDbInstancesInstanceResourceTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetSecurityGroupsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetSecurityGroupsListInboundResult'],
                 outbounds: Sequence['outputs.GetSecurityGroupsListOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        """
        :param str create_time: Creation time, time format: `yyyy-mm-dd hh:mm:ss`.
        :param Sequence['GetSecurityGroupsListInboundArgs'] inbounds: Inbound rules.
        :param Sequence['GetSecurityGroupsListOutboundArgs'] outbounds: Outbound Rules.
        :param int project_id: Project ID.
        :param str security_group_id: Security group ID.
        :param str security_group_name: security group name.
        :param str security_group_remark: Security Group Notes.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time, time format: `yyyy-mm-dd hh:mm:ss`.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetSecurityGroupsListInboundResult']:
        """
        Inbound rules.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetSecurityGroupsListOutboundResult']:
        """
        Outbound Rules.
        """
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        Security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        """
        security group name.
        """
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        """
        Security Group Notes.
        """
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetSecurityGroupsListInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, ACCEPT or DROP.
        :param str cidr_ip: Source IP or IP range, such as 192.168.0.0/16.
        :param str ip_protocol: Network protocols, support `UDP`, `TCP`, etc.
        :param str port_range: port.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, ACCEPT or DROP.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Source IP or IP range, such as 192.168.0.0/16.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocols, support `UDP`, `TCP`, etc.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        port.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetSecurityGroupsListOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, ACCEPT or DROP.
        :param str cidr_ip: Source IP or IP range, such as 192.168.0.0/16.
        :param str ip_protocol: Network protocols, support `UDP`, `TCP`, etc.
        :param str port_range: port.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, ACCEPT or DROP.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Source IP or IP range, such as 192.168.0.0/16.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocols, support `UDP`, `TCP`, etc.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        port.
        """
        return pulumi.get(self, "port_range")


