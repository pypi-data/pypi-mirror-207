{"version":3,"file":"6502cf65.js","mappings":";;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;ACkHA;AACA;AACA;AACA;;;;AAIA;;AAIA;AACA;;;;;;;AAOA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAEA;AACA;AAGA;AAGA;AACA;;;AAMA;;;;;AAMA;;;;;;;AAgIA","sources":["webpack://dynalitepanel/./src/dynalite-channel-table.ts","webpack://dynalitepanel/./src/dynalite-edit-area.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport {\n  CONF_CHANNEL,\n  CONF_DYNET_ID,\n  CONF_FADE,\n  CONF_LIGHT,\n  CONF_NAME,\n  CONF_SWITCH,\n  CONF_TYPE,\n} from \"./const\";\nimport { capitalizeFirst, DynaliteChannelData } from \"./common\";\nimport type { DynaliteTableSettings } from \"./dynalite-table\";\nimport {\n  DynaliteFadeInput,\n  DynaliteIdInput,\n  DynaliteSelectInput,\n  DynaliteTextInput,\n} from \"./dynalite-input-settings\";\nimport \"./dynalite-table\";\n\n@customElement(\"dynalite-channel-table\")\nexport class DynaliteChannelTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public narrow = false;\n\n  @property({ attribute: false }) public channels!: { [key: string]: DynaliteChannelData };\n\n  @property({ type: String }) public defaultFade!: string;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n    const settings: DynaliteTableSettings = {\n      name: \"Channel\",\n      inputs: this._inputs,\n    };\n    const helpers = {\n      name: `Default: Channel ${CONF_DYNET_ID}`,\n      fade: `Default: ${this.defaultFade}`,\n    };\n    return html`\n      <dynalite-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .settings=${settings}\n        .data=${this.channels}\n        .helpers=${helpers}\n        @dynalite-table=${this._redispatchEvent}\n      >\n      </dynalite-table>\n    `;\n  }\n\n  private _redispatchEvent(_ev: CustomEvent) {\n    this.dispatchEvent(new CustomEvent(\"dynalite-table\"));\n  }\n\n  private _inputs = {\n    dynetId: DynaliteIdInput(CONF_DYNET_ID, CONF_CHANNEL)\n      .heading(\"Number\")\n      .width(\"15%\")\n      .narrowWidth(\"30%\")\n      .desc(\"Dynalite channel number (1-255)\")\n      .required(),\n    name: DynaliteTextInput(CONF_NAME)\n      .heading(\"Name\")\n      .desc(\"Name for this channel\")\n      .width(\"15%\")\n      .narrowWidth(\"70%\"),\n    fade: DynaliteFadeInput(CONF_FADE)\n      .heading(\"Fade\")\n      .desc(\"Preset fade time (seconds)\")\n      .width(\"15%\"),\n    type: DynaliteSelectInput(CONF_TYPE)\n      .heading(\"Type\")\n      .desc(\"Entity type to create\")\n      .width(\"15%\")\n      .selection([\n        [CONF_LIGHT, \"Light (default)\"],\n        [CONF_SWITCH, \"Switch\"],\n      ])\n      .transform(capitalizeFirst),\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-channel-table\": DynaliteChannelTable;\n  }\n}\n","import { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement, property, queryAll, state } from \"lit/decorators\";\nimport { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport { haStyle } from \"../homeassistant-frontend/src/resources/styles\";\nimport { fireEvent } from \"../homeassistant-frontend/src/common/dom/fire_event\";\nimport { navigate } from \"../homeassistant-frontend/src/common/navigate\";\nimport {\n  AREA_GENERAL_PARAMS,\n  CONF_ADVANCED,\n  CONF_AREA,\n  CONF_CHANNEL,\n  CONF_CHANNEL_COVER,\n  CONF_CLASS,\n  CONF_CLOSE,\n  CONF_DURATION,\n  CONF_DYNET_ID,\n  CONF_FADE,\n  CONF_NAME,\n  CONF_NODEFAULT,\n  CONF_OPEN,\n  CONF_PRESET,\n  CONF_ROOM,\n  CONF_ROOM_OFF,\n  CONF_ROOM_ON,\n  CONF_STOP,\n  CONF_TEMPLATE,\n  CONF_TILT,\n  CONF_TILT_ENABLED,\n  CONF_TIME_COVER,\n  EVENT_CONFIG_CHANGED,\n  ROOM_PARAMS,\n  TEMPLATE_COVER,\n  TEMPLATE_MANUAL,\n  TEMPLATE_ROOM,\n  TIME_COVER_ADVANCED_PARAMS,\n  TIME_COVER_GENERAL_PARAMS,\n} from \"./const\";\nimport {\n  Dynalite,\n  DynaliteAreaData,\n  DynaliteChannelData,\n  dynaliteCopy,\n  DynaliteDefaultTemplates,\n  DynalitePresetData,\n  enumeratedTemplates,\n  panelTabs,\n} from \"./common\";\nimport type { DynaliteInput } from \"./dynalite-input\";\nimport {\n  DynaliteBooleanInput,\n  DynaliteDurationInput,\n  DynaliteFadeInput,\n  DynaliteIdInput,\n  DynaliteSelectInput,\n  DynaliteTextInput,\n} from \"./dynalite-input-settings\";\nimport { DynaliteInputElement } from \"./dynalite-input-element\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"../homeassistant-frontend/src/layouts/hass-tabs-subpage\";\nimport \"../homeassistant-frontend/src/components/ha-card\";\nimport \"./dynalite-action-button\";\nimport \"./dynalite-preset-table\";\nimport \"./dynalite-channel-table\";\n\ninterface DynaliteEditAreaInputs {\n  dynetId: string;\n  name: string;\n  template: string;\n  class: string;\n  duration: string;\n  tiltEnabled: boolean;\n  tilt: string;\n  fade: string;\n  nodefault: boolean;\n  advanced: boolean;\n  room_on: string;\n  room_off: string;\n  open: string;\n  close: string;\n  stop: string;\n  channel_cover: string;\n}\n\n@customElement(\"dynalite-edit-area\")\nexport class DynaliteEditArea extends DynaliteInputElement<DynaliteEditAreaInputs> {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public dynalite!: Dynalite;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public narrow = false;\n\n  @property({ attribute: false }) public areaNumber!: string;\n\n  @state() private _hasInitialized = false;\n\n  @state() private _isNew = false;\n\n  @state() private _channels: { [key: string]: DynaliteChannelData } = {};\n\n  @state() private _presets: { [key: string]: DynalitePresetData } = {};\n\n  @queryAll(\"dynalite-input\") _inputElements?: DynaliteInput[];\n\n  protected willUpdate(_changedProperties: Map<string | number | symbol, unknown>): void {\n    super.willUpdate(_changedProperties);\n    if (!this.dynalite) return;\n    if (!this._hasInitialized) {\n      this.helpers = { fade: `Default: ${this.dynalite.config.default?.fade}` };\n      enumeratedTemplates.forEach(([template, param]) => {\n        const defValue =\n          this.dynalite.config.template![template][param] ||\n          DynaliteDefaultTemplates[template][param];\n        this.helpers![param] = `Default: ${defValue}`;\n      });\n      this.settings.class.selection(this.dynalite.classSelection);\n      if (this.areaNumber && this.areaNumber in (this.dynalite.config.area || {})) {\n        this._isNew = false;\n        this.disabled = [CONF_DYNET_ID];\n      } else {\n        this._isNew = true;\n        this.excluded = { dynetId: Object.keys(this.dynalite.config!.area!) };\n      }\n      const areaData: DynaliteAreaData = this.dynalite.config.area![this.areaNumber] || {};\n      const calcTilt = parseFloat(\n        CONF_TILT in areaData\n          ? areaData.tilt!\n          : CONF_TILT in this.dynalite.config.template!.time_cover!\n          ? this.dynalite.config.template!.time_cover.tilt!\n          : DynaliteDefaultTemplates.time_cover!.tilt!\n      );\n      this.result = {\n        dynetId: this.areaNumber || \"\",\n        name: areaData.name || \"\",\n        template: areaData.template || \"\",\n        class:\n          areaData.class ||\n          this.dynalite.config.template?.time_cover?.class ||\n          DynaliteDefaultTemplates.time_cover!.class!,\n        duration: areaData.duration || \"\",\n        tiltEnabled: calcTilt !== 0,\n        tilt: areaData.tilt || \"\",\n        fade: areaData.fade || \"\",\n        nodefault: areaData.nodefault || false,\n        advanced: enumeratedTemplates.some(\n          ([_template, param]) => areaData[param] && !TIME_COVER_GENERAL_PARAMS.includes(param)\n        ),\n        room_on: areaData.room_on || \"\",\n        room_off: areaData.room_off || \"\",\n        open: areaData.open || \"\",\n        close: areaData.close || \"\",\n        stop: areaData.stop || \"\",\n        channel_cover: areaData.channel_cover || \"\",\n      };\n      this._channels = JSON.parse(JSON.stringify(areaData.channel || {}));\n      this._presets = JSON.parse(JSON.stringify(areaData.preset || {}));\n      this._hasInitialized = true;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.dynalite) {\n      return html``;\n    }\n    const canSave =\n      this.hasElementChanged &&\n      this._inputElements?.length &&\n      Array.from(this._inputElements).every((elem) => elem.isValid());\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .tabs=${panelTabs}\n        .route=${this.route}\n        searchLabel=\"abcde1\"\n        )}\n        clickable\n        >${this._isNew\n          ? html``\n          : html` <span slot=\"toolbar-icon\">\n              <dynalite-action-button\n                @dynalite-action-button=${this._deleteArea}\n                param=${this.areaNumber}\n                label=\"Area\"\n              ></dynalite-action-button>\n            </span>`}\n        <div class=\"content\">\n          <ha-card outlined>\n            <div class=\"card-content\">\n              <h1>${this._isNew ? html`New Area` : html`Edit Area ${this.areaNumber}`}</h1>\n              <h2>Area Settings</h2>\n              ${this.genInputElement(CONF_DYNET_ID)} ${this.genInputElement(CONF_NAME)}\n              ${this.genInputElement(CONF_TEMPLATE)}\n              ${this.result.template === CONF_TIME_COVER\n                ? html`\n                    ${this.genInputElement(CONF_CLASS)} ${this.genInputElement(CONF_DURATION)}\n                    ${this.genInputElement(CONF_TILT_ENABLED)}\n                    ${this.result.tiltEnabled ? this.genInputElement(CONF_TILT) : html``}\n                  `\n                : html``}\n              ${this.genInputElement(CONF_FADE)} ${this.genInputElement(CONF_NODEFAULT)}\n              <h2>Area Specific Presets</h2>\n              <dynalite-preset-table\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n                .route=${this.route}\n                .presets=${this._presets || {}}\n                defaultFade=${this.result.fade !== \"\"\n                  ? this.result.fade\n                  : this.dynalite.config.default!.fade!}\n                @dynalite-table=${this._onDynaliteTableEvent}\n              ></dynalite-preset-table>\n              <h2>Area Specific Channels</h2>\n              <dynalite-channel-table\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n                .route=${this.route}\n                .channels=${this._channels || {}}\n                defaultFade=${this.result.fade !== \"\"\n                  ? this.result.fade\n                  : this.dynalite.config.default!.fade!}\n                @dynalite-table=${this._onDynaliteTableEvent}\n              ></dynalite-channel-table>\n              ${this.result.template\n                ? html`<h2>Area Specific Behavior</h2>\n                    ${this.genInputElement(CONF_ADVANCED)}\n                    ${this.result.advanced\n                      ? this.result.template === CONF_ROOM\n                        ? html`${this.genInputElement(CONF_ROOM_ON)}\n                          ${this.genInputElement(CONF_ROOM_OFF)}`\n                        : this.result.template === CONF_TIME_COVER\n                        ? html`${this.genInputElement(CONF_OPEN)}\n                          ${this.genInputElement(CONF_CLOSE)} ${this.genInputElement(CONF_STOP)}\n                          ${this.genInputElement(CONF_CHANNEL_COVER)}`\n                        : html``\n                      : html``}`\n                : html``}\n            </div>\n            <div class=\"card-actions\">\n              <mwc-button @click=${this._save} ?disabled=${!canSave}> Save </mwc-button>\n            </div>\n          </ha-card>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _onDynaliteTableEvent(_ev: CustomEvent) {\n    this.hasElementChanged = true;\n    this.requestUpdate();\n  }\n\n  private _save() {\n    // fill complete and send update signal\n    const res: DynaliteAreaData = {\n      channel: dynaliteCopy(this._channels),\n      preset: dynaliteCopy(this._presets),\n    };\n    AREA_GENERAL_PARAMS.forEach((param) => {\n      if (this.result[param]) res[param] = this.result[param];\n    });\n    if (this.result.template) {\n      if (this.result.template === CONF_ROOM && this.result.advanced) {\n        ROOM_PARAMS.forEach((param) => {\n          if (this.result[param]) res[param] = this.result[param];\n        });\n      }\n      if (this.result.template === CONF_TIME_COVER) {\n        const params = this.result.advanced\n          ? TIME_COVER_ADVANCED_PARAMS\n          : TIME_COVER_GENERAL_PARAMS;\n        params.forEach((param) => {\n          if (this.result[param]) res[param] = this.result[param];\n        });\n        if (!this.result.tiltEnabled) res.tilt = \"0\";\n      }\n    }\n    this.dynalite.config.area![this.result.dynetId] = res;\n    this.hasElementChanged = false;\n    fireEvent(this, EVENT_CONFIG_CHANGED, { value: true });\n    this.requestUpdate();\n  }\n\n  private _deleteArea(ev) {\n    const areaNumber = ev.detail;\n    delete this.dynalite.config.area![areaNumber];\n    fireEvent(this, EVENT_CONFIG_CHANGED, { value: true });\n    navigate(\"/dynalite/areas\");\n  }\n\n  protected result: DynaliteEditAreaInputs = {\n    dynetId: \"\",\n    name: \"\",\n    template: \"\",\n    class: \"\",\n    duration: \"\",\n    tiltEnabled: false,\n    tilt: \"\",\n    fade: \"\",\n    nodefault: false,\n    advanced: false,\n    room_on: \"\",\n    room_off: \"\",\n    open: \"\",\n    close: \"\",\n    stop: \"\",\n    channel_cover: \"\",\n  };\n\n  protected settings = {\n    dynetId: DynaliteIdInput(CONF_DYNET_ID, CONF_AREA)\n      .heading(\"Number\")\n      .desc(\"Dynalite area number (1-255)\")\n      .required(),\n    name: DynaliteTextInput(CONF_NAME)\n      .heading(\"Area Name\")\n      .desc(\"Usually a room or a function\")\n      .required(),\n    template: DynaliteSelectInput(CONF_TEMPLATE)\n      .heading(\"Area Behavior\")\n      .desc(\"Configure specific area behaviors\")\n      .selection([\n        [CONF_ROOM, TEMPLATE_ROOM],\n        [CONF_TIME_COVER, TEMPLATE_COVER],\n        [\"\", TEMPLATE_MANUAL],\n      ]),\n    class: DynaliteSelectInput(CONF_CLASS).heading(\"Type\").desc(\"Blind type\"),\n    duration: DynaliteDurationInput(CONF_DURATION)\n      .heading(\"Open/Close Duration\")\n      .desc(\"Time in seconds to open this blind\"),\n    tiltEnabled: DynaliteBooleanInput(CONF_TILT_ENABLED)\n      .heading(\"Enable Tilt\")\n      .desc(\"Enable tilt for this blind\"),\n    tilt: DynaliteDurationInput(CONF_TILT)\n      .heading(\"Tilt Duration\")\n      .desc(\"Time in seconds to open this tilt\"),\n    fade: DynaliteFadeInput(CONF_FADE)\n      .heading(\"Fade Time\")\n      .desc(\"Default fade for this area (seconds)\"),\n    nodefault: DynaliteBooleanInput(CONF_NODEFAULT)\n      .heading(\"Ignore Default Presets\")\n      .desc(\"Do not use the globally configured presets\"),\n    advanced: DynaliteBooleanInput(CONF_ADVANCED)\n      .heading(\"Area-specific Behaviors\")\n      .desc(\"Advanced only\"),\n    room_on: DynaliteIdInput(CONF_ROOM_ON, CONF_PRESET)\n      .heading(\"Turn On\")\n      .desc(\"Preset that turns this area on\"),\n    room_off: DynaliteIdInput(CONF_ROOM_OFF, CONF_PRESET)\n      .heading(\"Turn Off\")\n      .desc(\"Preset that turns this area off\"),\n    open: DynaliteIdInput(CONF_OPEN, CONF_PRESET).heading(\"Open\").desc(\"Preset to open this blind\"),\n    close: DynaliteIdInput(CONF_CLOSE, CONF_PRESET)\n      .heading(\"Close\")\n      .desc(\"Preset to close this blind\"),\n    stop: DynaliteIdInput(CONF_STOP, CONF_PRESET).heading(\"Open\").desc(\"Preset to open this blind\"),\n    channel_cover: DynaliteIdInput(CONF_CHANNEL_COVER, CONF_CHANNEL)\n      .heading(\"Controlling channel\")\n      .desc(\"Channel number to control this blind\"),\n  };\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 28px 20px 0;\n          display: block;\n          max-width: 600px;\n          margin: 0 auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-edit-area\": DynaliteEditArea;\n  }\n}\n"],"names":[],"sourceRoot":""}