# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tink/proto/jwt_ecdsa.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1atink/proto/jwt_ecdsa.proto\x12\x12google.crypto.tink\"\xd5\x01\n\x11JwtEcdsaPublicKey\x12\x0f\n\x07version\x18\x01 \x01(\r\x12\x38\n\talgorithm\x18\x02 \x01(\x0e\x32%.google.crypto.tink.JwtEcdsaAlgorithm\x12\t\n\x01x\x18\x03 \x01(\x0c\x12\t\n\x01y\x18\x04 \x01(\x0c\x12\x43\n\ncustom_kid\x18\x05 \x01(\x0b\x32/.google.crypto.tink.JwtEcdsaPublicKey.CustomKid\x1a\x1a\n\tCustomKid\x12\r\n\x05value\x18\x01 \x01(\t\"s\n\x12JwtEcdsaPrivateKey\x12\x0f\n\x07version\x18\x01 \x01(\r\x12\x39\n\npublic_key\x18\x02 \x01(\x0b\x32%.google.crypto.tink.JwtEcdsaPublicKey\x12\x11\n\tkey_value\x18\x03 \x01(\x0c\"^\n\x11JwtEcdsaKeyFormat\x12\x0f\n\x07version\x18\x01 \x01(\r\x12\x38\n\talgorithm\x18\x02 \x01(\x0e\x32%.google.crypto.tink.JwtEcdsaAlgorithm*D\n\x11JwtEcdsaAlgorithm\x12\x0e\n\nES_UNKNOWN\x10\x00\x12\t\n\x05\x45S256\x10\x01\x12\t\n\x05\x45S384\x10\x02\x12\t\n\x05\x45S512\x10\x03\x42Q\n\x1c\x63om.google.crypto.tink.protoP\x01Z/github.com/google/tink/proto/jwt_ecdsa_go_protob\x06proto3')

_JWTECDSAALGORITHM = DESCRIPTOR.enum_types_by_name['JwtEcdsaAlgorithm']
JwtEcdsaAlgorithm = enum_type_wrapper.EnumTypeWrapper(_JWTECDSAALGORITHM)
ES_UNKNOWN = 0
ES256 = 1
ES384 = 2
ES512 = 3


_JWTECDSAPUBLICKEY = DESCRIPTOR.message_types_by_name['JwtEcdsaPublicKey']
_JWTECDSAPUBLICKEY_CUSTOMKID = _JWTECDSAPUBLICKEY.nested_types_by_name['CustomKid']
_JWTECDSAPRIVATEKEY = DESCRIPTOR.message_types_by_name['JwtEcdsaPrivateKey']
_JWTECDSAKEYFORMAT = DESCRIPTOR.message_types_by_name['JwtEcdsaKeyFormat']
JwtEcdsaPublicKey = _reflection.GeneratedProtocolMessageType('JwtEcdsaPublicKey', (_message.Message,), {

  'CustomKid' : _reflection.GeneratedProtocolMessageType('CustomKid', (_message.Message,), {
    'DESCRIPTOR' : _JWTECDSAPUBLICKEY_CUSTOMKID,
    '__module__' : 'tink.proto.jwt_ecdsa_pb2'
    # @@protoc_insertion_point(class_scope:google.crypto.tink.JwtEcdsaPublicKey.CustomKid)
    })
  ,
  'DESCRIPTOR' : _JWTECDSAPUBLICKEY,
  '__module__' : 'tink.proto.jwt_ecdsa_pb2'
  # @@protoc_insertion_point(class_scope:google.crypto.tink.JwtEcdsaPublicKey)
  })
_sym_db.RegisterMessage(JwtEcdsaPublicKey)
_sym_db.RegisterMessage(JwtEcdsaPublicKey.CustomKid)

JwtEcdsaPrivateKey = _reflection.GeneratedProtocolMessageType('JwtEcdsaPrivateKey', (_message.Message,), {
  'DESCRIPTOR' : _JWTECDSAPRIVATEKEY,
  '__module__' : 'tink.proto.jwt_ecdsa_pb2'
  # @@protoc_insertion_point(class_scope:google.crypto.tink.JwtEcdsaPrivateKey)
  })
_sym_db.RegisterMessage(JwtEcdsaPrivateKey)

JwtEcdsaKeyFormat = _reflection.GeneratedProtocolMessageType('JwtEcdsaKeyFormat', (_message.Message,), {
  'DESCRIPTOR' : _JWTECDSAKEYFORMAT,
  '__module__' : 'tink.proto.jwt_ecdsa_pb2'
  # @@protoc_insertion_point(class_scope:google.crypto.tink.JwtEcdsaKeyFormat)
  })
_sym_db.RegisterMessage(JwtEcdsaKeyFormat)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n\034com.google.crypto.tink.protoP\001Z/github.com/google/tink/proto/jwt_ecdsa_go_proto'
  _JWTECDSAALGORITHM._serialized_start=479
  _JWTECDSAALGORITHM._serialized_end=547
  _JWTECDSAPUBLICKEY._serialized_start=51
  _JWTECDSAPUBLICKEY._serialized_end=264
  _JWTECDSAPUBLICKEY_CUSTOMKID._serialized_start=238
  _JWTECDSAPUBLICKEY_CUSTOMKID._serialized_end=264
  _JWTECDSAPRIVATEKEY._serialized_start=266
  _JWTECDSAPRIVATEKEY._serialized_end=381
  _JWTECDSAKEYFORMAT._serialized_start=383
  _JWTECDSAKEYFORMAT._serialized_end=477
# @@protoc_insertion_point(module_scope)
