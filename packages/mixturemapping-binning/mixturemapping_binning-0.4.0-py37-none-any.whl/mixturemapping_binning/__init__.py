from .__pytransform import pyarmor_runtime

"""
# MixtureMapping

[![Documentation](https://github.com/VK/dash-express-components/workflows/Publish%20release/badge.svg)](https://vk.github.io/mixturemapping-doc)
[![PyPI version](https://badge.fury.io/py/mixturemapping.svg)](https://badge.fury.io/py/mixturemapping)

Train Gaussian Mixture Mappings


## Provides:
  1. Layers to build tensorflow models to map Gaussian mixtures
  2. Tools to compute yield values of Gaussian mixtures in complex binning schemes

## Example
  
    import mixturemapping as mm  
    import tensorflow as tf

    inMeans = tf.keras.Input(shape=(mixN, inputMixM), name="Means", dtype=dataType)
    inStdDevs = tf.keras.Input(shape=(mixN, inputMixM), name="StdDevs", dtype=dataType)
    inWeight = tf.keras.Input(shape=(mixN), name="Weights", dtype=dataType)

    mapModel = tf.keras.Sequential()
    mapModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    mapModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    mapModel.add( tf.keras.layers.Dense(outputMixM))
    y = mapModel(inMeans)

    deltaModel = tf.keras.Sequential()
    deltaModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    deltaModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    deltaModel.add( tf.keras.layers.Dense(outputMixM))
    yDelta = deltaModel(inMeans)

    covALayer = mm.layers.TrainableCovMatrix(outputMixM, name="CovA")
    covA = covALayer(inMeans)

    mapLayer = mm.layers.GeneralMapping(outputMixM, name="Mapping", dtype=dataType)
    newDist = mapLayer({'means': inMeans, 'y':y, 'yDelta':yDelta, 'stdDevs': inStdDevs, 'weights': inWeight, 'covA': covA})

    distLayer = mm.layers.Distribution(dtype=dataType, regularize_cov_epsilon=0.95)
    dist = distLayer(newDist)

### Developement
```
$ py -m venv env
$ .\env\Scripts\activate
$ pip install -r requirements.txt
```


"""


pyarmor_runtime()
__pyarmor__(__name__, __file__, b'\x50\x59\x41\x52\x4d\x4f\x52\x00\x00\x03\x07\x00\x42\x0d\x0d\x0a\x08\x2d\xa0\x01\x00\x00\x00\x00\x01\x00\x00\x00\x40\x00\x00\x00\x78\x01\x00\x00\x00\x00\x00\x18\x61\xe3\x8e\x48\x67\x59\xd3\xa4\x48\x9e\x42\x20\x1a\xd2\x1a\xd7\x00\x00\x00\x00\x00\x00\x00\x00\x7e\x7e\xa6\x2e\x3b\x8e\x08\x4b\x59\x7c\xf6\xf2\xd5\xff\x87\x99\x72\xeb\x96\xb8\xff\xf4\x91\xc6\xf8\x31\x63\x59\xda\xd8\x66\x6b\x46\x92\x20\x7c\x2f\xd9\x5c\x8f\x07\x61\xca\xdc\xff\x28\xaa\xc7\x0c\xe8\xb9\xba\x30\xd9\x41\x1f\x9d\xa7\xc6\xb4\xad\xe6\xf4\x54\xd0\x8e\x97\xc5\xff\x8d\xe5\xb3\x64\xfb\xdb\x79\xac\x74\xf4\xd4\x2a\xbd\xd2\x13\xdf\x82\x49\x8b\x61\x26\x79\x78\xe8\x24\x36\xbc\x5d\xbc\x32\x97\xa2\xe4\x64\x3d\x4f\xd8\xe6\x35\xf3\xc8\xe4\x19\xf6\x5a\xba\x3f\xbd\xf3\x41\x54\xac\x1f\x07\xd6\x1d\xeb\x85\xfa\x64\x41\xac\xa0\x7a\x14\x6a\x0c\x6c\x63\x4d\xd5\xb6\xef\x79\x4f\x38\x10\x19\xf2\x5c\xe7\xf7\x66\x3c\xb0\x91\x33\xb6\xb1\xc2\xfb\xb3\x62\x02\x86\x87\xa7\x1a\x14\x47\x50\x8b\x05\xf3\x92\x4a\x15\x45\x15\x7d\xdf\x89\xd8\x09\x03\xc1\x94\xaa\xe4\xd2\x62\x2c\x1e\x5a\x15\x57\x6e\x3e\x0b\x69\xbf\xed\xcd\x6f\xf7\x69\xb8\x54\x27\xd8\x83\x49\x3c\xb7\xc6\x19\x4e\xe9\x7c\xf9\xd7\x1b\x5f\x6a\x5f\x06\x00\x3c\xd3\xf4\xea\x8d\x8b\x33\xdc\xb4\x41\xa7\xcb\x79\x62\xf7\x21\xad\xa6\xf0\xfa\x76\x13\x2b\x67\xad\xfe\x80\xe6\x44\xbe\x75\xd6\x7c\x10\xe8\x1f\xf4\xcf\x0f\x54\x69\xc5\x33\x8b\x5a\x78\xc6\x6d\x2a\xc1\x17\xaa\xdd\x9e\xde\xc1\x6a\x1a\xfb\x5a\x96\xf1\x4b\x45\x80\xee\xb0\xaa\x7a\x0a\xdd\xa0\x43\x9c\xbb\x17\x20\xf9\x40\x41\xad\xf5\x78\xb3\x27\xaa\x42\x56\x82\xd8\x71\xdf\x97\x04\xca\xcb\x10\x80\xf2\x77\x3d\xe3\x58\x48\x1d\xd1\x38\x2e\x85\xa4\x69\xac\x02\x36\x8e\x8d\xf6\x45\x84\xb6\xed\xfa\x26\x24\x60\x97\x02\x89\xc0\x6c\x36\x5b\x7c\xdf\x48\x9b\xa5\x81\x8b\x02\xf7\x34\xef\x6d\x12\x94\xd1\xf1\x0d\xd9', 2)

# cleanup
del pyarmor_runtime

