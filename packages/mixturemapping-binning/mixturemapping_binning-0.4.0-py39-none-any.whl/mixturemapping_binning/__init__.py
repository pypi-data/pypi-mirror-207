from .__pytransform import pyarmor_runtime

"""
# MixtureMapping

[![Documentation](https://github.com/VK/dash-express-components/workflows/Publish%20release/badge.svg)](https://vk.github.io/mixturemapping-doc)
[![PyPI version](https://badge.fury.io/py/mixturemapping.svg)](https://badge.fury.io/py/mixturemapping)

Train Gaussian Mixture Mappings


## Provides:
  1. Layers to build tensorflow models to map Gaussian mixtures
  2. Tools to compute yield values of Gaussian mixtures in complex binning schemes

## Example
  
    import mixturemapping as mm  
    import tensorflow as tf

    inMeans = tf.keras.Input(shape=(mixN, inputMixM), name="Means", dtype=dataType)
    inStdDevs = tf.keras.Input(shape=(mixN, inputMixM), name="StdDevs", dtype=dataType)
    inWeight = tf.keras.Input(shape=(mixN), name="Weights", dtype=dataType)

    mapModel = tf.keras.Sequential()
    mapModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    mapModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    mapModel.add( tf.keras.layers.Dense(outputMixM))
    y = mapModel(inMeans)

    deltaModel = tf.keras.Sequential()
    deltaModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    deltaModel.add( tf.keras.layers.Dense(40, activation="relu", kernel_regularizer=regularizers.l2(0.001)) )
    deltaModel.add( tf.keras.layers.Dense(outputMixM))
    yDelta = deltaModel(inMeans)

    covALayer = mm.layers.TrainableCovMatrix(outputMixM, name="CovA")
    covA = covALayer(inMeans)

    mapLayer = mm.layers.GeneralMapping(outputMixM, name="Mapping", dtype=dataType)
    newDist = mapLayer({'means': inMeans, 'y':y, 'yDelta':yDelta, 'stdDevs': inStdDevs, 'weights': inWeight, 'covA': covA})

    distLayer = mm.layers.Distribution(dtype=dataType, regularize_cov_epsilon=0.95)
    dist = distLayer(newDist)

### Developement
```
$ py -m venv env
$ .\env\Scripts\activate
$ pip install -r requirements.txt
```


"""


pyarmor_runtime()
__pyarmor__(__name__, __file__, b'\x50\x59\x41\x52\x4d\x4f\x52\x00\x00\x03\x09\x00\x61\x0d\x0d\x0a\x08\x2d\xa0\x01\x00\x00\x00\x00\x01\x00\x00\x00\x40\x00\x00\x00\x8c\x01\x00\x00\x00\x00\x00\x18\x23\xb3\x4d\xe3\x3e\xe0\x36\xc5\x13\xd7\x87\x69\xc7\x67\xbf\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x57\xe8\xea\x90\x4f\x46\x22\xa0\x93\x30\x4e\x59\x97\xb8\xa4\xcf\x6b\x6d\x55\x19\xed\xaa\x8c\x4c\x68\xa1\x64\xe1\xc1\x70\xbf\x4b\x79\x82\x7f\xb0\x57\xba\x2e\xd8\xb8\x01\xf7\xd0\x7a\xa6\x7d\x31\x03\xea\x15\xa0\xd1\xa3\x0d\xc6\x74\x55\x22\xfb\x23\x91\xb3\x1e\x64\x47\xf0\x0a\xa3\x11\xf3\x9a\x2f\xdf\xfd\x1c\x83\x19\x22\x8d\x36\xaa\xc1\x61\x81\x86\x3e\x2b\x0e\x51\xba\x91\x57\x52\x82\x2c\x33\x94\xd0\xb0\x08\x9f\x7d\x31\x39\xc2\x9f\xb5\x53\xa4\x09\x3f\x48\x1c\x6a\xc4\xda\x74\x27\x3b\x6e\x53\x65\xed\xa5\xad\x34\xa9\xc0\x69\x5f\xc0\x2e\xdb\x04\xae\xb2\x42\xa7\x18\x80\x8e\x7d\xc2\x07\xea\xc2\xb0\xf5\xb9\xff\xc3\x8c\xe7\xb2\x92\x63\x50\xc5\x32\x72\xa5\x29\xb4\x0b\x75\x10\xdd\x4a\x32\xed\xa8\xfe\x87\x07\x0c\x29\x7a\xee\x28\x4b\x15\xff\x41\xba\x1b\x46\xb6\x6b\x46\xe1\x9c\xbb\x86\xf4\x4c\x13\xab\x7e\x77\xb5\x9d\x32\x19\xff\xec\x88\x60\x21\xfc\xfd\xf3\x0e\xc5\x4d\xa5\xf1\x2f\x28\xb0\x49\x3b\x6a\xf0\x19\x01\x6f\x5d\x92\x0f\x69\xfa\xd2\x3b\xdd\x63\xea\xd5\x03\xfd\x61\xf1\x31\xb6\xf1\xb9\xde\x5a\xec\xfb\x85\x0e\x15\xe9\x40\xfc\x02\x77\xc3\x12\xa3\xa2\x80\x37\x70\x35\xf5\xdd\x19\xe5\x41\x63\xbd\x65\x65\x13\xcd\xbe\xb4\x47\x98\xe1\x46\x3d\xad\x31\x28\x8b\x97\x09\x16\x2c\x20\x8c\x7e\x2e\x67\x93\x6c\x6a\x26\x1f\xda\x4a\xda\xcf\x93\x7e\x49\x4e\xdc\x5d\x29\x87\x41\x18\xff\x10\x65\xea\xcd\x21\xff\x2d\x4c\x62\xe4\x43\xad\x07\xea\x2b\x01\xa7\x85\x89\xd1\x33\xb1\x28\x39\x48\xca\xc2\xe1\x04\x28\x2d\x8f\xa2\x28\x63\xa3\x72\x1a\x71\x40\x4e\x76\x04\xe5\xd2\x05\x01\xfc\xb7\x2a\x58\x09\xa9\xa8\xfc\x83\x2a\x5f\xab\x57\x31\x04\x66\x75\xf8\x37\x4b\x2e\xe1\x01\xb7\x02\x7b\xbf\x1b\x66\xe7\x69\x0d', 2)

# cleanup
del pyarmor_runtime

