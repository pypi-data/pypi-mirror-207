# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class BasePerson1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def ban_status() -> typing.Type['BanStatus']:
                return BanStatus
            chosen_name = schemas.StrSchema
            creation_time = schemas.DateTimeSchema
            dob = schemas.DateSchema
            email = schemas.StrSchema
            first_name = schemas.StrSchema
            has_accounts = schemas.BoolSchema
            id = schemas.UUIDSchema
            is_customer = schemas.BoolSchema
            last_name = schemas.StrSchema
            last_updated_time = schemas.DateTimeSchema
        
            @staticmethod
            def legal_address() -> typing.Type['Address']:
                return Address
            metadata = schemas.DictSchema
            middle_name = schemas.StrSchema
            
            
            class phone_number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\+[1-9]\d{1,14}$',  # noqa: E501
                    }]
        
            @staticmethod
            def shipping_address() -> typing.Type['Address']:
                return Address
            ssn = schemas.StrSchema
        
            @staticmethod
            def ssn_source() -> typing.Type['SsnSource']:
                return SsnSource
        
            @staticmethod
            def status() -> typing.Type['Status2']:
                return Status2
            tenant = schemas.StrSchema
            verification_last_run = schemas.DateTimeSchema
        
            @staticmethod
            def verification_status() -> typing.Type['VerificationStatus']:
                return VerificationStatus
            __annotations__ = {
                "ban_status": ban_status,
                "chosen_name": chosen_name,
                "creation_time": creation_time,
                "dob": dob,
                "email": email,
                "first_name": first_name,
                "has_accounts": has_accounts,
                "id": id,
                "is_customer": is_customer,
                "last_name": last_name,
                "last_updated_time": last_updated_time,
                "legal_address": legal_address,
                "metadata": metadata,
                "middle_name": middle_name,
                "phone_number": phone_number,
                "shipping_address": shipping_address,
                "ssn": ssn,
                "ssn_source": ssn_source,
                "status": status,
                "tenant": tenant,
                "verification_last_run": verification_last_run,
                "verification_status": verification_status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ban_status"]) -> 'BanStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chosen_name"]) -> MetaOapg.properties.chosen_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dob"]) -> MetaOapg.properties.dob: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_accounts"]) -> MetaOapg.properties.has_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_customer"]) -> MetaOapg.properties.is_customer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_updated_time"]) -> MetaOapg.properties.last_updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legal_address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middle_name"]) -> MetaOapg.properties.middle_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> MetaOapg.properties.phone_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn_source"]) -> 'SsnSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenant"]) -> MetaOapg.properties.tenant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_last_run"]) -> MetaOapg.properties.verification_last_run: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification_status"]) -> 'VerificationStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ban_status", "chosen_name", "creation_time", "dob", "email", "first_name", "has_accounts", "id", "is_customer", "last_name", "last_updated_time", "legal_address", "metadata", "middle_name", "phone_number", "shipping_address", "ssn", "ssn_source", "status", "tenant", "verification_last_run", "verification_status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ban_status"]) -> typing.Union['BanStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chosen_name"]) -> typing.Union[MetaOapg.properties.chosen_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_time"]) -> typing.Union[MetaOapg.properties.creation_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dob"]) -> typing.Union[MetaOapg.properties.dob, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_accounts"]) -> typing.Union[MetaOapg.properties.has_accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_customer"]) -> typing.Union[MetaOapg.properties.is_customer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_updated_time"]) -> typing.Union[MetaOapg.properties.last_updated_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legal_address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middle_name"]) -> typing.Union[MetaOapg.properties.middle_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union[MetaOapg.properties.phone_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn_source"]) -> typing.Union['SsnSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['Status2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenant"]) -> typing.Union[MetaOapg.properties.tenant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_last_run"]) -> typing.Union[MetaOapg.properties.verification_last_run, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification_status"]) -> typing.Union['VerificationStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ban_status", "chosen_name", "creation_time", "dob", "email", "first_name", "has_accounts", "id", "is_customer", "last_name", "last_updated_time", "legal_address", "metadata", "middle_name", "phone_number", "shipping_address", "ssn", "ssn_source", "status", "tenant", "verification_last_run", "verification_status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ban_status: typing.Union['BanStatus', schemas.Unset] = schemas.unset,
        chosen_name: typing.Union[MetaOapg.properties.chosen_name, str, schemas.Unset] = schemas.unset,
        creation_time: typing.Union[MetaOapg.properties.creation_time, str, datetime, schemas.Unset] = schemas.unset,
        dob: typing.Union[MetaOapg.properties.dob, str, date, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        has_accounts: typing.Union[MetaOapg.properties.has_accounts, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        is_customer: typing.Union[MetaOapg.properties.is_customer, bool, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        last_updated_time: typing.Union[MetaOapg.properties.last_updated_time, str, datetime, schemas.Unset] = schemas.unset,
        legal_address: typing.Union['Address', schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        middle_name: typing.Union[MetaOapg.properties.middle_name, str, schemas.Unset] = schemas.unset,
        phone_number: typing.Union[MetaOapg.properties.phone_number, str, schemas.Unset] = schemas.unset,
        shipping_address: typing.Union['Address', schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        ssn_source: typing.Union['SsnSource', schemas.Unset] = schemas.unset,
        status: typing.Union['Status2', schemas.Unset] = schemas.unset,
        tenant: typing.Union[MetaOapg.properties.tenant, str, schemas.Unset] = schemas.unset,
        verification_last_run: typing.Union[MetaOapg.properties.verification_last_run, str, datetime, schemas.Unset] = schemas.unset,
        verification_status: typing.Union['VerificationStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BasePerson1':
        return super().__new__(
            cls,
            *_args,
            ban_status=ban_status,
            chosen_name=chosen_name,
            creation_time=creation_time,
            dob=dob,
            email=email,
            first_name=first_name,
            has_accounts=has_accounts,
            id=id,
            is_customer=is_customer,
            last_name=last_name,
            last_updated_time=last_updated_time,
            legal_address=legal_address,
            metadata=metadata,
            middle_name=middle_name,
            phone_number=phone_number,
            shipping_address=shipping_address,
            ssn=ssn,
            ssn_source=ssn_source,
            status=status,
            tenant=tenant,
            verification_last_run=verification_last_run,
            verification_status=verification_status,
            _configuration=_configuration,
            **kwargs,
        )

from synctera_client.model.address import Address
from synctera_client.model.ban_status import BanStatus
from synctera_client.model.ssn_source import SsnSource
from synctera_client.model.status2 import Status2
from synctera_client.model.verification_status import VerificationStatus
