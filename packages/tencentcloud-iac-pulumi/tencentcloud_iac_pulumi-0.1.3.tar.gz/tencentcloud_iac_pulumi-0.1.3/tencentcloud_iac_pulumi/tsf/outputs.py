# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApiGroupBindedGatewayDeployGroup',
    'ApplicationServiceConfigList',
    'ApplicationServiceConfigListHealthCheck',
    'ApplicationServiceConfigListPort',
    'ClusterOperationInfo',
    'ClusterOperationInfoAddInstance',
    'ClusterOperationInfoDestroy',
    'ClusterOperationInfoInit',
    'ContainGroupEnv',
    'ContainGroupEnvValueFrom',
    'ContainGroupEnvValueFromFieldRef',
    'ContainGroupEnvValueFromResourceFieldRef',
    'ContainGroupHealthCheckSetting',
    'ContainGroupHealthCheckSettingLivenessProbe',
    'ContainGroupHealthCheckSettingReadinessProbe',
    'ContainGroupProtocolPort',
    'InstancesAttachmentInstanceAdvancedSettings',
    'LaneLaneGroupList',
    'LaneRuleRuleTagList',
    'TaskAdvanceSettings',
    'TaskShardArgument',
    'TaskTaskRule',
    'UnitRuleUnitRuleItemList',
    'UnitRuleUnitRuleItemListUnitRuleTagList',
    'GetApplicationConfigResultResult',
    'GetApplicationConfigResultContentResult',
    'GetApplicationFileConfigResultResult',
    'GetApplicationFileConfigResultContentResult',
    'GetApplicationPublicConfigResultResult',
    'GetApplicationPublicConfigResultContentResult',
    'GetApplicationResultResult',
    'GetApplicationResultContentResult',
    'GetApplicationResultContentServiceConfigListResult',
    'GetApplicationResultContentServiceConfigListHealthCheckResult',
    'GetApplicationResultContentServiceConfigListPortResult',
    'GetClusterResultResult',
    'GetClusterResultContentResult',
    'GetClusterResultContentOperationInfoResult',
    'GetClusterResultContentOperationInfoAddInstanceResult',
    'GetClusterResultContentOperationInfoDestroyResult',
    'GetClusterResultContentOperationInfoInitResult',
    'GetMicroserviceResultResult',
    'GetMicroserviceResultContentResult',
    'GetUnitRulesResultResult',
    'GetUnitRulesResultContentResult',
    'GetUnitRulesResultContentUnitRuleItemListResult',
    'GetUnitRulesResultContentUnitRuleItemListUnitRuleTagListResult',
]

@pulumi.output_type
class ApiGroupBindedGatewayDeployGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "applicationName":
            suggest = "application_name"
        elif key == "applicationType":
            suggest = "application_type"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "deployGroupId":
            suggest = "deploy_group_id"
        elif key == "deployGroupName":
            suggest = "deploy_group_name"
        elif key == "groupStatus":
            suggest = "group_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGroupBindedGatewayDeployGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGroupBindedGatewayDeployGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGroupBindedGatewayDeployGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[str] = None,
                 application_name: Optional[str] = None,
                 application_type: Optional[str] = None,
                 cluster_type: Optional[str] = None,
                 deploy_group_id: Optional[str] = None,
                 deploy_group_name: Optional[str] = None,
                 group_status: Optional[str] = None):
        """
        :param str application_id: application ID.
        :param str application_name: Application Name.
        :param str application_type: Application classification: V: virtual machine application, C: container application.
        :param str cluster_type: Cluster type, C: container, V: virtual machine.
        :param str deploy_group_id: Gateway deployment group ID.
        :param str deploy_group_name: Gateway deployment group name.
        :param str group_status: Deployment group application status, values: Running, Waiting, Paused, Updating, RollingBack, Abnormal, Unknown.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if deploy_group_id is not None:
            pulumi.set(__self__, "deploy_group_id", deploy_group_id)
        if deploy_group_name is not None:
            pulumi.set(__self__, "deploy_group_name", deploy_group_name)
        if group_status is not None:
            pulumi.set(__self__, "group_status", group_status)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[str]:
        """
        Application Name.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[str]:
        """
        Application classification: V: virtual machine application, C: container application.
        """
        return pulumi.get(self, "application_type")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        """
        Cluster type, C: container, V: virtual machine.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="deployGroupId")
    def deploy_group_id(self) -> Optional[str]:
        """
        Gateway deployment group ID.
        """
        return pulumi.get(self, "deploy_group_id")

    @property
    @pulumi.getter(name="deployGroupName")
    def deploy_group_name(self) -> Optional[str]:
        """
        Gateway deployment group name.
        """
        return pulumi.get(self, "deploy_group_name")

    @property
    @pulumi.getter(name="groupStatus")
    def group_status(self) -> Optional[str]:
        """
        Deployment group application status, values: Running, Waiting, Paused, Updating, RollingBack, Abnormal, Unknown.
        """
        return pulumi.get(self, "group_status")


@pulumi.output_type
class ApplicationServiceConfigList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationServiceConfigList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationServiceConfigList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationServiceConfigList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 ports: Sequence['outputs.ApplicationServiceConfigListPort'],
                 health_check: Optional['outputs.ApplicationServiceConfigListHealthCheck'] = None):
        """
        :param str name: Service name.
        :param Sequence['ApplicationServiceConfigListPortArgs'] ports: List of port information.
        :param 'ApplicationServiceConfigListHealthCheckArgs' health_check: Health check configuration.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.ApplicationServiceConfigListPort']:
        """
        List of port information.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional['outputs.ApplicationServiceConfigListHealthCheck']:
        """
        Health check configuration.
        """
        return pulumi.get(self, "health_check")


@pulumi.output_type
class ApplicationServiceConfigListHealthCheck(dict):
    def __init__(__self__, *,
                 path: Optional[str] = None):
        """
        :param str path: Health check path.
        """
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Health check path.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class ApplicationServiceConfigListPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetPort":
            suggest = "target_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationServiceConfigListPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationServiceConfigListPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationServiceConfigListPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 target_port: int):
        """
        :param str protocol: Port protocol.
        :param int target_port: Service port.
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Port protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> int:
        """
        Service port.
        """
        return pulumi.get(self, "target_port")


@pulumi.output_type
class ClusterOperationInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addInstances":
            suggest = "add_instances"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterOperationInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterOperationInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterOperationInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_instances: Optional[Sequence['outputs.ClusterOperationInfoAddInstance']] = None,
                 destroys: Optional[Sequence['outputs.ClusterOperationInfoDestroy']] = None,
                 inits: Optional[Sequence['outputs.ClusterOperationInfoInit']] = None):
        """
        :param Sequence['ClusterOperationInfoAddInstanceArgs'] add_instances: Add the control information of the instance button.
        :param Sequence['ClusterOperationInfoDestroyArgs'] destroys: Destroy the control information of the machine.
        :param Sequence['ClusterOperationInfoInitArgs'] inits: Initialize the control information of the button.
        """
        if add_instances is not None:
            pulumi.set(__self__, "add_instances", add_instances)
        if destroys is not None:
            pulumi.set(__self__, "destroys", destroys)
        if inits is not None:
            pulumi.set(__self__, "inits", inits)

    @property
    @pulumi.getter(name="addInstances")
    def add_instances(self) -> Optional[Sequence['outputs.ClusterOperationInfoAddInstance']]:
        """
        Add the control information of the instance button.
        """
        return pulumi.get(self, "add_instances")

    @property
    @pulumi.getter
    def destroys(self) -> Optional[Sequence['outputs.ClusterOperationInfoDestroy']]:
        """
        Destroy the control information of the machine.
        """
        return pulumi.get(self, "destroys")

    @property
    @pulumi.getter
    def inits(self) -> Optional[Sequence['outputs.ClusterOperationInfoInit']]:
        """
        Initialize the control information of the button.
        """
        return pulumi.get(self, "inits")


@pulumi.output_type
class ClusterOperationInfoAddInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disabledReason":
            suggest = "disabled_reason"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterOperationInfoAddInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterOperationInfoAddInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterOperationInfoAddInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled_reason: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 supported: Optional[bool] = None):
        """
        :param str disabled_reason: Reason for not showing.
        :param bool enabled: Is the button clickable.
        :param bool supported: whether to show the button.
        """
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[str]:
        """
        Reason for not showing.
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the button clickable.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def supported(self) -> Optional[bool]:
        """
        whether to show the button.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class ClusterOperationInfoDestroy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disabledReason":
            suggest = "disabled_reason"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterOperationInfoDestroy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterOperationInfoDestroy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterOperationInfoDestroy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled_reason: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 supported: Optional[bool] = None):
        """
        :param str disabled_reason: Reason for not showing.
        :param bool enabled: Is the button clickable.
        :param bool supported: whether to show the button.
        """
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[str]:
        """
        Reason for not showing.
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the button clickable.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def supported(self) -> Optional[bool]:
        """
        whether to show the button.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class ClusterOperationInfoInit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disabledReason":
            suggest = "disabled_reason"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterOperationInfoInit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterOperationInfoInit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterOperationInfoInit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled_reason: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 supported: Optional[bool] = None):
        """
        :param str disabled_reason: Reason for not showing.
        :param bool enabled: Is the button clickable.
        :param bool supported: whether to show the button.
        """
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[str]:
        """
        Reason for not showing.
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Is the button clickable.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def supported(self) -> Optional[bool]:
        """
        whether to show the button.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class ContainGroupEnv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueFroms":
            suggest = "value_froms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainGroupEnv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainGroupEnv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainGroupEnv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None,
                 value_froms: Optional[Sequence['outputs.ContainGroupEnvValueFrom']] = None):
        """
        :param str name: environment variable name.
        :param str value: environment variable value.
        :param Sequence['ContainGroupEnvValueFromArgs'] value_froms: k8s ValueFrom.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_froms is not None:
            pulumi.set(__self__, "value_froms", value_froms)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        environment variable name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        environment variable value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueFroms")
    def value_froms(self) -> Optional[Sequence['outputs.ContainGroupEnvValueFrom']]:
        """
        k8s ValueFrom.
        """
        return pulumi.get(self, "value_froms")


@pulumi.output_type
class ContainGroupEnvValueFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldReves":
            suggest = "field_reves"
        elif key == "resourceFieldReves":
            suggest = "resource_field_reves"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainGroupEnvValueFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainGroupEnvValueFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainGroupEnvValueFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_reves: Optional[Sequence['outputs.ContainGroupEnvValueFromFieldRef']] = None,
                 resource_field_reves: Optional[Sequence['outputs.ContainGroupEnvValueFromResourceFieldRef']] = None):
        """
        :param Sequence['ContainGroupEnvValueFromFieldRefArgs'] field_reves: FieldRef for k8s env.
        :param Sequence['ContainGroupEnvValueFromResourceFieldRefArgs'] resource_field_reves: ResourceFieldRef of k8s env.
        """
        if field_reves is not None:
            pulumi.set(__self__, "field_reves", field_reves)
        if resource_field_reves is not None:
            pulumi.set(__self__, "resource_field_reves", resource_field_reves)

    @property
    @pulumi.getter(name="fieldReves")
    def field_reves(self) -> Optional[Sequence['outputs.ContainGroupEnvValueFromFieldRef']]:
        """
        FieldRef for k8s env.
        """
        return pulumi.get(self, "field_reves")

    @property
    @pulumi.getter(name="resourceFieldReves")
    def resource_field_reves(self) -> Optional[Sequence['outputs.ContainGroupEnvValueFromResourceFieldRef']]:
        """
        ResourceFieldRef of k8s env.
        """
        return pulumi.get(self, "resource_field_reves")


@pulumi.output_type
class ContainGroupEnvValueFromFieldRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldPath":
            suggest = "field_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainGroupEnvValueFromFieldRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainGroupEnvValueFromFieldRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainGroupEnvValueFromFieldRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_path: Optional[str] = None):
        """
        :param str field_path: FieldPath of k8s.
        """
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[str]:
        """
        FieldPath of k8s.
        """
        return pulumi.get(self, "field_path")


@pulumi.output_type
class ContainGroupEnvValueFromResourceFieldRef(dict):
    def __init__(__self__, *,
                 resource: Optional[str] = None):
        """
        :param str resource: Resource of k8s.
        """
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        Resource of k8s.
        """
        return pulumi.get(self, "resource")


@pulumi.output_type
class ContainGroupHealthCheckSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "livenessProbes":
            suggest = "liveness_probes"
        elif key == "readinessProbes":
            suggest = "readiness_probes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainGroupHealthCheckSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainGroupHealthCheckSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainGroupHealthCheckSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 liveness_probes: Optional[Sequence['outputs.ContainGroupHealthCheckSettingLivenessProbe']] = None,
                 readiness_probes: Optional[Sequence['outputs.ContainGroupHealthCheckSettingReadinessProbe']] = None):
        """
        :param Sequence['ContainGroupHealthCheckSettingLivenessProbeArgs'] liveness_probes: live health check.
        :param Sequence['ContainGroupHealthCheckSettingReadinessProbeArgs'] readiness_probes: readiness health check.
        """
        if liveness_probes is not None:
            pulumi.set(__self__, "liveness_probes", liveness_probes)
        if readiness_probes is not None:
            pulumi.set(__self__, "readiness_probes", readiness_probes)

    @property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Optional[Sequence['outputs.ContainGroupHealthCheckSettingLivenessProbe']]:
        """
        live health check.
        """
        return pulumi.get(self, "liveness_probes")

    @property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Optional[Sequence['outputs.ContainGroupHealthCheckSettingReadinessProbe']]:
        """
        readiness health check.
        """
        return pulumi.get(self, "readiness_probes")


@pulumi.output_type
class ContainGroupHealthCheckSettingLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainGroupHealthCheckSettingLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainGroupHealthCheckSettingLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainGroupHealthCheckSettingLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 commands: Optional[Sequence[str]] = None,
                 failure_threshold: Optional[int] = None,
                 initial_delay_seconds: Optional[int] = None,
                 path: Optional[str] = None,
                 period_seconds: Optional[int] = None,
                 port: Optional[int] = None,
                 scheme: Optional[str] = None,
                 success_threshold: Optional[int] = None,
                 timeout_seconds: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str action_type: health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
        :param Sequence[str] commands: Execute command check mode, the command to execute.
        :param int failure_threshold: Indicates the number of consecutive health check successes for the backend container from success to failure.
        :param int initial_delay_seconds: The time for the container to delay starting the health check.
        :param str path: The request path of the HTTP health check interface.
        :param int period_seconds: The interval at which health checks are performed.
        :param int port: service port.
        :param str scheme: The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
        :param int success_threshold: Indicates the number of consecutive health check successes for the backend container from failure to success.
        :param int timeout_seconds: The maximum timeout for each health check response.
        :param str type: TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
        """
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        """
        health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        """
        Execute command check mode, the command to execute.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Indicates the number of consecutive health check successes for the backend container from success to failure.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        The time for the container to delay starting the health check.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The request path of the HTTP health check interface.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        The interval at which health checks are performed.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        service port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
        """
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Indicates the number of consecutive health check successes for the backend container from failure to success.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        The maximum timeout for each health check response.
        """
        return pulumi.get(self, "timeout_seconds")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ContainGroupHealthCheckSettingReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionType":
            suggest = "action_type"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainGroupHealthCheckSettingReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainGroupHealthCheckSettingReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainGroupHealthCheckSettingReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_type: Optional[str] = None,
                 commands: Optional[Sequence[str]] = None,
                 failure_threshold: Optional[int] = None,
                 initial_delay_seconds: Optional[int] = None,
                 path: Optional[str] = None,
                 period_seconds: Optional[int] = None,
                 port: Optional[int] = None,
                 scheme: Optional[str] = None,
                 success_threshold: Optional[int] = None,
                 timeout_seconds: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str action_type: health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
        :param Sequence[str] commands: Execute command check mode, the command to execute.
        :param int failure_threshold: Indicates the number of consecutive health check successes for the backend container from success to failure.
        :param int initial_delay_seconds: The time for the container to delay starting the health check.
        :param str path: The request path of the HTTP health check interface.
        :param int period_seconds: The interval at which health checks are performed.
        :param int port: service port.
        :param str scheme: The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
        :param int success_threshold: Indicates the number of consecutive health check successes for the backend container from failure to success.
        :param int timeout_seconds: The maximum timeout for each health check response.
        :param str type: TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
        """
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[str]:
        """
        health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        """
        Execute command check mode, the command to execute.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Indicates the number of consecutive health check successes for the backend container from success to failure.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        """
        The time for the container to delay starting the health check.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        The request path of the HTTP health check interface.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        The interval at which health checks are performed.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        service port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
        """
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Indicates the number of consecutive health check successes for the backend container from failure to success.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        The maximum timeout for each health check response.
        """
        return pulumi.get(self, "timeout_seconds")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ContainGroupProtocolPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetPort":
            suggest = "target_port"
        elif key == "nodePort":
            suggest = "node_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainGroupProtocolPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainGroupProtocolPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainGroupProtocolPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 protocol: str,
                 target_port: int,
                 node_port: Optional[int] = None):
        """
        :param int port: service port.
        :param str protocol: TCP UDP.
        :param int target_port: container port.
        :param int node_port: host port.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        service port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        TCP UDP.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> int:
        """
        container port.
        """
        return pulumi.get(self, "target_port")

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[int]:
        """
        host port.
        """
        return pulumi.get(self, "node_port")


@pulumi.output_type
class InstancesAttachmentInstanceAdvancedSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerGraphPath":
            suggest = "docker_graph_path"
        elif key == "mountTarget":
            suggest = "mount_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancesAttachmentInstanceAdvancedSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancesAttachmentInstanceAdvancedSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancesAttachmentInstanceAdvancedSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 docker_graph_path: str,
                 mount_target: str):
        """
        :param str docker_graph_path: Dockerd --graph specifies the value, default is /var/lib/docker Note: This field may return null, indicating that no valid values can be obtained.
        :param str mount_target: Data disk mount point, data disks are not mounted by default. Data disks with formatted ext3, ext4, xfs file systems will be mounted directly, other file systems or unformatted data disks will be automatically formatted as ext4 and mounted. Please back up your data! This setting does not take effect for cloud servers with no data disks or multiple data disks. Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> str:
        """
        Dockerd --graph specifies the value, default is /var/lib/docker Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "docker_graph_path")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> str:
        """
        Data disk mount point, data disks are not mounted by default. Data disks with formatted ext3, ext4, xfs file systems will be mounted directly, other file systems or unformatted data disks will be automatically formatted as ext4 and mounted. Please back up your data! This setting does not take effect for cloud servers with no data disks or multiple data disks. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "mount_target")


@pulumi.output_type
class LaneLaneGroupList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "applicationId":
            suggest = "application_id"
        elif key == "applicationName":
            suggest = "application_name"
        elif key == "clusterType":
            suggest = "cluster_type"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "groupName":
            suggest = "group_name"
        elif key == "laneGroupId":
            suggest = "lane_group_id"
        elif key == "laneId":
            suggest = "lane_id"
        elif key == "namespaceId":
            suggest = "namespace_id"
        elif key == "namespaceName":
            suggest = "namespace_name"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaneLaneGroupList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaneLaneGroupList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaneLaneGroupList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entrance: bool,
                 group_id: str,
                 application_id: Optional[str] = None,
                 application_name: Optional[str] = None,
                 cluster_type: Optional[str] = None,
                 create_time: Optional[int] = None,
                 group_name: Optional[str] = None,
                 lane_group_id: Optional[str] = None,
                 lane_id: Optional[str] = None,
                 namespace_id: Optional[str] = None,
                 namespace_name: Optional[str] = None,
                 update_time: Optional[int] = None):
        """
        :param bool entrance: Whether to enter the application.
        :param str group_id: Deployment group ID.
        :param str application_id: application ID.
        :param str application_name: application name.
        :param str cluster_type: cluster type.
        :param int create_time: creation time.
        :param str group_name: deployment group name.
        :param str lane_group_id: Swimlane deployment group ID.
        :param str lane_id: Lane ID.
        :param str namespace_id: Namespace ID.
        :param str namespace_name: namespace name.
        :param int update_time: update time.
        """
        pulumi.set(__self__, "entrance", entrance)
        pulumi.set(__self__, "group_id", group_id)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if lane_group_id is not None:
            pulumi.set(__self__, "lane_group_id", lane_group_id)
        if lane_id is not None:
            pulumi.set(__self__, "lane_id", lane_id)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def entrance(self) -> bool:
        """
        Whether to enter the application.
        """
        return pulumi.get(self, "entrance")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        Deployment group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[str]:
        """
        application name.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[str]:
        """
        cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[int]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        deployment group name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="laneGroupId")
    def lane_group_id(self) -> Optional[str]:
        """
        Swimlane deployment group ID.
        """
        return pulumi.get(self, "lane_group_id")

    @property
    @pulumi.getter(name="laneId")
    def lane_id(self) -> Optional[str]:
        """
        Lane ID.
        """
        return pulumi.get(self, "lane_id")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        """
        Namespace ID.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[str]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[int]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class LaneRuleRuleTagList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagName":
            suggest = "tag_name"
        elif key == "tagOperator":
            suggest = "tag_operator"
        elif key == "tagValue":
            suggest = "tag_value"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "laneRuleId":
            suggest = "lane_rule_id"
        elif key == "tagId":
            suggest = "tag_id"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaneRuleRuleTagList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaneRuleRuleTagList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaneRuleRuleTagList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_name: str,
                 tag_operator: str,
                 tag_value: str,
                 create_time: Optional[int] = None,
                 lane_rule_id: Optional[str] = None,
                 tag_id: Optional[str] = None,
                 update_time: Optional[int] = None):
        """
        :param str tag_name: label name.
        :param str tag_operator: label operator.
        :param str tag_value: tag value.
        :param int create_time: creation time.
        :param str lane_rule_id: lane rule ID.
        :param str tag_id: label ID.
        :param int update_time: update time.
        """
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "tag_operator", tag_operator)
        pulumi.set(__self__, "tag_value", tag_value)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if lane_rule_id is not None:
            pulumi.set(__self__, "lane_rule_id", lane_rule_id)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> str:
        """
        label name.
        """
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter(name="tagOperator")
    def tag_operator(self) -> str:
        """
        label operator.
        """
        return pulumi.get(self, "tag_operator")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[int]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="laneRuleId")
    def lane_rule_id(self) -> Optional[str]:
        """
        lane rule ID.
        """
        return pulumi.get(self, "lane_rule_id")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[str]:
        """
        label ID.
        """
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[int]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class TaskAdvanceSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subTaskConcurrency":
            suggest = "sub_task_concurrency"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskAdvanceSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskAdvanceSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskAdvanceSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sub_task_concurrency: Optional[int] = None):
        """
        :param int sub_task_concurrency: Subtask single-machine concurrency limit, the default value is 2.
        """
        if sub_task_concurrency is not None:
            pulumi.set(__self__, "sub_task_concurrency", sub_task_concurrency)

    @property
    @pulumi.getter(name="subTaskConcurrency")
    def sub_task_concurrency(self) -> Optional[int]:
        """
        Subtask single-machine concurrency limit, the default value is 2.
        """
        return pulumi.get(self, "sub_task_concurrency")


@pulumi.output_type
class TaskShardArgument(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shardKey":
            suggest = "shard_key"
        elif key == "shardValue":
            suggest = "shard_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskShardArgument. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskShardArgument.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskShardArgument.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shard_key: int,
                 shard_value: str):
        """
        :param int shard_key: Sharding parameter KEY, integer, range [1,1000].
        :param str shard_value: Shard parameter VALUE.
        """
        pulumi.set(__self__, "shard_key", shard_key)
        pulumi.set(__self__, "shard_value", shard_value)

    @property
    @pulumi.getter(name="shardKey")
    def shard_key(self) -> int:
        """
        Sharding parameter KEY, integer, range [1,1000].
        """
        return pulumi.get(self, "shard_key")

    @property
    @pulumi.getter(name="shardValue")
    def shard_value(self) -> str:
        """
        Shard parameter VALUE.
        """
        return pulumi.get(self, "shard_value")


@pulumi.output_type
class TaskTaskRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleType":
            suggest = "rule_type"
        elif key == "repeatInterval":
            suggest = "repeat_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskTaskRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskTaskRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskTaskRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_type: str,
                 expression: Optional[str] = None,
                 repeat_interval: Optional[int] = None):
        """
        :param str rule_type: trigger rule type, Cron/Repeat.
        :param str expression: Cron type rule, cron expression.
        :param int repeat_interval: time interval, in milliseconds.
        """
        pulumi.set(__self__, "rule_type", rule_type)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        trigger rule type, Cron/Repeat.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        Cron type rule, cron expression.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[int]:
        """
        time interval, in milliseconds.
        """
        return pulumi.get(self, "repeat_interval")


@pulumi.output_type
class UnitRuleUnitRuleItemList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destNamespaceId":
            suggest = "dest_namespace_id"
        elif key == "destNamespaceName":
            suggest = "dest_namespace_name"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "unitRuleId":
            suggest = "unit_rule_id"
        elif key == "unitRuleTagLists":
            suggest = "unit_rule_tag_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UnitRuleUnitRuleItemList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UnitRuleUnitRuleItemList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UnitRuleUnitRuleItemList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_namespace_id: str,
                 dest_namespace_name: str,
                 name: str,
                 relationship: str,
                 description: Optional[str] = None,
                 priority: Optional[int] = None,
                 rule_id: Optional[str] = None,
                 unit_rule_id: Optional[str] = None,
                 unit_rule_tag_lists: Optional[Sequence['outputs.UnitRuleUnitRuleItemListUnitRuleTagList']] = None):
        """
        :param str dest_namespace_id: destination namespace ID.
        :param str dest_namespace_name: destination namespace name.
        :param str name: rule item name.
        :param str relationship: logical relationship: AND/OR.
        :param str description: rule description.
        :param int priority: rule order, the smaller the higher the priority: the default is 0.
        :param str rule_id: rule item ID.
        :param str unit_rule_id: Unitization rule ID.
        :param Sequence['UnitRuleUnitRuleItemListUnitRuleTagListArgs'] unit_rule_tag_lists: list of rule labels.
        """
        pulumi.set(__self__, "dest_namespace_id", dest_namespace_id)
        pulumi.set(__self__, "dest_namespace_name", dest_namespace_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "relationship", relationship)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if unit_rule_id is not None:
            pulumi.set(__self__, "unit_rule_id", unit_rule_id)
        if unit_rule_tag_lists is not None:
            pulumi.set(__self__, "unit_rule_tag_lists", unit_rule_tag_lists)

    @property
    @pulumi.getter(name="destNamespaceId")
    def dest_namespace_id(self) -> str:
        """
        destination namespace ID.
        """
        return pulumi.get(self, "dest_namespace_id")

    @property
    @pulumi.getter(name="destNamespaceName")
    def dest_namespace_name(self) -> str:
        """
        destination namespace name.
        """
        return pulumi.get(self, "dest_namespace_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        rule item name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def relationship(self) -> str:
        """
        logical relationship: AND/OR.
        """
        return pulumi.get(self, "relationship")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        rule order, the smaller the higher the priority: the default is 0.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        """
        rule item ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="unitRuleId")
    def unit_rule_id(self) -> Optional[str]:
        """
        Unitization rule ID.
        """
        return pulumi.get(self, "unit_rule_id")

    @property
    @pulumi.getter(name="unitRuleTagLists")
    def unit_rule_tag_lists(self) -> Optional[Sequence['outputs.UnitRuleUnitRuleItemListUnitRuleTagList']]:
        """
        list of rule labels.
        """
        return pulumi.get(self, "unit_rule_tag_lists")


@pulumi.output_type
class UnitRuleUnitRuleItemListUnitRuleTagList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagField":
            suggest = "tag_field"
        elif key == "tagOperator":
            suggest = "tag_operator"
        elif key == "tagType":
            suggest = "tag_type"
        elif key == "tagValue":
            suggest = "tag_value"
        elif key == "ruleId":
            suggest = "rule_id"
        elif key == "unitRuleItemId":
            suggest = "unit_rule_item_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UnitRuleUnitRuleItemListUnitRuleTagList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UnitRuleUnitRuleItemListUnitRuleTagList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UnitRuleUnitRuleItemListUnitRuleTagList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_field: str,
                 tag_operator: str,
                 tag_type: str,
                 tag_value: str,
                 rule_id: Optional[str] = None,
                 unit_rule_item_id: Optional[str] = None):
        """
        :param str tag_field: label name.
        :param str tag_operator: Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
        :param str tag_type: Tag Type: U(User Tag).
        :param str tag_value: tag value.
        :param str rule_id: rule ID.
        :param str unit_rule_item_id: Unitization rule item ID.
        """
        pulumi.set(__self__, "tag_field", tag_field)
        pulumi.set(__self__, "tag_operator", tag_operator)
        pulumi.set(__self__, "tag_type", tag_type)
        pulumi.set(__self__, "tag_value", tag_value)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if unit_rule_item_id is not None:
            pulumi.set(__self__, "unit_rule_item_id", unit_rule_item_id)

    @property
    @pulumi.getter(name="tagField")
    def tag_field(self) -> str:
        """
        label name.
        """
        return pulumi.get(self, "tag_field")

    @property
    @pulumi.getter(name="tagOperator")
    def tag_operator(self) -> str:
        """
        Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
        """
        return pulumi.get(self, "tag_operator")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> str:
        """
        Tag Type: U(User Tag).
        """
        return pulumi.get(self, "tag_type")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        """
        rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="unitRuleItemId")
    def unit_rule_item_id(self) -> Optional[str]:
        """
        Unitization rule item ID.
        """
        return pulumi.get(self, "unit_rule_item_id")


@pulumi.output_type
class GetApplicationConfigResultResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetApplicationConfigResultContentResult'],
                 total_count: int):
        """
        :param Sequence['GetApplicationConfigResultContentArgs'] contents: Configuration item list.
        :param int total_count: TsfPageConfig.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetApplicationConfigResultContentResult']:
        """
        Configuration item list.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        TsfPageConfig.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetApplicationConfigResultContentResult(dict):
    def __init__(__self__, *,
                 application_id: str,
                 application_name: str,
                 config_id: str,
                 config_name: str,
                 config_type: str,
                 config_value: str,
                 config_version: str,
                 config_version_count: int,
                 config_version_desc: str,
                 creation_time: str,
                 delete_flag: bool,
                 last_update_time: str):
        """
        :param str application_id: Application ID, query all when not provided.
        :param str application_name: application Id. Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_id: Configuration ID, query all with higher priority when not provided.
        :param str config_name: Configuration name, precise query, query all when not provided.
        :param str config_type: Configuration type. Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_value: Configuration value. Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_version: Configuration version, precise query, query all when not provided.
        :param int config_version_count: config version count.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_version_desc: Configuration version description. Note: This field may return null, indicating that no valid values can be obtained.
        :param str creation_time: CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool delete_flag: delete flag, true: allow delete; false: delete prohibit.
        :param str last_update_time: last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "config_type", config_type)
        pulumi.set(__self__, "config_value", config_value)
        pulumi.set(__self__, "config_version", config_version)
        pulumi.set(__self__, "config_version_count", config_version_count)
        pulumi.set(__self__, "config_version_desc", config_version_desc)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "delete_flag", delete_flag)
        pulumi.set(__self__, "last_update_time", last_update_time)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        Application ID, query all when not provided.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> str:
        """
        application Id. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> str:
        """
        Configuration ID, query all with higher priority when not provided.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> str:
        """
        Configuration name, precise query, query all when not provided.
        """
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> str:
        """
        Configuration type. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> str:
        """
        Configuration value. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_value")

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> str:
        """
        Configuration version, precise query, query all when not provided.
        """
        return pulumi.get(self, "config_version")

    @property
    @pulumi.getter(name="configVersionCount")
    def config_version_count(self) -> int:
        """
        config version count.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_version_count")

    @property
    @pulumi.getter(name="configVersionDesc")
    def config_version_desc(self) -> str:
        """
        Configuration version description. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_version_desc")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="deleteFlag")
    def delete_flag(self) -> bool:
        """
        delete flag, true: allow delete; false: delete prohibit.
        """
        return pulumi.get(self, "delete_flag")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "last_update_time")


@pulumi.output_type
class GetApplicationFileConfigResultResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetApplicationFileConfigResultContentResult'],
                 total_count: int):
        """
        :param Sequence['GetApplicationFileConfigResultContentArgs'] contents: File configuration array. Note: This field may return null, indicating that no valid values can be obtained.
        :param int total_count: total count.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetApplicationFileConfigResultContentResult']:
        """
        File configuration array. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        total count.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetApplicationFileConfigResultContentResult(dict):
    def __init__(__self__, *,
                 application_id: str,
                 application_name: str,
                 config_file_code: str,
                 config_file_name: str,
                 config_file_path: str,
                 config_file_value: str,
                 config_file_value_length: int,
                 config_id: str,
                 config_name: str,
                 config_post_cmd: str,
                 config_version: str,
                 config_version_count: int,
                 config_version_desc: str,
                 creation_time: str,
                 delete_flag: bool,
                 last_update_time: str):
        """
        :param str application_id: Application ID.
        :param str application_name: application name. Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_file_code: Configuration file code. Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_file_name: Configuration item file name. Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_file_path: file config path. Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_file_value: Configuration file content. Note: This field may return null, indicating that no valid values can be obtained.
        :param int config_file_value_length: config item content length.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_id: Configuration ID.
        :param str config_name: Configuration item name.
        :param str config_post_cmd: last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_version: Configuration item version.
        :param int config_version_count: config version count.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_version_desc: Configuration item version description. Note: This field may return null, indicating that no valid values can be obtained.
        :param str creation_time: CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool delete_flag: delete flag, true: allow delete; false: delete prohibit.
        :param str last_update_time: last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "config_file_code", config_file_code)
        pulumi.set(__self__, "config_file_name", config_file_name)
        pulumi.set(__self__, "config_file_path", config_file_path)
        pulumi.set(__self__, "config_file_value", config_file_value)
        pulumi.set(__self__, "config_file_value_length", config_file_value_length)
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "config_post_cmd", config_post_cmd)
        pulumi.set(__self__, "config_version", config_version)
        pulumi.set(__self__, "config_version_count", config_version_count)
        pulumi.set(__self__, "config_version_desc", config_version_desc)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "delete_flag", delete_flag)
        pulumi.set(__self__, "last_update_time", last_update_time)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        Application ID.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> str:
        """
        application name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="configFileCode")
    def config_file_code(self) -> str:
        """
        Configuration file code. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_file_code")

    @property
    @pulumi.getter(name="configFileName")
    def config_file_name(self) -> str:
        """
        Configuration item file name. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_file_name")

    @property
    @pulumi.getter(name="configFilePath")
    def config_file_path(self) -> str:
        """
        file config path. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_file_path")

    @property
    @pulumi.getter(name="configFileValue")
    def config_file_value(self) -> str:
        """
        Configuration file content. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_file_value")

    @property
    @pulumi.getter(name="configFileValueLength")
    def config_file_value_length(self) -> int:
        """
        config item content length.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_file_value_length")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> str:
        """
        Configuration ID.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> str:
        """
        Configuration item name.
        """
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="configPostCmd")
    def config_post_cmd(self) -> str:
        """
        last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_post_cmd")

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> str:
        """
        Configuration item version.
        """
        return pulumi.get(self, "config_version")

    @property
    @pulumi.getter(name="configVersionCount")
    def config_version_count(self) -> int:
        """
        config version count.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_version_count")

    @property
    @pulumi.getter(name="configVersionDesc")
    def config_version_desc(self) -> str:
        """
        Configuration item version description. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_version_desc")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="deleteFlag")
    def delete_flag(self) -> bool:
        """
        delete flag, true: allow delete; false: delete prohibit.
        """
        return pulumi.get(self, "delete_flag")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "last_update_time")


@pulumi.output_type
class GetApplicationPublicConfigResultResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetApplicationPublicConfigResultContentResult'],
                 total_count: int):
        """
        :param Sequence['GetApplicationPublicConfigResultContentArgs'] contents: Config list.
        :param int total_count: TsfPageConfig.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetApplicationPublicConfigResultContentResult']:
        """
        Config list.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        TsfPageConfig.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetApplicationPublicConfigResultContentResult(dict):
    def __init__(__self__, *,
                 application_id: str,
                 application_name: str,
                 config_id: str,
                 config_name: str,
                 config_type: str,
                 config_value: str,
                 config_version: str,
                 config_version_count: int,
                 config_version_desc: str,
                 creation_time: str,
                 delete_flag: bool,
                 last_update_time: str):
        """
        :param str application_id: application Id. Note: This field may return null, indicating that no valid values can be obtained.
        :param str application_name: application Id. Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_id: Config ID. Query all items if not passed, high priority.
        :param str config_name: Config name. Exact query. Query all items if not passed.
        :param str config_type: Config type. Note: This field may return null, indicating that no valid value can be obtained.
        :param str config_value: Config value. Note: This field may return null, indicating that no valid value can be obtained.
        :param str config_version: Config version. Exact query. Query all items if not passed.
        :param int config_version_count: config version count.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str config_version_desc: Config version description. Note: This field may return null, indicating that no valid value can be obtained.
        :param str creation_time: CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool delete_flag: delete flag, true: allow delete; false: delete prohibit.
        :param str last_update_time: last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "config_name", config_name)
        pulumi.set(__self__, "config_type", config_type)
        pulumi.set(__self__, "config_value", config_value)
        pulumi.set(__self__, "config_version", config_version)
        pulumi.set(__self__, "config_version_count", config_version_count)
        pulumi.set(__self__, "config_version_desc", config_version_desc)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "delete_flag", delete_flag)
        pulumi.set(__self__, "last_update_time", last_update_time)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        application Id. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> str:
        """
        application Id. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> str:
        """
        Config ID. Query all items if not passed, high priority.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> str:
        """
        Config name. Exact query. Query all items if not passed.
        """
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="configType")
    def config_type(self) -> str:
        """
        Config type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "config_type")

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> str:
        """
        Config value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "config_value")

    @property
    @pulumi.getter(name="configVersion")
    def config_version(self) -> str:
        """
        Config version. Exact query. Query all items if not passed.
        """
        return pulumi.get(self, "config_version")

    @property
    @pulumi.getter(name="configVersionCount")
    def config_version_count(self) -> int:
        """
        config version count.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "config_version_count")

    @property
    @pulumi.getter(name="configVersionDesc")
    def config_version_desc(self) -> str:
        """
        Config version description. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "config_version_desc")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="deleteFlag")
    def delete_flag(self) -> bool:
        """
        delete flag, true: allow delete; false: delete prohibit.
        """
        return pulumi.get(self, "delete_flag")

    @property
    @pulumi.getter(name="lastUpdateTime")
    def last_update_time(self) -> str:
        """
        last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "last_update_time")


@pulumi.output_type
class GetApplicationResultResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetApplicationResultContentResult'],
                 total_count: int):
        """
        :param Sequence['GetApplicationResultContentArgs'] contents: The list of application information.
        :param int total_count: The total number of applications.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetApplicationResultContentResult']:
        """
        The list of application information.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total number of applications.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetApplicationResultContentResult(dict):
    def __init__(__self__, *,
                 apigateway_service_id: str,
                 application_desc: str,
                 application_id: str,
                 application_name: str,
                 application_remark_name: str,
                 application_resource_type: str,
                 application_runtime_type: str,
                 application_type: str,
                 create_time: str,
                 ignore_create_image_repository: bool,
                 microservice_type: str,
                 prog_lang: str,
                 service_config_lists: Sequence['outputs.GetApplicationResultContentServiceConfigListResult'],
                 update_time: str):
        """
        :param str apigateway_service_id: gateway service id.
        :param str application_desc: The description of the application.
        :param str application_id: The ID of the application.
        :param str application_name: The name of the application.
        :param str application_remark_name: remark name.
        :param str application_resource_type: application resource type.
        :param str application_runtime_type: application runtime type.
        :param str application_type: The application type. V OR C, V means VM, C means container.
        :param str create_time: create time.
        :param bool ignore_create_image_repository: whether ignore create image repository.
        :param str microservice_type: The microservice type of the application.
        :param str prog_lang: Programming language.
        :param Sequence['GetApplicationResultContentServiceConfigListArgs'] service_config_lists: service config list.
        :param str update_time: update time.
        """
        pulumi.set(__self__, "apigateway_service_id", apigateway_service_id)
        pulumi.set(__self__, "application_desc", application_desc)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "application_remark_name", application_remark_name)
        pulumi.set(__self__, "application_resource_type", application_resource_type)
        pulumi.set(__self__, "application_runtime_type", application_runtime_type)
        pulumi.set(__self__, "application_type", application_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "ignore_create_image_repository", ignore_create_image_repository)
        pulumi.set(__self__, "microservice_type", microservice_type)
        pulumi.set(__self__, "prog_lang", prog_lang)
        pulumi.set(__self__, "service_config_lists", service_config_lists)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="apigatewayServiceId")
    def apigateway_service_id(self) -> str:
        """
        gateway service id.
        """
        return pulumi.get(self, "apigateway_service_id")

    @property
    @pulumi.getter(name="applicationDesc")
    def application_desc(self) -> str:
        """
        The description of the application.
        """
        return pulumi.get(self, "application_desc")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> str:
        """
        The name of the application.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="applicationRemarkName")
    def application_remark_name(self) -> str:
        """
        remark name.
        """
        return pulumi.get(self, "application_remark_name")

    @property
    @pulumi.getter(name="applicationResourceType")
    def application_resource_type(self) -> str:
        """
        application resource type.
        """
        return pulumi.get(self, "application_resource_type")

    @property
    @pulumi.getter(name="applicationRuntimeType")
    def application_runtime_type(self) -> str:
        """
        application runtime type.
        """
        return pulumi.get(self, "application_runtime_type")

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> str:
        """
        The application type. V OR C, V means VM, C means container.
        """
        return pulumi.get(self, "application_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="ignoreCreateImageRepository")
    def ignore_create_image_repository(self) -> bool:
        """
        whether ignore create image repository.
        """
        return pulumi.get(self, "ignore_create_image_repository")

    @property
    @pulumi.getter(name="microserviceType")
    def microservice_type(self) -> str:
        """
        The microservice type of the application.
        """
        return pulumi.get(self, "microservice_type")

    @property
    @pulumi.getter(name="progLang")
    def prog_lang(self) -> str:
        """
        Programming language.
        """
        return pulumi.get(self, "prog_lang")

    @property
    @pulumi.getter(name="serviceConfigLists")
    def service_config_lists(self) -> Sequence['outputs.GetApplicationResultContentServiceConfigListResult']:
        """
        service config list.
        """
        return pulumi.get(self, "service_config_lists")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetApplicationResultContentServiceConfigListResult(dict):
    def __init__(__self__, *,
                 health_checks: Sequence['outputs.GetApplicationResultContentServiceConfigListHealthCheckResult'],
                 name: str,
                 ports: Sequence['outputs.GetApplicationResultContentServiceConfigListPortResult']):
        """
        :param Sequence['GetApplicationResultContentServiceConfigListHealthCheckArgs'] health_checks: health check setting.
        :param str name: serviceName.
        :param Sequence['GetApplicationResultContentServiceConfigListPortArgs'] ports: port list.
        """
        pulumi.set(__self__, "health_checks", health_checks)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetApplicationResultContentServiceConfigListHealthCheckResult']:
        """
        health check setting.
        """
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        serviceName.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ports(self) -> Sequence['outputs.GetApplicationResultContentServiceConfigListPortResult']:
        """
        port list.
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetApplicationResultContentServiceConfigListHealthCheckResult(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: health check path.
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        health check path.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetApplicationResultContentServiceConfigListPortResult(dict):
    def __init__(__self__, *,
                 protocol: str,
                 target_port: int):
        """
        :param str protocol: protocol.
        :param int target_port: service port.
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> int:
        """
        service port.
        """
        return pulumi.get(self, "target_port")


@pulumi.output_type
class GetClusterResultResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetClusterResultContentResult'],
                 total_count: int):
        """
        :param Sequence['GetClusterResultContentArgs'] contents: Cluster list. Note: This field may return null, indicating no valid values.
        :param int total_count: Total number of items. Note: This field may return null, indicating that no valid value was found.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetClusterResultContentResult']:
        """
        Cluster list. Note: This field may return null, indicating no valid values.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        Total number of items. Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetClusterResultContentResult(dict):
    def __init__(__self__, *,
                 cluster_cidr: str,
                 cluster_desc: str,
                 cluster_id: str,
                 cluster_limit_cpu: float,
                 cluster_limit_mem: float,
                 cluster_name: str,
                 cluster_status: str,
                 cluster_total_cpu: float,
                 cluster_total_mem: float,
                 cluster_type: str,
                 cluster_used_cpu: float,
                 cluster_used_mem: float,
                 cluster_version: str,
                 create_time: str,
                 delete_flag: bool,
                 delete_flag_reason: str,
                 instance_count: int,
                 normal_instance_count: int,
                 operation_infos: Sequence['outputs.GetClusterResultContentOperationInfoResult'],
                 run_instance_count: int,
                 run_service_instance_count: int,
                 subnet_id: str,
                 tsf_region_id: str,
                 tsf_region_name: str,
                 tsf_zone_id: str,
                 tsf_zone_name: str,
                 update_time: str,
                 vpc_id: str):
        """
        :param str cluster_cidr: cluster CIDR. Note: This field may return null, indicating no valid value.
        :param str cluster_desc: Cluster description. Note: This field may return null, indicating no valid value.
        :param str cluster_id: Cluster ID. Note: This field may return null, indicating no valid value.
        :param float cluster_limit_cpu: Maximum CPU limit of the cluster, in cores. This field may return null, indicating that no valid value was found.
        :param float cluster_limit_mem: Cluster maximum memory limit in GB. This field may return null, indicating that no valid value was found.
        :param str cluster_name: Cluster name. Note: This field may return null, indicating no valid value.
        :param str cluster_status: cluster status. Note: This field may return null, indicating no valid value.
        :param float cluster_total_cpu: Total CPU of the cluster, unit: cores. Note: This field may return null, indicating that no valid value was found.
        :param float cluster_total_mem: Total memory of the cluster, unit: G. Note: This field may return null, indicating that no valid value is obtained.
        :param str cluster_type: The type of cluster to be queried, if left blank or not passed, all content will be queried. C: container, V: virtual machine.
        :param float cluster_used_cpu: Used CPU of the cluster, in cores. This field may return null, indicating no valid value.
        :param float cluster_used_mem: Cluster used memory in GB. This field may return null, indicating no valid value.
        :param str cluster_version: The cluster version, may return null if not applicable.
        :param str create_time: CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        :param bool delete_flag: Deletion tag: true means it can be deleted, false means it cannot be deleted. Note: This field may return null, indicating no valid value.
        :param str delete_flag_reason: Reason why the cluster cannot be deleted.  Note: This field may return null, indicating that no valid values can be obtained.
        :param int instance_count: Cluster instance number. This field may return null, indicating no valid value.
        :param int normal_instance_count: Cluster normal instance number. This field may return null, indicating no valid value.
        :param Sequence['GetClusterResultContentOperationInfoArgs'] operation_infos: Control information returned to the frontend. This field may return null, indicating no valid value.
        :param int run_instance_count: Cluster running instance number. This field may return null, indicating no valid value.
        :param int run_service_instance_count: Number of available service instances in the cluster. Note: This field may return null, indicating no valid value.
        :param str subnet_id: Cluster subnet ID. Note: This field may return null, indicating no valid values.
        :param str tsf_region_id: region ID of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str tsf_region_name: region name of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str tsf_zone_id: Zone Id of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str tsf_zone_name: Zone name of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str update_time: last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str vpc_id: Private network ID of the cluster. Note: This field may return null, indicating no valid value.
        """
        pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        pulumi.set(__self__, "cluster_desc", cluster_desc)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_limit_cpu", cluster_limit_cpu)
        pulumi.set(__self__, "cluster_limit_mem", cluster_limit_mem)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_status", cluster_status)
        pulumi.set(__self__, "cluster_total_cpu", cluster_total_cpu)
        pulumi.set(__self__, "cluster_total_mem", cluster_total_mem)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cluster_used_cpu", cluster_used_cpu)
        pulumi.set(__self__, "cluster_used_mem", cluster_used_mem)
        pulumi.set(__self__, "cluster_version", cluster_version)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delete_flag", delete_flag)
        pulumi.set(__self__, "delete_flag_reason", delete_flag_reason)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "normal_instance_count", normal_instance_count)
        pulumi.set(__self__, "operation_infos", operation_infos)
        pulumi.set(__self__, "run_instance_count", run_instance_count)
        pulumi.set(__self__, "run_service_instance_count", run_service_instance_count)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tsf_region_id", tsf_region_id)
        pulumi.set(__self__, "tsf_region_name", tsf_region_name)
        pulumi.set(__self__, "tsf_zone_id", tsf_zone_id)
        pulumi.set(__self__, "tsf_zone_name", tsf_zone_name)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> str:
        """
        cluster CIDR. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "cluster_cidr")

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> str:
        """
        Cluster description. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "cluster_desc")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Cluster ID. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLimitCpu")
    def cluster_limit_cpu(self) -> float:
        """
        Maximum CPU limit of the cluster, in cores. This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "cluster_limit_cpu")

    @property
    @pulumi.getter(name="clusterLimitMem")
    def cluster_limit_mem(self) -> float:
        """
        Cluster maximum memory limit in GB. This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "cluster_limit_mem")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> str:
        """
        cluster status. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "cluster_status")

    @property
    @pulumi.getter(name="clusterTotalCpu")
    def cluster_total_cpu(self) -> float:
        """
        Total CPU of the cluster, unit: cores. Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "cluster_total_cpu")

    @property
    @pulumi.getter(name="clusterTotalMem")
    def cluster_total_mem(self) -> float:
        """
        Total memory of the cluster, unit: G. Note: This field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "cluster_total_mem")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        The type of cluster to be queried, if left blank or not passed, all content will be queried. C: container, V: virtual machine.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clusterUsedCpu")
    def cluster_used_cpu(self) -> float:
        """
        Used CPU of the cluster, in cores. This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "cluster_used_cpu")

    @property
    @pulumi.getter(name="clusterUsedMem")
    def cluster_used_mem(self) -> float:
        """
        Cluster used memory in GB. This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "cluster_used_mem")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> str:
        """
        The cluster version, may return null if not applicable.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteFlag")
    def delete_flag(self) -> bool:
        """
        Deletion tag: true means it can be deleted, false means it cannot be deleted. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "delete_flag")

    @property
    @pulumi.getter(name="deleteFlagReason")
    def delete_flag_reason(self) -> str:
        """
        Reason why the cluster cannot be deleted.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "delete_flag_reason")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        Cluster instance number. This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="normalInstanceCount")
    def normal_instance_count(self) -> int:
        """
        Cluster normal instance number. This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "normal_instance_count")

    @property
    @pulumi.getter(name="operationInfos")
    def operation_infos(self) -> Sequence['outputs.GetClusterResultContentOperationInfoResult']:
        """
        Control information returned to the frontend. This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "operation_infos")

    @property
    @pulumi.getter(name="runInstanceCount")
    def run_instance_count(self) -> int:
        """
        Cluster running instance number. This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "run_instance_count")

    @property
    @pulumi.getter(name="runServiceInstanceCount")
    def run_service_instance_count(self) -> int:
        """
        Number of available service instances in the cluster. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "run_service_instance_count")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Cluster subnet ID. Note: This field may return null, indicating no valid values.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tsfRegionId")
    def tsf_region_id(self) -> str:
        """
        region ID of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tsf_region_id")

    @property
    @pulumi.getter(name="tsfRegionName")
    def tsf_region_name(self) -> str:
        """
        region name of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tsf_region_name")

    @property
    @pulumi.getter(name="tsfZoneId")
    def tsf_zone_id(self) -> str:
        """
        Zone Id of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tsf_zone_id")

    @property
    @pulumi.getter(name="tsfZoneName")
    def tsf_zone_name(self) -> str:
        """
        Zone name of TSF.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "tsf_zone_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Private network ID of the cluster. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetClusterResultContentOperationInfoResult(dict):
    def __init__(__self__, *,
                 add_instances: Sequence['outputs.GetClusterResultContentOperationInfoAddInstanceResult'],
                 destroys: Sequence['outputs.GetClusterResultContentOperationInfoDestroyResult'],
                 inits: Sequence['outputs.GetClusterResultContentOperationInfoInitResult']):
        """
        :param Sequence['GetClusterResultContentOperationInfoAddInstanceArgs'] add_instances: Add instance button control information, Note: This field may return null, indicating that no valid value is obtained.
        :param Sequence['GetClusterResultContentOperationInfoDestroyArgs'] destroys: Control information for destroying machine, may return null if no valid value is obtained.
        :param Sequence['GetClusterResultContentOperationInfoInitArgs'] inits: Control information of the initialization button returned to the front end. Note: This field may return null, indicating no valid value.
        """
        pulumi.set(__self__, "add_instances", add_instances)
        pulumi.set(__self__, "destroys", destroys)
        pulumi.set(__self__, "inits", inits)

    @property
    @pulumi.getter(name="addInstances")
    def add_instances(self) -> Sequence['outputs.GetClusterResultContentOperationInfoAddInstanceResult']:
        """
        Add instance button control information, Note: This field may return null, indicating that no valid value is obtained.
        """
        return pulumi.get(self, "add_instances")

    @property
    @pulumi.getter
    def destroys(self) -> Sequence['outputs.GetClusterResultContentOperationInfoDestroyResult']:
        """
        Control information for destroying machine, may return null if no valid value is obtained.
        """
        return pulumi.get(self, "destroys")

    @property
    @pulumi.getter
    def inits(self) -> Sequence['outputs.GetClusterResultContentOperationInfoInitResult']:
        """
        Control information of the initialization button returned to the front end. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "inits")


@pulumi.output_type
class GetClusterResultContentOperationInfoAddInstanceResult(dict):
    def __init__(__self__, *,
                 disabled_reason: str,
                 enabled: bool,
                 supported: bool):
        """
        :param str disabled_reason: Reason for not displaying. Note: This field may return null, indicating no valid value.
        :param bool enabled: The availability of the button (whether it is clickable) may return null indicating that the information is not available.
        :param bool supported: Whether to display the button. Note: This field may return null, indicating that no valid value was found.
        """
        pulumi.set(__self__, "disabled_reason", disabled_reason)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> str:
        """
        Reason for not displaying. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        The availability of the button (whether it is clickable) may return null indicating that the information is not available.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether to display the button. Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetClusterResultContentOperationInfoDestroyResult(dict):
    def __init__(__self__, *,
                 disabled_reason: str,
                 enabled: bool,
                 supported: bool):
        """
        :param str disabled_reason: Reason for not displaying. Note: This field may return null, indicating no valid value.
        :param bool enabled: The availability of the button (whether it is clickable) may return null indicating that the information is not available.
        :param bool supported: Whether to display the button. Note: This field may return null, indicating that no valid value was found.
        """
        pulumi.set(__self__, "disabled_reason", disabled_reason)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> str:
        """
        Reason for not displaying. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        The availability of the button (whether it is clickable) may return null indicating that the information is not available.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether to display the button. Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetClusterResultContentOperationInfoInitResult(dict):
    def __init__(__self__, *,
                 disabled_reason: str,
                 enabled: bool,
                 supported: bool):
        """
        :param str disabled_reason: Reason for not displaying. Note: This field may return null, indicating no valid value.
        :param bool enabled: The availability of the button (whether it is clickable) may return null indicating that the information is not available.
        :param bool supported: Whether to display the button. Note: This field may return null, indicating that no valid value was found.
        """
        pulumi.set(__self__, "disabled_reason", disabled_reason)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> str:
        """
        Reason for not displaying. Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "disabled_reason")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        The availability of the button (whether it is clickable) may return null indicating that the information is not available.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def supported(self) -> bool:
        """
        Whether to display the button. Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "supported")


@pulumi.output_type
class GetMicroserviceResultResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetMicroserviceResultContentResult'],
                 total_count: int):
        """
        :param Sequence['GetMicroserviceResultContentArgs'] contents: Microservice list information. Note: This field may return null, indicating that no valid value can be obtained.
        :param int total_count: Microservice paging list information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetMicroserviceResultContentResult']:
        """
        Microservice list information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        Microservice paging list information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetMicroserviceResultContentResult(dict):
    def __init__(__self__, *,
                 create_time: int,
                 critical_instance_count: int,
                 microservice_desc: str,
                 microservice_id: str,
                 microservice_name: str,
                 namespace_id: str,
                 run_instance_count: int,
                 update_time: int):
        """
        :param int create_time: CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        :param int critical_instance_count: offline instance count.  Note: This field may return null, indicating that no valid values can be obtained.
        :param str microservice_desc: Microservice description. Note: This field may return null, indicating that no valid value can be obtained.
        :param str microservice_id: Microservice Id. Note: This field may return null, indicating that no valid value can be obtained.
        :param str microservice_name: Microservice name. Note: This field may return null, indicating that no valid value can be obtained.
        :param str namespace_id: namespace id.
        :param int run_instance_count: run instance count in namespace.  Note: This field may return null, indicating that no valid values can be obtained.
        :param int update_time: last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "critical_instance_count", critical_instance_count)
        pulumi.set(__self__, "microservice_desc", microservice_desc)
        pulumi.set(__self__, "microservice_id", microservice_id)
        pulumi.set(__self__, "microservice_name", microservice_name)
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "run_instance_count", run_instance_count)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        CreationTime. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="criticalInstanceCount")
    def critical_instance_count(self) -> int:
        """
        offline instance count.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "critical_instance_count")

    @property
    @pulumi.getter(name="microserviceDesc")
    def microservice_desc(self) -> str:
        """
        Microservice description. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "microservice_desc")

    @property
    @pulumi.getter(name="microserviceId")
    def microservice_id(self) -> str:
        """
        Microservice Id. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "microservice_id")

    @property
    @pulumi.getter(name="microserviceName")
    def microservice_name(self) -> str:
        """
        Microservice name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "microservice_name")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        namespace id.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="runInstanceCount")
    def run_instance_count(self) -> int:
        """
        run instance count in namespace.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "run_instance_count")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        last update time.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetUnitRulesResultResult(dict):
    def __init__(__self__, *,
                 contents: Sequence['outputs.GetUnitRulesResultContentResult'],
                 total_count: int):
        """
        :param Sequence['GetUnitRulesResultContentArgs'] contents: record entity list.
        :param int total_count: total number of records.
        """
        pulumi.set(__self__, "contents", contents)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter
    def contents(self) -> Sequence['outputs.GetUnitRulesResultContentResult']:
        """
        record entity list.
        """
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        total number of records.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetUnitRulesResultContentResult(dict):
    def __init__(__self__, *,
                 created_time: str,
                 description: str,
                 gateway_instance_id: str,
                 id: str,
                 name: str,
                 status: str,
                 unit_rule_item_lists: Sequence['outputs.GetUnitRulesResultContentUnitRuleItemListResult'],
                 updated_time: str):
        """
        :param str created_time: created time.
        :param str description: Rule description.
        :param str gateway_instance_id: gateway instance id.
        :param str id: rule ID.
        :param str name: rule item name.
        :param str status: Enabled state, disabled: unpublished, enabled: published.
        :param Sequence['GetUnitRulesResultContentUnitRuleItemListArgs'] unit_rule_item_lists: list of rule items.
        :param str updated_time: Updated time.
        """
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "gateway_instance_id", gateway_instance_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "unit_rule_item_lists", unit_rule_item_lists)
        pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        created time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayInstanceId")
    def gateway_instance_id(self) -> str:
        """
        gateway instance id.
        """
        return pulumi.get(self, "gateway_instance_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        rule item name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enabled state, disabled: unpublished, enabled: published.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unitRuleItemLists")
    def unit_rule_item_lists(self) -> Sequence['outputs.GetUnitRulesResultContentUnitRuleItemListResult']:
        """
        list of rule items.
        """
        return pulumi.get(self, "unit_rule_item_lists")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> str:
        """
        Updated time.
        """
        return pulumi.get(self, "updated_time")


@pulumi.output_type
class GetUnitRulesResultContentUnitRuleItemListResult(dict):
    def __init__(__self__, *,
                 description: str,
                 dest_namespace_id: str,
                 dest_namespace_name: str,
                 id: str,
                 name: str,
                 priority: int,
                 relationship: str,
                 unit_rule_id: str,
                 unit_rule_tag_lists: Sequence['outputs.GetUnitRulesResultContentUnitRuleItemListUnitRuleTagListResult']):
        """
        :param str description: Rule description.
        :param str dest_namespace_id: Destination Namespace ID.
        :param str dest_namespace_name: destination namespace name.
        :param str id: rule ID.
        :param str name: rule item name.
        :param int priority: Rule order, the smaller the higher the priority: the default is 0.
        :param str relationship: Logical relationship: AND/OR.
        :param str unit_rule_id: Unitization rule ID.
        :param Sequence['GetUnitRulesResultContentUnitRuleItemListUnitRuleTagListArgs'] unit_rule_tag_lists: List of rule labels.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dest_namespace_id", dest_namespace_id)
        pulumi.set(__self__, "dest_namespace_name", dest_namespace_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "relationship", relationship)
        pulumi.set(__self__, "unit_rule_id", unit_rule_id)
        pulumi.set(__self__, "unit_rule_tag_lists", unit_rule_tag_lists)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destNamespaceId")
    def dest_namespace_id(self) -> str:
        """
        Destination Namespace ID.
        """
        return pulumi.get(self, "dest_namespace_id")

    @property
    @pulumi.getter(name="destNamespaceName")
    def dest_namespace_name(self) -> str:
        """
        destination namespace name.
        """
        return pulumi.get(self, "dest_namespace_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        rule item name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Rule order, the smaller the higher the priority: the default is 0.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def relationship(self) -> str:
        """
        Logical relationship: AND/OR.
        """
        return pulumi.get(self, "relationship")

    @property
    @pulumi.getter(name="unitRuleId")
    def unit_rule_id(self) -> str:
        """
        Unitization rule ID.
        """
        return pulumi.get(self, "unit_rule_id")

    @property
    @pulumi.getter(name="unitRuleTagLists")
    def unit_rule_tag_lists(self) -> Sequence['outputs.GetUnitRulesResultContentUnitRuleItemListUnitRuleTagListResult']:
        """
        List of rule labels.
        """
        return pulumi.get(self, "unit_rule_tag_lists")


@pulumi.output_type
class GetUnitRulesResultContentUnitRuleItemListUnitRuleTagListResult(dict):
    def __init__(__self__, *,
                 id: str,
                 tag_field: str,
                 tag_operator: str,
                 tag_type: str,
                 tag_value: str,
                 unit_rule_item_id: str):
        """
        :param str id: rule ID.
        :param str tag_field: tag name.
        :param str tag_operator: Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
        :param str tag_type: Tag Type: U(User Tag).
        :param str tag_value: tag value.
        :param str unit_rule_item_id: Unitization rule item ID.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tag_field", tag_field)
        pulumi.set(__self__, "tag_operator", tag_operator)
        pulumi.set(__self__, "tag_type", tag_type)
        pulumi.set(__self__, "tag_value", tag_value)
        pulumi.set(__self__, "unit_rule_item_id", unit_rule_item_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        rule ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tagField")
    def tag_field(self) -> str:
        """
        tag name.
        """
        return pulumi.get(self, "tag_field")

    @property
    @pulumi.getter(name="tagOperator")
    def tag_operator(self) -> str:
        """
        Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
        """
        return pulumi.get(self, "tag_operator")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> str:
        """
        Tag Type: U(User Tag).
        """
        return pulumi.get(self, "tag_type")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")

    @property
    @pulumi.getter(name="unitRuleItemId")
    def unit_rule_item_id(self) -> str:
        """
        Unitization rule item ID.
        """
        return pulumi.get(self, "unit_rule_item_id")


