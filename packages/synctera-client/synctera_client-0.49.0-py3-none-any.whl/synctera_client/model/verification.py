# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class Verification(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Verification result.
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                required = {
                    "result",
                    "verification_time",
                    "verification_type",
                }
        
            
            result: schemas.AnyTypeSchema
            verification_time: schemas.AnyTypeSchema
            verification_type: schemas.AnyTypeSchema
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *_args,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    business_id = schemas.UUIDSchema
                    creation_time = schemas.DateTimeSchema
                
                    @staticmethod
                    def details() -> typing.Type['Details']:
                        return Details
                    id = schemas.UUIDSchema
                    last_updated_time = schemas.DateTimeSchema
                    metadata = schemas.DictSchema
                    person_id = schemas.UUIDSchema
                
                    @staticmethod
                    def result() -> typing.Type['VerificationResult']:
                        return VerificationResult
                
                    @staticmethod
                    def vendor_info() -> typing.Type['VendorInfo']:
                        return VendorInfo
                    verification_time = schemas.DateTimeSchema
                
                    @staticmethod
                    def verification_type() -> typing.Type['VerificationType1']:
                        return VerificationType1
                    __annotations__ = {
                        "business_id": business_id,
                        "creation_time": creation_time,
                        "details": details,
                        "id": id,
                        "last_updated_time": last_updated_time,
                        "metadata": metadata,
                        "person_id": person_id,
                        "result": result,
                        "vendor_info": vendor_info,
                        "verification_time": verification_time,
                        "verification_type": verification_type,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["business_id"]) -> MetaOapg.properties.business_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["details"]) -> 'Details': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["last_updated_time"]) -> MetaOapg.properties.last_updated_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["person_id"]) -> MetaOapg.properties.person_id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["result"]) -> 'VerificationResult': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["vendor_info"]) -> 'VendorInfo': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["verification_time"]) -> MetaOapg.properties.verification_time: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["verification_type"]) -> 'VerificationType1': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["business_id", "creation_time", "details", "id", "last_updated_time", "metadata", "person_id", "result", "vendor_info", "verification_time", "verification_type", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["business_id"]) -> typing.Union[MetaOapg.properties.business_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["creation_time"]) -> typing.Union[MetaOapg.properties.creation_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union['Details', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["last_updated_time"]) -> typing.Union[MetaOapg.properties.last_updated_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["person_id"]) -> typing.Union[MetaOapg.properties.person_id, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> typing.Union['VerificationResult', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["vendor_info"]) -> typing.Union['VendorInfo', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["verification_time"]) -> typing.Union[MetaOapg.properties.verification_time, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["verification_type"]) -> typing.Union['VerificationType1', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["business_id", "creation_time", "details", "id", "last_updated_time", "metadata", "person_id", "result", "vendor_info", "verification_time", "verification_type", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                business_id: typing.Union[MetaOapg.properties.business_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
                creation_time: typing.Union[MetaOapg.properties.creation_time, str, datetime, schemas.Unset] = schemas.unset,
                details: typing.Union['Details', schemas.Unset] = schemas.unset,
                id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
                last_updated_time: typing.Union[MetaOapg.properties.last_updated_time, str, datetime, schemas.Unset] = schemas.unset,
                metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                person_id: typing.Union[MetaOapg.properties.person_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
                result: typing.Union['VerificationResult', schemas.Unset] = schemas.unset,
                vendor_info: typing.Union['VendorInfo', schemas.Unset] = schemas.unset,
                verification_time: typing.Union[MetaOapg.properties.verification_time, str, datetime, schemas.Unset] = schemas.unset,
                verification_type: typing.Union['VerificationType1', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    business_id=business_id,
                    creation_time=creation_time,
                    details=details,
                    id=id,
                    last_updated_time=last_updated_time,
                    metadata=metadata,
                    person_id=person_id,
                    result=result,
                    vendor_info=vendor_info,
                    verification_time=verification_time,
                    verification_type=verification_type,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Verification':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from synctera_client.model.details import Details
from synctera_client.model.vendor_info import VendorInfo
from synctera_client.model.verification_result import VerificationResult
from synctera_client.model.verification_type1 import VerificationType1
