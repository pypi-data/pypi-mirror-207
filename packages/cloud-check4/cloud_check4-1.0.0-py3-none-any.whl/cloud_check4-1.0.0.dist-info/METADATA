Metadata-Version: 2.1
Name: cloud-check4
Version: 1.0.0
Summary: AWS Cloud Audit Tool
Home-page: UNKNOWN
Author: Vishal, Koushik, Sudharshan, Vikneshwar, Bhanuja, Ajay
Maintainer-email: vishalrv1904@gmail.com , bhanuja497@gmail.com
License: MIT
Platform: UNKNOWN
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: boto3 (==1.26.85)
Requires-Dist: nose (==1.3.7)
Requires-Dist: Jinja2 (==3.1.2)
Requires-Dist: moto (==4.1.4)
Requires-Dist: docker (==6.0.1)
Requires-Dist: pyparsing (==3.0.9)
Requires-Dist: openapi-spec-validator (==0.5.6)

# **DNA AUDIT TOOL** #

DNA Audit tool helps you to check whether the application built on AWS is following the AWS Well-Architected framework by validating it against
various AWS services security requirements and the best practices. Generates report to validate the security requirements and security best practices.


# **Audit tool setup** #

**The project basically uses boto client to connect to the aws services.**

1. Update the session credentials in the terminal or give the session credentials through the arguments of the command line by specifying --access_key, --secret_key and --session_token.

2. You can specify the region name, config file path, report file path and tags through --region, --config_path, --report_path arguments respectively while running the program.

3. If no region is specified us-east-1 is taken as default region, Similarly if no config file path and report path is given current working directory path is taken as default and the audit checks are performed for the services accordingly.

4. To check tags, we can pass as argument --tags while running the tool and we can also update the config.json file by mentioning the tags in the account tags provided. Moreover the tags passed as the argument through the command line takes the first priority.

5. Tags that are passed through the argument in command line should be separated using commas (,)


# **Audit Tool Execution** #

Command to Run the audit tool in the command line after installing the package.
```
cloud-audit-tool
```

Arguments that can be passed
```
cloud-audit-tool --region {region_name} --config_path {config_path} --report_path {report_path} --access_key {access_key} --secret_key {secret_key} --session_token {session_token} --tags {tag1,tag2,..}
```

# **Final Report** #

The overall report is provided as a HTML document in the path specified in the report_path argument. If no path is specified report is generated in the current working directory.


