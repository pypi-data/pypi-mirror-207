# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class Lookup3dsRequestBase(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details for an External Card Transfer 3-D Secure Authentication lookup request
    """


    class MetaOapg:
        required = {
            "transaction_mode",
            "authentication_indicator",
            "id",
            "device_channel",
        }
        
        class properties:
            
            
            class authentication_indicator(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PAYMENT(cls):
                    return cls("PAYMENT")
                
                @schemas.classproperty
                def RECURRING(cls):
                    return cls("RECURRING")
                
                @schemas.classproperty
                def INSTALLMENT(cls):
                    return cls("INSTALLMENT")
            
            
            class device_channel(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BROWSER(cls):
                    return cls("BROWSER")
                
                @schemas.classproperty
                def SDK(cls):
                    return cls("SDK")
            id = schemas.UUIDSchema
            
            
            class transaction_mode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MOBILE_DEVICE(cls):
                    return cls("MOBILE_DEVICE")
                
                @schemas.classproperty
                def TABLET_DEVICE(cls):
                    return cls("TABLET_DEVICE")
                
                @schemas.classproperty
                def COMPUTER_DEVICE(cls):
                    return cls("COMPUTER_DEVICE")
            __annotations__ = {
                "authentication_indicator": authentication_indicator,
                "device_channel": device_channel,
                "id": id,
                "transaction_mode": transaction_mode,
            }
    
    transaction_mode: MetaOapg.properties.transaction_mode
    authentication_indicator: MetaOapg.properties.authentication_indicator
    id: MetaOapg.properties.id
    device_channel: MetaOapg.properties.device_channel
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_indicator"]) -> MetaOapg.properties.authentication_indicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_channel"]) -> MetaOapg.properties.device_channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_mode"]) -> MetaOapg.properties.transaction_mode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["authentication_indicator", "device_channel", "id", "transaction_mode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_indicator"]) -> MetaOapg.properties.authentication_indicator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_channel"]) -> MetaOapg.properties.device_channel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_mode"]) -> MetaOapg.properties.transaction_mode: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["authentication_indicator", "device_channel", "id", "transaction_mode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        transaction_mode: typing.Union[MetaOapg.properties.transaction_mode, str, ],
        authentication_indicator: typing.Union[MetaOapg.properties.authentication_indicator, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        device_channel: typing.Union[MetaOapg.properties.device_channel, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Lookup3dsRequestBase':
        return super().__new__(
            cls,
            *_args,
            transaction_mode=transaction_mode,
            authentication_indicator=authentication_indicator,
            id=id,
            device_channel=device_channel,
            _configuration=_configuration,
            **kwargs,
        )
