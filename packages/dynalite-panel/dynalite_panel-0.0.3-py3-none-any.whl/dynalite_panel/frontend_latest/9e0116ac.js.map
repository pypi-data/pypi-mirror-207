{"version":3,"file":"9e0116ac.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAIA;;AAKA;;;;;;;;;;;;;;;;;;;;ACtEA;;;;ACSA;AACA;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;;AC/DA;;;;;;;;;;;;;;;;;;;;AANA;;AC2BA;AACA;AACA;;AAwBA;AACA;AACA;AACA;;;;AAIA;;AAIA;;;AAGA;AACA;AACA;AACA;;AAEA;AAGA;;;AAIA;;;AA9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAoCA;;ACrEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;ACUA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;ACyBA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;AAMA;;AAEA;;;;;AArBA;;;;;;;;;;AAyFA","sources":["webpack://dynalitepanel/./homeassistant-frontend/src/components/ha-card.ts","webpack://dynalitepanel/./homeassistant-frontend/src/components/ha-switch.ts","webpack://dynalitepanel/./homeassistant-frontend/src/components/ha-settings-row.ts","webpack://dynalitepanel/./homeassistant-frontend/src/components/ha-select.ts","webpack://dynalitepanel/./src/dynalite-input.ts","webpack://dynalitepanel/./src/dynalite-input-element.ts","webpack://dynalitepanel/./src/dynalite-preset-table.ts","webpack://dynalitepanel/./src/dynalite-table.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      .mdc-select--filled .mdc-floating-label {\n        inset-inline-start: 12px;\n        inset-inline-end: initial;\n        direction: var(--direction);\n      }\n      .mdc-select .mdc-select__anchor {\n        padding-inline-start: 12px;\n        padding-inline-end: 0px;\n        direction: var(--direction);\n      }\n      .mdc-select__anchor .mdc-floating-label--float-above {\n        transform-origin: var(--float-start);\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport type { HaSwitch } from \"../homeassistant-frontend/src/components/ha-switch\";\nimport { TYPE_BOOLEAN, TYPE_NUMBER, TYPE_SELECT } from \"./const\";\nimport type { DynaliteInputSettings } from \"./dynalite-input-settings\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"../homeassistant-frontend/src/components/ha-settings-row\";\nimport \"../homeassistant-frontend/src/components/ha-textfield\";\nimport \"../homeassistant-frontend/src/components/ha-switch\";\nimport \"../homeassistant-frontend/src/components/ha-select\";\n\n@customElement(\"dynalite-input\")\nexport class DynaliteInput extends LitElement {\n  @property({ attribute: false }) public settings!: DynaliteInputSettings;\n\n  @property() public value?: string | boolean;\n\n  @property({ type: Boolean }) public disabled?;\n\n  @property({ attribute: false }) public excluded?: string[];\n\n  @property() public helper?: string;\n\n  @query(\"#my-textfield\") myTextField;\n\n  boundValidityTransform = this._validityTransform.bind(this);\n\n  protected render(): TemplateResult | void {\n    const value =\n      this.settings.suffixVal !== \"%\" || !this.value\n        ? this.value\n        : Math.round(Number(this.value) * 100) + \"\";\n    return html`\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=${this.settings.nameVal}> ${this.settings.headingVal} </span>\n        <span slot=\"description\" data-for=${this.settings.nameVal}> ${this.settings.descVal} </span>\n        ${!this.settings.typeVal || this.settings.typeVal === TYPE_NUMBER\n          ? html`\n              <ha-textfield\n                id=\"my-textfield\"\n                name=${this.settings.nameVal}\n                value=${ifDefined(value)}\n                type=${ifDefined(this.settings.typeVal)}\n                ?required=${this.settings.requiredVal}\n                ?disabled=${this.disabled}\n                min=${ifDefined(this.settings.minVal)}\n                max=${ifDefined(this.settings.maxVal)}\n                step=${ifDefined(this.settings.stepVal)}\n                helper=${ifDefined(this.helper)}\n                autoValidate\n                validateOnInitialRender\n                .validityTransform=${this.boundValidityTransform}\n                suffix=${ifDefined(this.settings.suffixVal)}\n                @input=${this._handleTextChange}\n                @wheel=${this._onWheel}\n              ></ha-textfield>\n            `\n          : this.settings.typeVal === TYPE_BOOLEAN\n          ? html`\n              <ha-switch\n                .preference=${this.settings.nameVal}\n                ?checked=${value}\n                ?disabled=${this.disabled}\n                @change=${this._handleBoolChange}\n                haptic\n              >\n              </ha-switch>\n            `\n          : this.settings.typeVal === TYPE_SELECT\n          ? html`\n              <ha-select\n                name=${this.settings.nameVal}\n                fixedMenuPosition\n                naturalMenuWidth\n                value=${ifDefined(value)}\n                ?disabled=${this.disabled}\n                @change=${this._handleTextChange}\n                @closed=${this._onSelectClose}\n              >\n                ${this.settings.selectionVal?.map(\n                  (entry) =>\n                    html` <mwc-list-item .value=${entry[0]} ?selected=${entry[0] === this.value}>\n                      ${entry[1]}\n                    </mwc-list-item>`\n                )}\n              </ha-select>\n            `\n          : html`Error - Unknown type`}\n      </ha-settings-row>\n    `;\n  }\n\n  public isValid(): boolean {\n    if ([TYPE_BOOLEAN, TYPE_SELECT].includes(this.settings.typeVal || \"\")) return true;\n    return this.myTextField && this.myTextField.validity.valid;\n  }\n\n  private _updateParent(name: string, value: any) {\n    this.dispatchEvent(\n      new CustomEvent(\"dynalite-input\", { detail: { target: name, value: value } })\n    );\n  }\n\n  private _handleTextChange(ev) {\n    const target = ev.currentTarget;\n    if (!target) return;\n\n    const value =\n      this.settings.suffixVal !== \"%\" || !target.value\n        ? target.value\n        : Number(target.value) / 100 + \"\";\n    this._updateParent(target.name, value);\n  }\n\n  private _handleBoolChange(ev) {\n    const target = ev.currentTarget as HaSwitch;\n    const name = (target as any).preference;\n    this._updateParent(name, target.checked);\n  }\n\n  private _onSelectClose(ev) {\n    ev.stopPropagation();\n  }\n\n  private _onWheel(_ev) {\n    this.blur();\n  }\n\n  private _validityTransform(value: string, nativeValidity: ValidityState): Partial<ValidityState> {\n    if (!this.myTextField) return nativeValidity;\n    if (\n      nativeValidity.rangeOverflow ||\n      nativeValidity.rangeUnderflow ||\n      nativeValidity.stepMismatch\n    ) {\n      this.myTextField.setCustomValidity(this.settings.validationMessageVal);\n      return {\n        valid: false,\n        rangeOverflow: nativeValidity.rangeOverflow,\n        rangeUnderflow: nativeValidity.rangeUnderflow,\n        stepMismatch: nativeValidity.stepMismatch,\n      };\n    }\n    if (nativeValidity.valueMissing) {\n      this.myTextField.setCustomValidity(\"Required\");\n      return { valid: false, valueMissing: true };\n    }\n    if (this.excluded && this.excluded.includes(value)) {\n      this.myTextField.setCustomValidity(\"Already exists\");\n      return { valid: false, customError: true };\n    }\n    return { valid: true };\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-input\": DynaliteInput;\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { DynaliteInputSettings } from \"./dynalite-input-settings\";\nimport \"./dynalite-input\";\n\nexport abstract class DynaliteInputElement<T> extends LitElement {\n  protected abstract result: T;\n\n  protected hasElementChanged = false;\n\n  protected abstract settings: { [key in keyof T]: DynaliteInputSettings };\n\n  protected helpers?: { [key in keyof T]?: string };\n\n  protected disabled?: (keyof T)[];\n\n  protected excluded?: { [key in keyof T]?: string[] };\n\n  protected genInputElement(param: keyof T): TemplateResult {\n    if (this.settings[param].nameVal !== param) throw new Error(\"illegal param\");\n    return html`\n      <dynalite-input\n        .settings=${this.settings[param]}\n        @dynalite-input=${this.handleDynaliteInputChange}\n        .value=${this.result[param]}\n        helper=${ifDefined(this.helpers?.[param])}\n        ?disabled=${this.disabled?.includes(param)}\n        .excluded=${this.excluded?.[param]}\n      ></dynalite-input>\n    `;\n  }\n\n  protected handleDynaliteInputChange(ev) {\n    const detail = ev.detail;\n    const target = detail.target;\n    const value = detail.value;\n    this.result![target] = value;\n    this.hasElementChanged = true;\n    this.requestUpdate();\n  }\n}\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport { CONF_DYNET_ID, CONF_FADE, CONF_LEVEL, CONF_NAME, CONF_PRESET } from \"./const\";\nimport { DynalitePresetData } from \"./common\";\nimport {\n  DynaliteFadeInput,\n  DynaliteIdInput,\n  DynalitePercentageInput,\n  DynaliteTextInput,\n} from \"./dynalite-input-settings\";\nimport type { DynaliteTableSettings } from \"./dynalite-table\";\nimport \"./dynalite-table\";\n\n@customElement(\"dynalite-preset-table\")\nexport class DynalitePresetTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public narrow = false;\n\n  @property({ attribute: false }) public presets!: { [key: string]: DynalitePresetData };\n\n  @property({ type: String }) public defaultFade!: string;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n    const settings: DynaliteTableSettings = {\n      name: \"Preset\",\n      inputs: this._inputs,\n    };\n    const helpers = {\n      name: `Default: Preset ${CONF_DYNET_ID}`,\n      fade: `Default: ${this.defaultFade}`,\n    };\n    return html`\n      <dynalite-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .settings=${settings}\n        .data=${this.presets}\n        .helpers=${helpers}\n        @dynalite-table=${this._redispatchEvent}\n        }\n      >\n      </dynalite-table>\n    `;\n  }\n\n  private _redispatchEvent(_ev: CustomEvent) {\n    this.dispatchEvent(new CustomEvent(\"dynalite-table\"));\n  }\n\n  private _inputs = {\n    dynetId: DynaliteIdInput(CONF_DYNET_ID, CONF_PRESET)\n      .heading(\"Number\")\n      .width(\"15%\")\n      .narrowWidth(\"30%\")\n      .desc(\"Dynalite preset number (1-255)\")\n      .required(),\n    name: DynaliteTextInput(CONF_NAME)\n      .heading(\"Name\")\n      .desc(\"Name for this preset\")\n      .width(\"35%\")\n      .narrowWidth(\"70%\"),\n    level: DynalitePercentageInput(CONF_LEVEL)\n      .heading(\"Level\")\n      .desc(\"Channel levels for this preset\")\n      .width(\"15%\"),\n    fade: DynaliteFadeInput(CONF_FADE)\n      .heading(\"Fade\")\n      .desc(\"Preset fade time (seconds)\")\n      .width(\"15%\"),\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-preset-table\": DynalitePresetTable;\n  }\n}\n","import { mdiPlus } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n} from \"../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport { haStyle } from \"../homeassistant-frontend/src/resources/styles\";\nimport { CONF_DYNET_ID } from \"./const\";\nimport {\n  showDynaliteEditDialog,\n  DynaliteEditDialogParams,\n  DynaliteRowData,\n} from \"./show-dialog-dynalite-edit\";\nimport type { DynaliteInputSettings } from \"./dynalite-input-settings\";\nimport \"../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport \"../homeassistant-frontend/src/components/ha-fab\";\n\nexport interface DynaliteTableSettings {\n  name: string;\n  inputs: { [key: string]: DynaliteInputSettings };\n}\n\n@customElement(\"dynalite-table\")\nexport class DynaliteTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public narrow = false;\n\n  @property({ attribute: false }) public settings!: DynaliteTableSettings;\n\n  @property({ attribute: false }) public data!: { [key: string]: DynaliteRowData };\n\n  @property({ attribute: false }) public helpers?: { [key: string]: string };\n\n  @state() private _processedData: DataTableRowData[] = [];\n\n  @state() private _columns: DataTableColumnContainer = {};\n\n  protected willUpdate(_changedProperties: Map<string | number | symbol, unknown>): void {\n    this._processedData = Object.entries(this.data).map(([num, rowData]) => {\n      const temp: DynaliteRowData = {};\n      Object.entries(this.settings.inputs).forEach(([field, data]) => {\n        const value =\n          field === CONF_DYNET_ID\n            ? num\n            : field in rowData && data.suffixVal === \"%\"\n            ? rowData[field] * 100 + \"%\"\n            : rowData[field];\n        temp[field] = data.transformVal(value);\n      });\n      return temp;\n    });\n    // XXX move to memoizeOne\n    this._columns = {};\n    Object.entries(this.settings.inputs).forEach(([field, input]) => {\n      this._columns[field] = {\n        title: input.headingVal!,\n        width: this.narrow ? input.narrowWidthVal : input.widthVal,\n        hidden: this.narrow && !input.narrowWidthVal,\n        sortable: true,\n        filterable: false,\n      };\n    });\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n    return html`\n      <div class=\"dynalite-table\">\n        <ha-data-table\n          .hass=${this.hass}\n          .narrow=${this.narrow}\n          .route=${this.route}\n          .columns=${this._columns}\n          .data=${this._processedData}\n          clickable\n          id=${CONF_DYNET_ID}\n          auto-height\n          @row-click=${this._handleRowClicked}\n        >\n        </ha-data-table>\n        <ha-fab\n          slot=\"fab\"\n          class=\"dynalite-fab\"\n          label=\"Add ${this.settings.name}\"\n          extended\n          @click=${this._addRow}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </div>\n    `;\n  }\n\n  private _handleRowClicked(ev) {\n    const dynetId = ev.detail.id;\n    const value: DynaliteRowData = this.data[dynetId];\n    value.dynetId = dynetId;\n    showDynaliteEditDialog(this, {\n      hass: this.hass,\n      name: this.settings.name,\n      value: value,\n      inputs: this.settings.inputs,\n      excluded: undefined,\n      disabled: [CONF_DYNET_ID],\n      helpers: this.helpers,\n      onSave: this._saveRow.bind(this),\n      onDelete: this._deleteRow.bind(this),\n    });\n  }\n\n  private _saveRow(params: DynaliteEditDialogParams): void {\n    const newRow: DynaliteRowData = JSON.parse(JSON.stringify(params.value));\n    const dynetId = newRow.dynetId!;\n    delete newRow.dynetId;\n    this.data[dynetId] = newRow;\n    this.dispatchEvent(new CustomEvent(\"dynalite-table\"));\n    this.requestUpdate();\n  }\n\n  private async _addRow(_ev) {\n    showDynaliteEditDialog(this, {\n      hass: this.hass,\n      name: this.settings.name,\n      value: {},\n      inputs: this.settings.inputs,\n      excluded: Object.keys(this.data),\n      disabled: undefined,\n      helpers: this.helpers,\n      onSave: this._saveRow.bind(this),\n    });\n  }\n\n  private _deleteRow(dynetId: string): void {\n    delete this.data[dynetId];\n    this.dispatchEvent(new CustomEvent(\"dynalite-table\"));\n    this.requestUpdate();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .dynalite-table {\n          position: relative;\n        }\n        .dynalite-fab {\n          display: inline-flex;\n          position: absolute;\n          bottom: -15px;\n          right: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-table\": DynaliteTable;\n  }\n}\n"],"names":[],"sourceRoot":""}