# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class BasePerson(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def ban_status() -> typing.Type['BanStatus']:
                return BanStatus
            creation_time = schemas.DateTimeSchema
            email = schemas.StrSchema
            has_accounts = schemas.BoolSchema
            id = schemas.UUIDSchema
            kyc_exempt = schemas.BoolSchema
            kyc_last_run = schemas.DateTimeSchema
        
            @staticmethod
            def kyc_status() -> typing.Type['CustomerKycStatus']:
                return CustomerKycStatus
            last_updated_time = schemas.DateTimeSchema
        
            @staticmethod
            def legal_address() -> typing.Type['Address']:
                return Address
            metadata = schemas.DictSchema
            middle_name = schemas.StrSchema
            note = schemas.StrSchema
            
            
            class phone_number(
                schemas.StrSchema
            ):
                pass
            
            
            class related_customers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Relationship1']:
                        return Relationship1
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Relationship1'], typing.List['Relationship1']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'related_customers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Relationship1':
                    return super().__getitem__(i)
        
            @staticmethod
            def shipping_address() -> typing.Type['Address']:
                return Address
            ssn = schemas.StrSchema
        
            @staticmethod
            def ssn_source() -> typing.Type['SsnSource']:
                return SsnSource
            tenant = schemas.StrSchema
            __annotations__ = {
                "ban_status": ban_status,
                "creation_time": creation_time,
                "email": email,
                "has_accounts": has_accounts,
                "id": id,
                "kyc_exempt": kyc_exempt,
                "kyc_last_run": kyc_last_run,
                "kyc_status": kyc_status,
                "last_updated_time": last_updated_time,
                "legal_address": legal_address,
                "metadata": metadata,
                "middle_name": middle_name,
                "note": note,
                "phone_number": phone_number,
                "related_customers": related_customers,
                "shipping_address": shipping_address,
                "ssn": ssn,
                "ssn_source": ssn_source,
                "tenant": tenant,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ban_status"]) -> 'BanStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_accounts"]) -> MetaOapg.properties.has_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kyc_exempt"]) -> MetaOapg.properties.kyc_exempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kyc_last_run"]) -> MetaOapg.properties.kyc_last_run: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kyc_status"]) -> 'CustomerKycStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_updated_time"]) -> MetaOapg.properties.last_updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legal_address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middle_name"]) -> MetaOapg.properties.middle_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> MetaOapg.properties.phone_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["related_customers"]) -> MetaOapg.properties.related_customers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn_source"]) -> 'SsnSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenant"]) -> MetaOapg.properties.tenant: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ban_status", "creation_time", "email", "has_accounts", "id", "kyc_exempt", "kyc_last_run", "kyc_status", "last_updated_time", "legal_address", "metadata", "middle_name", "note", "phone_number", "related_customers", "shipping_address", "ssn", "ssn_source", "tenant", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ban_status"]) -> typing.Union['BanStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_time"]) -> typing.Union[MetaOapg.properties.creation_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_accounts"]) -> typing.Union[MetaOapg.properties.has_accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kyc_exempt"]) -> typing.Union[MetaOapg.properties.kyc_exempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kyc_last_run"]) -> typing.Union[MetaOapg.properties.kyc_last_run, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kyc_status"]) -> typing.Union['CustomerKycStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_updated_time"]) -> typing.Union[MetaOapg.properties.last_updated_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legal_address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middle_name"]) -> typing.Union[MetaOapg.properties.middle_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> typing.Union[MetaOapg.properties.note, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> typing.Union[MetaOapg.properties.phone_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["related_customers"]) -> typing.Union[MetaOapg.properties.related_customers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn_source"]) -> typing.Union['SsnSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenant"]) -> typing.Union[MetaOapg.properties.tenant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ban_status", "creation_time", "email", "has_accounts", "id", "kyc_exempt", "kyc_last_run", "kyc_status", "last_updated_time", "legal_address", "metadata", "middle_name", "note", "phone_number", "related_customers", "shipping_address", "ssn", "ssn_source", "tenant", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ban_status: typing.Union['BanStatus', schemas.Unset] = schemas.unset,
        creation_time: typing.Union[MetaOapg.properties.creation_time, str, datetime, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        has_accounts: typing.Union[MetaOapg.properties.has_accounts, bool, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        kyc_exempt: typing.Union[MetaOapg.properties.kyc_exempt, bool, schemas.Unset] = schemas.unset,
        kyc_last_run: typing.Union[MetaOapg.properties.kyc_last_run, str, datetime, schemas.Unset] = schemas.unset,
        kyc_status: typing.Union['CustomerKycStatus', schemas.Unset] = schemas.unset,
        last_updated_time: typing.Union[MetaOapg.properties.last_updated_time, str, datetime, schemas.Unset] = schemas.unset,
        legal_address: typing.Union['Address', schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        middle_name: typing.Union[MetaOapg.properties.middle_name, str, schemas.Unset] = schemas.unset,
        note: typing.Union[MetaOapg.properties.note, str, schemas.Unset] = schemas.unset,
        phone_number: typing.Union[MetaOapg.properties.phone_number, str, schemas.Unset] = schemas.unset,
        related_customers: typing.Union[MetaOapg.properties.related_customers, list, tuple, schemas.Unset] = schemas.unset,
        shipping_address: typing.Union['Address', schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        ssn_source: typing.Union['SsnSource', schemas.Unset] = schemas.unset,
        tenant: typing.Union[MetaOapg.properties.tenant, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BasePerson':
        return super().__new__(
            cls,
            *_args,
            ban_status=ban_status,
            creation_time=creation_time,
            email=email,
            has_accounts=has_accounts,
            id=id,
            kyc_exempt=kyc_exempt,
            kyc_last_run=kyc_last_run,
            kyc_status=kyc_status,
            last_updated_time=last_updated_time,
            legal_address=legal_address,
            metadata=metadata,
            middle_name=middle_name,
            note=note,
            phone_number=phone_number,
            related_customers=related_customers,
            shipping_address=shipping_address,
            ssn=ssn,
            ssn_source=ssn_source,
            tenant=tenant,
            _configuration=_configuration,
            **kwargs,
        )

from synctera_client.model.address import Address
from synctera_client.model.ban_status import BanStatus
from synctera_client.model.customer_kyc_status import CustomerKycStatus
from synctera_client.model.relationship1 import Relationship1
from synctera_client.model.ssn_source import SsnSource
