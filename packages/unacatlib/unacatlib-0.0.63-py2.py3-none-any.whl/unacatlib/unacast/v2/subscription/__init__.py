# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/v2/subscription/billing_account.proto, unacast/v2/subscription/data_subscription_service.proto, unacast/v2/subscription/location_set.proto, unacast/v2/subscription/subscription.proto, unacast/v2/subscription/subscription_status.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ... import unatype as __unatype__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class SubscriptionAccessKind(betterproto.Enum):
    ACCESS_UNSPECIFIED = 0
    DESCRIPTIVE = 3
    FREE = 6
    PARTIAL = 9
    UNRESTRICTED = 15


class LocationType(betterproto.Enum):
    NOT_SET = 0
    PLACES = 1
    ZIP = 2
    CBSA = 3
    STATE = 4
    COUNTY = 5
    TRACT = 6
    VENUES = 7
    CBG = 8


@dataclass(eq=False, repr=False)
class SubscriptionStatus(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    additional_subscription_ids: List[str] = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(3)
    current_access_kind: "SubscriptionAccessKind" = betterproto.enum_field(5)
    resource_name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class BillingAccount(betterproto.Message):
    id: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(3)
    display_name: str = betterproto.string_field(4)
    members: List["BillingAccountMember"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BillingAccountMember(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BillingAccountSpec(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Subscription(betterproto.Message):
    id: str = betterproto.string_field(1)
    sku: str = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(5)
    expire_time_string: str = betterproto.string_field(6)
    created_time_string: str = betterproto.string_field(7)
    billing_account: "BillingAccount" = betterproto.message_field(10)
    resources: List["ResourceSubscription"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class SubscriptionSpec(betterproto.Message):
    sku: str = betterproto.string_field(1)
    resources: List[str] = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class ResourceSubscription(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    resource_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GeographySelection(betterproto.Message):
    type: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)
    display_name: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LocationSetFilterSpec(betterproto.Message):
    filter_key: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(2)
    address_component_id: str = betterproto.string_field(3)
    catalog_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class LocationSetGeographySpec(betterproto.Message):
    geo_key: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(2)
    address_component_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LocationSetSpec(betterproto.Message):
    location_type: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(2)
    filter_options: List["LocationSetFilterSpec"] = betterproto.message_field(3)
    available_geographies: List["LocationSetGeographySpec"] = betterproto.message_field(
        4
    )


@dataclass(eq=False, repr=False)
class LocationSetFilter(betterproto.Message):
    filter_key: str = betterproto.string_field(1)
    included_values: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LocationSet(betterproto.Message):
    location_type: str = betterproto.string_field(1)
    geographies: List["GeographySelection"] = betterproto.message_field(2)
    related_geographies: List["GeographySelection"] = betterproto.message_field(4)
    filters: List["LocationSetFilter"] = betterproto.message_field(3)
    related_feature_filters: List["LocationSetFilter"] = betterproto.message_field(5)
    places_params: "PlacesParameters" = betterproto.message_field(101)


@dataclass(eq=False, repr=False)
class PlacesParameters(betterproto.Message):
    """Deprecated - remove once LocationSet has been properly adjusted"""

    naics: "ValueList" = betterproto.message_field(1, group="naics_brands")
    brands: "ValueList" = betterproto.message_field(2, group="naics_brands")
    regions: "ValueList" = betterproto.message_field(3)
    msas: "ValueList" = betterproto.message_field(4)
    countries: "ValueList" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ValueList(betterproto.Message):
    values: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ListAvailableLocationTypesRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    catalog_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ListAvailableLocationTypesResponse(betterproto.Message):
    location_types: List["LocationSetSpec"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateDataSubscriptionRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    location_type: "LocationType" = betterproto.enum_field(2)
    location_set: "LocationSet" = betterproto.message_field(3)
    dataset_config: "DataSetConfig" = betterproto.message_field(4)
    start_date: "__unatype__.Date" = betterproto.message_field(5)
    end_date: "__unatype__.Date" = betterproto.message_field(6)
    display_name: str = betterproto.string_field(7)
    description: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CreateDataSubscriptionResponse(betterproto.Message):
    data_subscription: "DataSubscription" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DataSubscription(betterproto.Message):
    id: str = betterproto.string_field(1)
    billing_account_id: str = betterproto.string_field(2)
    location_type: "LocationType" = betterproto.enum_field(3)
    location_set: "LocationSet" = betterproto.message_field(4)
    dataset: "DataSetConfig" = betterproto.message_field(5)
    start_date: "__unatype__.Date" = betterproto.message_field(6)
    end_date: "__unatype__.Date" = betterproto.message_field(7)
    creation_time: str = betterproto.string_field(8)
    expiry_time: str = betterproto.string_field(9)
    location_count: int = betterproto.int32_field(10)
    display_name: str = betterproto.string_field(11)
    description: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class DataSetConfig(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    dataset_id: str = betterproto.string_field(2)
    metric_ids: List[str] = betterproto.string_field(3)
    addons: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class DataSet(betterproto.Message):
    catalog_id: str = betterproto.string_field(1)
    location_type: "LocationType" = betterproto.enum_field(2)
    dataset_id: str = betterproto.string_field(3)
    available_metrics: List["DataSetMetricInfo"] = betterproto.message_field(6)
    available_addons: List[str] = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class DataSetMetricInfo(betterproto.Message):
    metric_id: str = betterproto.string_field(1)
    display_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDatasetsRequest(betterproto.Message):
    location_type: "LocationType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class GetDatasetsResponse(betterproto.Message):
    datasets: List["DataSet"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListDataSubscriptionsRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    include_expired: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class ListDataSubscriptionsResponse(betterproto.Message):
    data_subscriptions: List["DataSubscription"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeliverDataSubscriptionRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    data_subcription_id: str = betterproto.string_field(2)
    storage_access_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class DeliverDataSubscriptionResponse(betterproto.Message):
    delivery_ids: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CancelDataSubscriptionRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    data_subscription_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CancelDataSubscriptionResponse(betterproto.Message):
    data_subscription: "DataSubscription" = betterproto.message_field(1)
    paused_data_deliveries_ids: List[str] = betterproto.string_field(2)
    errors: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetLocationSetCountRequest(betterproto.Message):
    location_set: "LocationSet" = betterproto.message_field(1)
    dataset_config: "DataSetConfig" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetLocationSetCountResponse(betterproto.Message):
    location_count: int = betterproto.int32_field(1)


class DataSubscriptionServiceStub(betterproto.ServiceStub):
    async def list_available_location_types(
        self,
        list_available_location_types_request: "ListAvailableLocationTypesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListAvailableLocationTypesResponse":
        return await self._unary_unary(
            "/unacast.v2.subscription.DataSubscriptionService/ListAvailableLocationTypes",
            list_available_location_types_request,
            ListAvailableLocationTypesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_data_subscription(
        self,
        create_data_subscription_request: "CreateDataSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateDataSubscriptionResponse":
        return await self._unary_unary(
            "/unacast.v2.subscription.DataSubscriptionService/CreateDataSubscription",
            create_data_subscription_request,
            CreateDataSubscriptionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_datasets(
        self,
        get_datasets_request: "GetDatasetsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDatasetsResponse":
        return await self._unary_unary(
            "/unacast.v2.subscription.DataSubscriptionService/GetDatasets",
            get_datasets_request,
            GetDatasetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_data_subscriptions(
        self,
        list_data_subscriptions_request: "ListDataSubscriptionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListDataSubscriptionsResponse":
        return await self._unary_unary(
            "/unacast.v2.subscription.DataSubscriptionService/ListDataSubscriptions",
            list_data_subscriptions_request,
            ListDataSubscriptionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deliver_data_subscription(
        self,
        deliver_data_subscription_request: "DeliverDataSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeliverDataSubscriptionResponse":
        return await self._unary_unary(
            "/unacast.v2.subscription.DataSubscriptionService/DeliverDataSubscription",
            deliver_data_subscription_request,
            DeliverDataSubscriptionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_data_subscription(
        self,
        cancel_data_subscription_request: "CancelDataSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CancelDataSubscriptionResponse":
        return await self._unary_unary(
            "/unacast.v2.subscription.DataSubscriptionService/CancelDataSubscription",
            cancel_data_subscription_request,
            CancelDataSubscriptionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_location_set_count(
        self,
        get_location_set_count_request: "GetLocationSetCountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLocationSetCountResponse":
        return await self._unary_unary(
            "/unacast.v2.subscription.DataSubscriptionService/GetLocationSetCount",
            get_location_set_count_request,
            GetLocationSetCountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class DataSubscriptionServiceBase(ServiceBase):
    async def list_available_location_types(
        self, list_available_location_types_request: "ListAvailableLocationTypesRequest"
    ) -> "ListAvailableLocationTypesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_data_subscription(
        self, create_data_subscription_request: "CreateDataSubscriptionRequest"
    ) -> "CreateDataSubscriptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_datasets(
        self, get_datasets_request: "GetDatasetsRequest"
    ) -> "GetDatasetsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_data_subscriptions(
        self, list_data_subscriptions_request: "ListDataSubscriptionsRequest"
    ) -> "ListDataSubscriptionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deliver_data_subscription(
        self, deliver_data_subscription_request: "DeliverDataSubscriptionRequest"
    ) -> "DeliverDataSubscriptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_data_subscription(
        self, cancel_data_subscription_request: "CancelDataSubscriptionRequest"
    ) -> "CancelDataSubscriptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_location_set_count(
        self, get_location_set_count_request: "GetLocationSetCountRequest"
    ) -> "GetLocationSetCountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_list_available_location_types(
        self,
        stream: "grpclib.server.Stream[ListAvailableLocationTypesRequest, ListAvailableLocationTypesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_available_location_types(request)
        await stream.send_message(response)

    async def __rpc_create_data_subscription(
        self,
        stream: "grpclib.server.Stream[CreateDataSubscriptionRequest, CreateDataSubscriptionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_data_subscription(request)
        await stream.send_message(response)

    async def __rpc_get_datasets(
        self, stream: "grpclib.server.Stream[GetDatasetsRequest, GetDatasetsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_datasets(request)
        await stream.send_message(response)

    async def __rpc_list_data_subscriptions(
        self,
        stream: "grpclib.server.Stream[ListDataSubscriptionsRequest, ListDataSubscriptionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_data_subscriptions(request)
        await stream.send_message(response)

    async def __rpc_deliver_data_subscription(
        self,
        stream: "grpclib.server.Stream[DeliverDataSubscriptionRequest, DeliverDataSubscriptionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.deliver_data_subscription(request)
        await stream.send_message(response)

    async def __rpc_cancel_data_subscription(
        self,
        stream: "grpclib.server.Stream[CancelDataSubscriptionRequest, CancelDataSubscriptionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_data_subscription(request)
        await stream.send_message(response)

    async def __rpc_get_location_set_count(
        self,
        stream: "grpclib.server.Stream[GetLocationSetCountRequest, GetLocationSetCountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_location_set_count(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.v2.subscription.DataSubscriptionService/ListAvailableLocationTypes": grpclib.const.Handler(
                self.__rpc_list_available_location_types,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListAvailableLocationTypesRequest,
                ListAvailableLocationTypesResponse,
            ),
            "/unacast.v2.subscription.DataSubscriptionService/CreateDataSubscription": grpclib.const.Handler(
                self.__rpc_create_data_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateDataSubscriptionRequest,
                CreateDataSubscriptionResponse,
            ),
            "/unacast.v2.subscription.DataSubscriptionService/GetDatasets": grpclib.const.Handler(
                self.__rpc_get_datasets,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatasetsRequest,
                GetDatasetsResponse,
            ),
            "/unacast.v2.subscription.DataSubscriptionService/ListDataSubscriptions": grpclib.const.Handler(
                self.__rpc_list_data_subscriptions,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListDataSubscriptionsRequest,
                ListDataSubscriptionsResponse,
            ),
            "/unacast.v2.subscription.DataSubscriptionService/DeliverDataSubscription": grpclib.const.Handler(
                self.__rpc_deliver_data_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeliverDataSubscriptionRequest,
                DeliverDataSubscriptionResponse,
            ),
            "/unacast.v2.subscription.DataSubscriptionService/CancelDataSubscription": grpclib.const.Handler(
                self.__rpc_cancel_data_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelDataSubscriptionRequest,
                CancelDataSubscriptionResponse,
            ),
            "/unacast.v2.subscription.DataSubscriptionService/GetLocationSetCount": grpclib.const.Handler(
                self.__rpc_get_location_set_count,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLocationSetCountRequest,
                GetLocationSetCountResponse,
            ),
        }
