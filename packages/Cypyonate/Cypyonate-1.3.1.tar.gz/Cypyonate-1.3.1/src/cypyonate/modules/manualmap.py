from .. import cypyonate as cypy
import os
import win32
import win32api
import win32process
import win32con
import win32event
import pefile
import ctypes
import time

_mmdata_fields = [("pLoadLibraryA", ctypes.c_void_p),
                  ("pGetProcAddress", ctypes.c_void_p),
                  ("pbase", ctypes.c_void_p),
                  ("hMod", ctypes.c_void_p),
                  ("fdwReasonParam", ctypes.c_int32),
                  ("reservedParam", ctypes.c_void_p),
                  ("SEHSupport", ctypes.c_bool)]

if cypy.is64bit():
	_mmdata_fields.insert(2, ("pRtlAddFunctionTable", ctypes.c_void_p))


# Adapted from https://github.com/TheCruZ/Simple-Manual-Map-Injector
class ManualMap(cypy.Module):
	class Data(ctypes.Structure):
		_fields_ = _mmdata_fields

	def __init__(self):
		super().__init__(name="Manual Map", frmat=(
			"manualmap", "mm"), desc="Manual mapping injection")

	def add_to_argparse(self, parser):
		arggroup = parser.add_argument_group(
			title=self.description.lower(), prefix_chars="-/")
		arggroup.add_argument("--clear-header", dest="clear_header", metavar="clear_header", action="store", default=True, choices=(False, True), type=int,
                        help="clear the header of the payload after injection")
		arggroup.add_argument("--clear-unneeded-sections", dest="clear_unneeded_sections", metavar="clear_unneeded_sections", action="store", default=True, choices=(False, True), type=int,
                        help="clear unneeded sections for the target binary to run after injection")
		arggroup.add_argument("--sehsupport", dest="sehsupport", metavar="sehsupport", action="store", default=True, choices=(False, True), type=int,
                        help="if clearing unneeded sections, clear .pdata as well")
		arggroup.add_argument("--adjust-protections", dest="adjust_protections", metavar="adjust_protections", action="store", default=True, choices=(False, True), type=int,
                        help="adjust the protections of target binary after injection")
		arggroup.add_argument("--fdwreason", dest="fdwreason", metavar="fdwReason", type=int, default=1,
                        help="the fdwReason parameter to pass to DllMain")
		arggroup.add_argument("--lpvreserved", dest="lpvreserved", metavar="lpvReserved", type=int, default=0,
                        help="the lpvReserved parameter to pass to DllMain")
		arggroup.add_argument("--check-time", dest="check_time", metavar="check_time", type=float, default=1.0,
                        help="time to wait between checks for shellcode to finish execution, if applicable")

	def inject(self, handler: cypy.Cypyonate, target: str, payload: str, verbose: bool):
		is64 = cypy.is64bit()
		proc = cypy.get_process(target)
		if not proc:
			cypy.printe(f"Could not find process {target}")
			return

		# Get the target process
		b = payload
		if not handler.reflective:
			with open(payload, "rb") as f:
				b = f.read()

		pe = pefile.PE(data=b)

		currentarch = pe.FILE_HEADER.Machine
		if (is64 and currentarch == pefile.MACHINE_TYPE["IMAGE_FILE_MACHINE_I386"]) or (not is64 and currentarch == pefile.MACHINE_TYPE["IMAGE_FILE_MACHINE_AMD64"]):
			cypy.printe(
				f"Cannot inject {payload} into {target} because payload is {'32-bit' if is64 else '64-bit'}")
			return

		targetbase = win32process.VirtualAllocEx(
			proc, 0, pe.OPTIONAL_HEADER.SizeOfImage, win32con.MEM_COMMIT | win32con.MEM_RESERVE, win32con.PAGE_EXECUTE_READWRITE)
		if not targetbase:
			cypy.printe("Could not allocate memory")
			return

		cypy.printv(
			f"Allocated {pe.OPTIONAL_HEADER.SizeOfImage} bytes at {targetbase:X}")

		win32process.WriteProcessMemory(proc, targetbase, b[:0x1000])
		cypy.printv("Wrote payload header to target process")

		for section in pe.sections:
			if section.SizeOfRawData > 0:
				win32process.WriteProcessMemory(proc, targetbase + section.VirtualAddress,
				                                b[section.PointerToRawData:section.PointerToRawData + section.SizeOfRawData])

		cypy.printv("Wrote payload sections to target process")

		mmdata = ManualMap.Data()
		mmdata.pbase = ctypes.c_void_p(targetbase)
		mmdata.hMod = ctypes.c_void_p(0)
		mmdata.fdwReasonParam = ctypes.c_int32(handler.fdwreason)
		mmdata.lpReservedParam = ctypes.c_void_p(handler.lpvreserved)
		mmdata.SEHSupport = ctypes.c_bool(handler.sehsupport)

		# Get the addresses of the functions we need
		kernel32 = win32api.GetModuleHandle("kernel32.dll")
		mmdata.pLoadLibraryA = ctypes.c_void_p(
			win32api.GetProcAddress(kernel32, "LoadLibraryA"))
		mmdata.pGetProcAddress = ctypes.c_void_p(
			win32api.GetProcAddress(kernel32, "GetProcAddress"))

		if is64:
			mmdata.pRtlAddFunctionTable = ctypes.c_void_p(
				win32api.GetProcAddress(kernel32, "RtlAddFunctionTable"))

		cypy.printv(
			f"Got addresses of LoadLibraryA and GetProcAddress{' and RtlAddFunctionTable' if is64 else ''}")

		mappingdataalloc = win32process.VirtualAllocEx(proc, 0, ctypes.sizeof(
			mmdata), win32con.MEM_COMMIT | win32con.MEM_RESERVE, win32con.PAGE_EXECUTE_READWRITE)

		# Convert mmdata to a byte array
		mappingdata = ctypes.string_at(
			ctypes.addressof(mmdata), ctypes.sizeof(mmdata))
		win32process.WriteProcessMemory(proc, mappingdataalloc, mappingdata)

		shellcodealloc = win32process.VirtualAllocEx(proc, 0, len(
			SHELLCODE), win32con.MEM_COMMIT | win32con.MEM_RESERVE, win32con.PAGE_EXECUTE_READWRITE)
		win32process.WriteProcessMemory(proc, shellcodealloc, SHELLCODE)

		cypy.printv(f"Wrote shellcode to target process at {shellcodealloc:X}")

		thread, _ = win32process.CreateRemoteThread(
			proc, None, 0, shellcodealloc, mappingdataalloc, 0)

		cypy.printc(f"Injected into {target} and waiting for thread to finish")

		win32event.WaitForSingleObject(thread, handler.duration)

		win32api.CloseHandle(thread)

		check = 0
		while not check:
			cypy.printv("Checking if shellcode finished execution")
			exitcode = win32process.GetExitCodeProcess(proc)
			if exitcode != win32con.STILL_ACTIVE:
				cypy.printe(f"Process exited with code {exitcode}")
				return

			buffer = win32process.ReadProcessMemory(
				proc, mappingdataalloc, ctypes.sizeof(ManualMap.Data))
			mmdata2 = ManualMap.Data.from_buffer_copy(buffer)
			check = mmdata2.hMod

			if check == 0x404040:
				cypy.printe(f"Process exited with code {exitcode}")
				win32process.VirtualFreeEx(proc, shellcodealloc, 0, win32con.MEM_RELEASE)
				win32process.VirtualFreeEx(proc, mappingdataalloc, 0, win32con.MEM_RELEASE)
				win32process.VirtualFreeEx(proc, targetbase, 0, win32con.MEM_RELEASE)
				return
			elif check == 0x505050:
				cypy.printe("Shit happened man")
				return

			time.sleep(handler.check_time)

		cypy.printv(f"Shellcode finished execution, hMod = {check:X}")

		if handler.clear_header:
			win32process.WriteProcessMemory(proc, targetbase, b"\x00" * 0x1000)
			cypy.printv("Cleared payload header from target process")

		if handler.clear_unneeded_sections:
			for section in pe.sections:
				if section.SizeOfRawData > 0:
					if (handler.sehsupport and section.Name == b".pdata\x00\x00") or section.Name in (b".rsrc\x00\x00\x00", b".reloc\x00\x00"):
						win32process.WriteProcessMemory(
							proc, targetbase + section.VirtualAddress, b"\x00" * section.SizeOfRawData)

			cypy.printv("Cleared unneeded sections from target process")

		if handler.adjust_protections:
			for section in pe.sections:
				if section.Misc_VirtualSize:
					if section.Characteristics & pefile.SECTION_CHARACTERISTICS["IMAGE_SCN_MEM_EXECUTE"]:
						newprotect = win32con.PAGE_EXECUTE_READ
					elif section.Characteristics & pefile.SECTION_CHARACTERISTICS["IMAGE_SCN_MEM_WRITE"]:
						newprotect = win32con.PAGE_READWRITE

					old = ctypes.c_ulong()
					ctypes.windll.kernel32.VirtualProtectEx(int(proc), ctypes.cast(
						targetbase + section.VirtualAddress, ctypes.c_void_p), section.Misc_VirtualSize, newprotect, ctypes.byref(old))

			old = ctypes.c_ulong()
			ctypes.windll.kernel32.VirtualProtectEx(
				int(proc), ctypes.cast(targetbase, ctypes.c_void_p), pe.sections[0].VirtualAddress, win32con.PAGE_READONLY, ctypes.byref(old))

			cypy.printv("Adjusted protections of target process")

		win32process.WriteProcessMemory(
			proc, shellcodealloc, b"\x00" * len(SHELLCODE))
		win32process.VirtualFreeEx(proc, shellcodealloc, 0, win32con.MEM_RELEASE)
		win32process.VirtualFreeEx(proc, mappingdataalloc, 0, win32con.MEM_RELEASE)

		cypy.printc(f"Injection complete")


ManualMap()

# :(
if cypy.is64bit():
	SHELLCODE = b"\x48\x89\x4C\x24\x08\x48\x81\xEC\x18\x01\x00\x00\x48\x83\xBC\x24\x20\x01\x00\x00\x00\x75\x15\x48\x8B" +\
            b"\x84\x24\x20\x01\x00\x00\x48\xC7\x40\x20\x40\x40\x40\x00\xE9\x1B\x05\x00\x00\x48\x8B\x84\x24\x20\x01" +\
            b"\x00\x00\x48\x8B\x40\x18\x48\x89\x44\x24\x28\x48\x8B\x44\x24\x28\x48\x63\x40\x3C\x48\x8B\x4C\x24\x28" +\
            b"\x48\x8D\x44\x01\x18\x48\x89\x44\x24\x30\x48\x8B\x84\x24\x20\x01\x00\x00\x48\x8B\x00\x48\x89\x84\x24" +\
            b"\xA8\x00\x00\x00\x48\x8B\x84\x24\x20\x01\x00\x00\x48\x8B\x40\x08\x48\x89\x84\x24\x90\x00\x00\x00\x48" +\
            b"\x8B\x84\x24\x20\x01\x00\x00\x48\x8B\x40\x10\x48\x89\x84\x24\xE8\x00\x00\x00\x48\x8B\x44\x24\x30\x8B" +\
            b"\x40\x10\x48\x8B\x4C\x24\x28\x48\x03\xC8\x48\x8B\xC1\x48\x89\x84\x24\xF8\x00\x00\x00\x48\x8B\x44\x24" +\
            b"\x30\x48\x8B\x40\x18\x48\x8B\x4C\x24\x28\x48\x2B\xC8\x48\x8B\xC1\x48\x89\x84\x24\x80\x00\x00\x00\x48" +\
            b"\x83\xBC\x24\x80\x00\x00\x00\x00\x0F\x84\x51\x01\x00\x00\xB8\x08\x00\x00\x00\x48\x6B\xC0\x05\x48\x8B" +\
            b"\x4C\x24\x30\x83\x7C\x01\x74\x00\x0F\x84\x38\x01\x00\x00\xB8\x08\x00\x00\x00\x48\x6B\xC0\x05\x48\x8B" +\
            b"\x4C\x24\x30\x8B\x44\x01\x70\x48\x8B\x4C\x24\x28\x48\x03\xC8\x48\x8B\xC1\x48\x89\x44\x24\x38\xB8\x08" +\
            b"\x00\x00\x00\x48\x6B\xC0\x05\x48\x8B\x4C\x24\x30\x8B\x44\x01\x74\x48\x8B\x4C\x24\x38\x48\x03\xC8\x48" +\
            b"\x8B\xC1\x48\x89\x84\x24\xA0\x00\x00\x00\x48\x8B\x84\x24\xA0\x00\x00\x00\x48\x39\x44\x24\x38\x0F\x83" +\
            b"\xDE\x00\x00\x00\x48\x8B\x44\x24\x38\x83\x78\x04\x00\x0F\x84\xCF\x00\x00\x00\x48\x8B\x44\x24\x38\x8B" +\
            b"\x40\x04\x48\x83\xE8\x08\x33\xD2\xB9\x02\x00\x00\x00\x48\xF7\xF1\x89\x44\x24\x70\x48\x8B\x44\x24\x38" +\
            b"\x48\x83\xC0\x08\x48\x89\x44\x24\x68\xC7\x44\x24\x48\x00\x00\x00\x00\xEB\x18\x8B\x44\x24\x48\xFF\xC0" +\
            b"\x89\x44\x24\x48\x48\x8B\x44\x24\x68\x48\x83\xC0\x02\x48\x89\x44\x24\x68\x8B\x44\x24\x70\x39\x44\x24" +\
            b"\x48\x74\x5E\x48\x8B\x44\x24\x68\x0F\xB7\x00\xC1\xF8\x0C\x83\xF8\x0A\x75\x4C\x48\x8B\x44\x24\x38\x8B" +\
            b"\x00\x48\x8B\x4C\x24\x28\x48\x03\xC8\x48\x8B\xC1\x48\x8B\x4C\x24\x68\x0F\xB7\x09\x81\xE1\xFF\x0F\x00" +\
            b"\x00\x48\x63\xC9\x48\x03\xC1\x48\x89\x84\x24\x88\x00\x00\x00\x48\x8B\x84\x24\x88\x00\x00\x00\x48\x8B" +\
            b"\x00\x48\x03\x84\x24\x80\x00\x00\x00\x48\x8B\x8C\x24\x88\x00\x00\x00\x48\x89\x01\xEB\x80\x48\x8B\x44" +\
            b"\x24\x38\x8B\x40\x04\x48\x8B\x4C\x24\x38\x48\x03\xC8\x48\x8B\xC1\x48\x89\x44\x24\x38\xE9\x0F\xFF\xFF" +\
            b"\xFF\xB8\x08\x00\x00\x00\x48\x6B\xC0\x01\x48\x8B\x4C\x24\x30\x83\x7C\x01\x74\x00\x0F\x84\x9E\x01\x00" +\
            b"\x00\xB8\x08\x00\x00\x00\x48\x6B\xC0\x01\x48\x8B\x4C\x24\x30\x8B\x44\x01\x70\x48\x8B\x4C\x24\x28\x48" +\
            b"\x03\xC8\x48\x8B\xC1\x48\x89\x44\x24\x50\x48\x8B\x44\x24\x50\x83\x78\x0C\x00\x0F\x84\x6D\x01\x00\x00" +\
            b"\x48\x8B\x44\x24\x50\x8B\x40\x0C\x48\x8B\x4C\x24\x28\x48\x03\xC8\x48\x8B\xC1\x48\x89\x84\x24\xB0\x00" +\
            b"\x00\x00\x48\x8B\x84\x24\xA8\x00\x00\x00\x48\x89\x84\x24\xB8\x00\x00\x00\x48\x8B\x8C\x24\xB0\x00\x00" +\
            b"\x00\xFF\x94\x24\xB8\x00\x00\x00\x48\x89\x84\x24\x98\x00\x00\x00\x48\x8B\x44\x24\x50\x8B\x00\x48\x8B" +\
            b"\x4C\x24\x28\x48\x03\xC8\x48\x8B\xC1\x48\x89\x44\x24\x40\x48\x8B\x44\x24\x50\x8B\x40\x10\x48\x8B\x4C" +\
            b"\x24\x28\x48\x03\xC8\x48\x8B\xC1\x48\x89\x44\x24\x58\x48\x83\x7C\x24\x40\x00\x75\x0A\x48\x8B\x44\x24" +\
            b"\x58\x48\x89\x44\x24\x40\xEB\x1C\x48\x8B\x44\x24\x40\x48\x83\xC0\x08\x48\x89\x44\x24\x40\x48\x8B\x44" +\
            b"\x24\x58\x48\x83\xC0\x08\x48\x89\x44\x24\x58\x48\x8B\x44\x24\x40\x48\x83\x38\x00\x0F\x84\xAA\x00\x00" +\
            b"\x00\x48\x8B\x44\x24\x40\x48\xB9\x00\x00\x00\x00\x00\x00\x00\x80\x48\x8B\x00\x48\x23\xC1\x48\x85\xC0" +\
            b"\x74\x3A\x48\x8B\x84\x24\x90\x00\x00\x00\x48\x89\x84\x24\xC0\x00\x00\x00\x48\x8B\x44\x24\x40\x48\x8B" +\
            b"\x00\x48\x25\xFF\xFF\x00\x00\x48\x8B\xD0\x48\x8B\x8C\x24\x98\x00\x00\x00\xFF\x94\x24\xC0\x00\x00\x00" +\
            b"\x48\x8B\x4C\x24\x58\x48\x89\x01\xEB\x51\x48\x8B\x44\x24\x40\x48\x8B\x00\x48\x8B\x4C\x24\x28\x48\x03" +\
            b"\xC8\x48\x8B\xC1\x48\x89\x84\x24\xC8\x00\x00\x00\x48\x8B\x84\x24\x90\x00\x00\x00\x48\x89\x84\x24\xD0" +\
            b"\x00\x00\x00\x48\x8B\x84\x24\xC8\x00\x00\x00\x48\x83\xC0\x02\x48\x8B\xD0\x48\x8B\x8C\x24\x98\x00\x00" +\
            b"\x00\xFF\x94\x24\xD0\x00\x00\x00\x48\x8B\x4C\x24\x58\x48\x89\x01\xE9\x2B\xFF\xFF\xFF\x48\x8B\x44\x24" +\
            b"\x50\x48\x83\xC0\x14\x48\x89\x44\x24\x50\xE9\x84\xFE\xFF\xFF\xB8\x08\x00\x00\x00\x48\x6B\xC0\x09\x48" +\
            b"\x8B\x4C\x24\x30\x83\x7C\x01\x74\x00\x74\x7F\xB8\x08\x00\x00\x00\x48\x6B\xC0\x09\x48\x8B\x4C\x24\x30" +\
            b"\x8B\x44\x01\x70\x48\x8B\x4C\x24\x28\x48\x03\xC8\x48\x8B\xC1\x48\x89\x84\x24\xD8\x00\x00\x00\x48\x8B" +\
            b"\x84\x24\xD8\x00\x00\x00\x48\x8B\x40\x18\x48\x89\x44\x24\x60\xEB\x0E\x48\x8B\x44\x24\x60\x48\x83\xC0" +\
            b"\x08\x48\x89\x44\x24\x60\x48\x83\x7C\x24\x60\x00\x74\x31\x48\x8B\x44\x24\x60\x48\x83\x38\x00\x74\x26" +\
            b"\x48\x8B\x44\x24\x60\x48\x8B\x00\x48\x89\x84\x24\xE0\x00\x00\x00\x45\x33\xC0\xBA\x01\x00\x00\x00\x48" +\
            b"\x8B\x4C\x24\x28\xFF\x94\x24\xE0\x00\x00\x00\xEB\xB9\xC6\x44\x24\x20\x00\x48\x8B\x84\x24\x20\x01\x00" +\
            b"\x00\x83\x78\x38\x00\x74\x63\xB8\x08\x00\x00\x00\x48\x6B\xC0\x03\x48\x8B\x4C\x24\x30\x48\x8B\x44\x01" +\
            b"\x70\x48\x89\x44\x24\x78\x83\x7C\x24\x7C\x00\x74\x44\x48\x8B\x84\x24\xE8\x00\x00\x00\x48\x89\x84\x24" +\
            b"\xF0\x00\x00\x00\x8B\x44\x24\x7C\x33\xD2\xB9\x0C\x00\x00\x00\x48\xF7\xF1\x8B\x4C\x24\x78\x48\x8B\x54" +\
            b"\x24\x28\x48\x03\xD1\x48\x8B\xCA\x4C\x8B\x44\x24\x28\x8B\xD0\xFF\x94\x24\xF0\x00\x00\x00\x85\xC0\x75" +\
            b"\x05\xC6\x44\x24\x20\x01\x48\x8B\x84\x24\xF8\x00\x00\x00\x48\x89\x84\x24\x00\x01\x00\x00\x48\x8B\x84" +\
            b"\x24\x20\x01\x00\x00\x4C\x8B\x40\x30\x48\x8B\x84\x24\x20\x01\x00\x00\x8B\x50\x28\x48\x8B\x4C\x24\x28" +\
            b"\xFF\x94\x24\x00\x01\x00\x00\x0F\xB6\x44\x24\x20\x85\xC0\x74\x12\x48\x8B\x84\x24\x20\x01\x00\x00\x48" +\
            b"\xC7\x40\x20\x50\x50\x50\x00\xEB\x11\x48\x8B\x84\x24\x20\x01\x00\x00\x48\x8B\x4C\x24\x28\x48\x89\x48" +\
            b"\x20\x48\x81\xC4\x18\x01\x00\x00\xC3"
else:
	SHELLCODE = b"\x55\x8B\xEC\x83\xEC\x68\x83\x7D\x08\x00\x75\x0F\x8B\x45\x08\xC7\x40\x0C\x40\x40\x40\x00\xE9\xAF\x02" +\
            b"\x00\x00\x8B\x4D\x08\x8B\x51\x08\x89\x55\xF8\x8B\x45\xF8\x8B\x48\x3C\x8B\x55\xF8\x8D\x44\x0A\x18\x89" +\
            b"\x45\xF0\x8B\x4D\x08\x8B\x11\x89\x55\xBC\x8B\x45\x08\x8B\x48\x04\x89\x4D\xCC\x8B\x55\xF0\x8B\x45\xF8" +\
            b"\x03\x42\x10\x89\x45\x9C\x8B\x4D\xF0\x8B\x55\xF8\x2B\x51\x1C\x89\x55\xD4\x0F\x84\xD9\x00\x00\x00\xB8" +\
            b"\x08\x00\x00\x00\x6B\xC8\x05\x8B\x55\xF0\x83\x7C\x0A\x64\x00\x0F\x84\xC3\x00\x00\x00\xB8\x08\x00\x00" +\
            b"\x00\x6B\xC8\x05\x8B\x55\xF0\x8B\x45\xF8\x03\x44\x0A\x60\x89\x45\xF4\xB9\x08\x00\x00\x00\x6B\xD1\x05" +\
            b"\x8B\x45\xF0\x8B\x4D\xF4\x03\x4C\x10\x64\x89\x4D\xC4\x8B\x55\xF4\x3B\x55\xC4\x0F\x83\x8D\x00\x00\x00" +\
            b"\x8B\x45\xF4\x83\x78\x04\x00\x0F\x84\x80\x00\x00\x00\x8B\x4D\xF4\x8B\x51\x04\x83\xEA\x08\xD1\xEA\x89" +\
            b"\x55\xC0\x8B\x45\xF4\x83\xC0\x08\x89\x45\xDC\xC7\x45\xD8\x00\x00\x00\x00\xEB\x12\x8B\x4D\xD8\x83\xC1" +\
            b"\x01\x89\x4D\xD8\x8B\x55\xDC\x83\xC2\x02\x89\x55\xDC\x8B\x45\xD8\x3B\x45\xC0\x74\x35\x8B\x4D\xDC\x0F" +\
            b"\xB7\x11\xC1\xFA\x0C\x83\xFA\x03\x75\x25\x8B\x45\xF4\x8B\x4D\xF8\x03\x08\x8B\x55\xDC\x0F\xB7\x02\x25" +\
            b"\xFF\x0F\x00\x00\x03\xC8\x89\x4D\xD0\x8B\x4D\xD0\x8B\x11\x03\x55\xD4\x8B\x45\xD0\x89\x10\xEB\xB1\x8B" +\
            b"\x4D\xF4\x8B\x55\xF4\x03\x51\x04\x89\x55\xF4\xE9\x67\xFF\xFF\xFF\xB8\x08\x00\x00\x00\xC1\xE0\x00\x8B" +\
            b"\x4D\xF0\x83\x7C\x01\x64\x00\x0F\x84\xDE\x00\x00\x00\xBA\x08\x00\x00\x00\xC1\xE2\x00\x8B\x45\xF0\x8B" +\
            b"\x4D\xF8\x03\x4C\x10\x60\x89\x4D\xE8\x8B\x55\xE8\x83\x7A\x0C\x00\x0F\x84\xBC\x00\x00\x00\x8B\x45\xE8" +\
            b"\x8B\x4D\xF8\x03\x48\x0C\x89\x4D\xB8\x8B\x55\xBC\x89\x55\xB4\x8B\x45\xB8\x50\xFF\x55\xB4\x89\x45\xC8" +\
            b"\x8B\x4D\xE8\x8B\x55\xF8\x03\x11\x89\x55\xEC\x8B\x45\xE8\x8B\x4D\xF8\x03\x48\x10\x89\x4D\xE4\x83\x7D" +\
            b"\xEC\x00\x75\x06\x8B\x55\xE4\x89\x55\xEC\xEB\x12\x8B\x45\xEC\x83\xC0\x04\x89\x45\xEC\x8B\x4D\xE4\x83" +\
            b"\xC1\x04\x89\x4D\xE4\x8B\x55\xEC\x83\x3A\x00\x74\x53\x8B\x45\xEC\x8B\x08\x81\xE1\x00\x00\x00\x80\x74" +\
            b"\x20\x8B\x55\xCC\x89\x55\xB0\x8B\x45\xEC\x8B\x08\x81\xE1\xFF\xFF\x00\x00\x51\x8B\x55\xC8\x52\xFF\x55" +\
            b"\xB0\x8B\x4D\xE4\x89\x01\xEB\x24\x8B\x55\xEC\x8B\x45\xF8\x03\x02\x89\x45\xAC\x8B\x4D\xCC\x89\x4D\xA8" +\
            b"\x8B\x55\xAC\x83\xC2\x02\x52\x8B\x45\xC8\x50\xFF\x55\xA8\x8B\x4D\xE4\x89\x01\xEB\x93\x8B\x55\xE8\x83" +\
            b"\xC2\x14\x89\x55\xE8\xE9\x37\xFF\xFF\xFF\xB8\x08\x00\x00\x00\x6B\xC8\x09\x8B\x55\xF0\x83\x7C\x0A\x64" +\
            b"\x00\x74\x4C\xB8\x08\x00\x00\x00\x6B\xC8\x09\x8B\x55\xF0\x8B\x45\xF8\x03\x44\x0A\x60\x89\x45\xA4\x8B" +\
            b"\x4D\xA4\x8B\x51\x0C\x89\x55\xE0\xEB\x09\x8B\x45\xE0\x83\xC0\x04\x89\x45\xE0\x83\x7D\xE0\x00\x74\x1D" +\
            b"\x8B\x4D\xE0\x83\x39\x00\x74\x15\x8B\x55\xE0\x8B\x02\x89\x45\xA0\x6A\x00\x6A\x01\x8B\x4D\xF8\x51\xFF" +\
            b"\x55\xA0\xEB\xD4\xC6\x45\xFF\x00\x8B\x55\x9C\x89\x55\x98\x8B\x45\x08\x8B\x48\x14\x51\x8B\x55\x08\x8B" +\
            b"\x42\x10\x50\x8B\x4D\xF8\x51\xFF\x55\x98\x0F\xB6\x55\xFF\x85\xD2\x74\x0C\x8B\x45\x08\xC7\x40\x0C\x50" +\
            b"\x50\x50\x00\xEB\x09\x8B\x4D\x08\x8B\x55\xF8\x89\x51\x0C\x8B\xE5\x5D\xC2\x04\x00"
