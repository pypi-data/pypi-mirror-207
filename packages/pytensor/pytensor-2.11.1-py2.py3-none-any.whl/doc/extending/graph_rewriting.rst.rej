diff a/doc/extending/graph_rewriting.rst b/doc/extending/graph_rewriting.rst	(rejected hunks)
@@ -152,17 +152,17 @@ nothing.
 
 Now, we test the rewriter:
 
->>> from pytensor.scalar import float64, add, mul, true_div
+>>> from pytensor.scalar import float64, add, mul, true_divide
 >>> x = float64('x')
 >>> y = float64('y')
 >>> z = float64('z')
->>> a = add(z, mul(true_div(mul(y, x), y), true_div(z, x)))
+>>> a = add(z, mul(true_divide(mul(y, x), y), true_divide(z, x)))
 >>> e = pytensor.graph.fg.FunctionGraph([x, y, z], [a])
 >>> e
-FunctionGraph(add(z, mul(true_div(mul(y, x), y), true_div(z, x))))
+FunctionGraph(add(z, mul(true_divide(mul(y, x), y), true_divide(z, x))))
 >>> simplify.rewrite(e)
 >>> e
-FunctionGraph(add(z, mul(x, true_div(z, x))))
+FunctionGraph(add(z, mul(x, true_divide(z, x))))
 
 You can check what happens if you put many
 instances of :math:`\frac{xy}{y}` in the graph. Note that it sometimes
@@ -172,13 +172,13 @@ rewrite you wrote. For example, consider the following:
 >>> x = float64('x')
 >>> y = float64('y')
 >>> z = float64('z')
->>> a = true_div(mul(add(y, z), x), add(y, z))
+>>> a = true_divide(mul(add(y, z), x), add(y, z))
 >>> e = pytensor.graph.fg.FunctionGraph([x, y, z], [a])
 >>> e
-FunctionGraph(true_div(mul(add(y, z), x), add(y, z)))
+FunctionGraph(true_divide(mul(add(y, z), x), add(y, z)))
 >>> simplify.rewrite(e)
 >>> e
-FunctionGraph(true_div(mul(add(y, z), x), add(y, z)))
+FunctionGraph(true_divide(mul(add(y, z), x), add(y, z)))
 
 Nothing happened here. The reason is: ``add(y, z) != add(y,
 z)``. That is the case for efficiency reasons. To fix this problem we
@@ -261,15 +261,15 @@ subset of them) and applies one or several node rewriters.
 >>> x = float64('x')
 >>> y = float64('y')
 >>> z = float64('z')
->>> a = add(z, mul(true_div(mul(y, x), y), true_div(z, x)))
+>>> a = add(z, mul(true_divide(mul(y, x), y), true_divide(z, x)))
 >>> e = pytensor.graph.fg.FunctionGraph([x, y, z], [a])
 >>> e
-FunctionGraph(add(z, mul(true_div(mul(y, x), y), true_div(z, x))))
+FunctionGraph(add(z, mul(true_divide(mul(y, x), y), true_divide(z, x))))
 >>> simplify = pytensor.graph.rewriting.basic.WalkingGraphRewriter(local_simplify)
 >>> simplify.rewrite(e)
 (<pytensor.graph.rewriting.basic.WalkingGraphRewriter object at 0x...>, 1, 5, 3, ..., ..., ...)
 >>> e
-FunctionGraph(add(z, mul(x, true_div(z, x))))
+FunctionGraph(add(z, mul(x, true_divide(z, x))))
 
 :class:`SubstitutionNodeRewriter`, :class:`RemovalNodeRewriter`, :class:`PatternNodeRewriter`
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
