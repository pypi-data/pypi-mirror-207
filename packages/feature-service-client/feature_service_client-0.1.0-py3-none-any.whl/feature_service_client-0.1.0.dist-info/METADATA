Metadata-Version: 2.1
Name: feature-service-client
Version: 0.1.0
Summary: python client for talking to feature service
Author: Long Yao
Author-email: l2yao@tripadvisor.com
Requires-Python: >=3.6,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Description-Content-Type: text/markdown

# feature-service-client
This is feature service

This Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: 1.0
- Package version: 1.0.0
- Build package: org.openapitools.codegen.languages.PythonClientCodegen

## Requirements.

Python >= 3.6

## Installation & Usage
### pip install

If the python package is hosted on a repository, you can install directly using:

```sh
pip install git+https://gitlab.dev.tripadvisor.com/tamg-ml/feature-service-client.git
```
(you may need to run `pip` with root permission: `sudo pip install git+https://gitlab.dev.tripadvisor.com/tamg-ml/feature-service-client.git`)

Then import the package:
```python
import feature_service_client
```

### Setuptools

Install via [Setuptools](http://pypi.python.org/pypi/setuptools).

```sh
python setup.py install --user
```
(or `sudo python setup.py install` to install the package for all users)

Then import the package:
```python
import feature_service_client
```

## Getting Started

Please follow the [installation procedure](#installation--usage) and then run the following:

```python

import time
import feature_service_client
from pprint import pprint
from feature_service_client.api import default_api
from feature_service_client.model.columnar_features_response import ColumnarFeaturesResponse
from feature_service_client.model.features_request import FeaturesRequest
from feature_service_client.model.seldon_features_request import SeldonFeaturesRequest
# Defining the host is optional and defaults to http://localhost
# See configuration.py for a list of all supported configuration parameters.
configuration = feature_service_client.Configuration(
    host = "http://localhost"
)



# Enter a context with an instance of the API client
with feature_service_client.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = default_api.DefaultApi(api_client)
    features_request = FeaturesRequest(
        features=[
            "features_example",
        ],
        entity_ids=[
            "entity_ids_example",
        ],
        user_id="user_id_example",
        facebook_id="facebook_id_example",
        ta_unique_id="ta_unique_id_example",
        context={},
        client_name="client_name_example",
    ) # FeaturesRequest | 

    try:
        api_response = api_instance.get_columnar_features(features_request)
        pprint(api_response)
    except feature_service_client.ApiException as e:
        print("Exception when calling DefaultApi->get_columnar_features: %s\n" % e)
```

## Documentation for API Endpoints

All URIs are relative to *http://localhost*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*DefaultApi* | [**get_columnar_features**](docs/DefaultApi.md#get_columnar_features) | **POST** /v1/featureservice/columnarfeatures | 
*DefaultApi* | [**get_columnar_features_for_seldon**](docs/DefaultApi.md#get_columnar_features_for_seldon) | **POST** /v1/featureservice/getColumnarFeaturesForSeldon | 
*DefaultApi* | [**get_health**](docs/DefaultApi.md#get_health) | **GET** /v1/featureservice/health | 


## Documentation For Models

 - [ColumnarFeaturesResponse](docs/ColumnarFeaturesResponse.md)
 - [FeatureColumn](docs/FeatureColumn.md)
 - [FeatureRequestData](docs/FeatureRequestData.md)
 - [FeatureValue](docs/FeatureValue.md)
 - [FeaturesRequest](docs/FeaturesRequest.md)
 - [SeldonFeaturesRequest](docs/SeldonFeaturesRequest.md)


## Documentation For Authorization

 All endpoints do not require authorization.

## Author




## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in feature_service_client.apis and feature_service_client.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from feature_service_client.api.default_api import DefaultApi`
- `from feature_service_client.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import feature_service_client
from feature_service_client.apis import *
from feature_service_client.models import *
```


