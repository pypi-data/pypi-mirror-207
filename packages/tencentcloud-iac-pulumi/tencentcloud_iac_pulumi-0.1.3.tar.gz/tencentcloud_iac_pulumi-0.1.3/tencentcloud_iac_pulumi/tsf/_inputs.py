# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApiGroupBindedGatewayDeployGroupArgs',
    'ApplicationServiceConfigListArgs',
    'ApplicationServiceConfigListHealthCheckArgs',
    'ApplicationServiceConfigListPortArgs',
    'ClusterOperationInfoArgs',
    'ClusterOperationInfoAddInstanceArgs',
    'ClusterOperationInfoDestroyArgs',
    'ClusterOperationInfoInitArgs',
    'ContainGroupEnvArgs',
    'ContainGroupEnvValueFromArgs',
    'ContainGroupEnvValueFromFieldRefArgs',
    'ContainGroupEnvValueFromResourceFieldRefArgs',
    'ContainGroupHealthCheckSettingArgs',
    'ContainGroupHealthCheckSettingLivenessProbeArgs',
    'ContainGroupHealthCheckSettingReadinessProbeArgs',
    'ContainGroupProtocolPortArgs',
    'InstancesAttachmentInstanceAdvancedSettingsArgs',
    'LaneLaneGroupListArgs',
    'LaneRuleRuleTagListArgs',
    'TaskAdvanceSettingsArgs',
    'TaskShardArgumentArgs',
    'TaskTaskRuleArgs',
    'UnitRuleUnitRuleItemListArgs',
    'UnitRuleUnitRuleItemListUnitRuleTagListArgs',
]

@pulumi.input_type
class ApiGroupBindedGatewayDeployGroupArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 application_type: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 deploy_group_id: Optional[pulumi.Input[str]] = None,
                 deploy_group_name: Optional[pulumi.Input[str]] = None,
                 group_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[str] application_name: Application Name.
        :param pulumi.Input[str] application_type: Application classification: V: virtual machine application, C: container application.
        :param pulumi.Input[str] cluster_type: Cluster type, C: container, V: virtual machine.
        :param pulumi.Input[str] deploy_group_id: Gateway deployment group ID.
        :param pulumi.Input[str] deploy_group_name: Gateway deployment group name.
        :param pulumi.Input[str] group_status: Deployment group application status, values: Running, Waiting, Paused, Updating, RollingBack, Abnormal, Unknown.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if deploy_group_id is not None:
            pulumi.set(__self__, "deploy_group_id", deploy_group_id)
        if deploy_group_name is not None:
            pulumi.set(__self__, "deploy_group_name", deploy_group_name)
        if group_status is not None:
            pulumi.set(__self__, "group_status", group_status)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        Application Name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application classification: V: virtual machine application, C: container application.
        """
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_type", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster type, C: container, V: virtual machine.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="deployGroupId")
    def deploy_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway deployment group ID.
        """
        return pulumi.get(self, "deploy_group_id")

    @deploy_group_id.setter
    def deploy_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_group_id", value)

    @property
    @pulumi.getter(name="deployGroupName")
    def deploy_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway deployment group name.
        """
        return pulumi.get(self, "deploy_group_name")

    @deploy_group_name.setter
    def deploy_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_group_name", value)

    @property
    @pulumi.getter(name="groupStatus")
    def group_status(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment group application status, values: Running, Waiting, Paused, Updating, RollingBack, Abnormal, Unknown.
        """
        return pulumi.get(self, "group_status")

    @group_status.setter
    def group_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_status", value)


@pulumi.input_type
class ApplicationServiceConfigListArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 ports: pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListPortArgs']]],
                 health_check: Optional[pulumi.Input['ApplicationServiceConfigListHealthCheckArgs']] = None):
        """
        :param pulumi.Input[str] name: Service name.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListPortArgs']]] ports: List of port information.
        :param pulumi.Input['ApplicationServiceConfigListHealthCheckArgs'] health_check: Health check configuration.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListPortArgs']]]:
        """
        List of port information.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListPortArgs']]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['ApplicationServiceConfigListHealthCheckArgs']]:
        """
        Health check configuration.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['ApplicationServiceConfigListHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)


@pulumi.input_type
class ApplicationServiceConfigListHealthCheckArgs:
    def __init__(__self__, *,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: Health check path.
        """
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Health check path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ApplicationServiceConfigListPortArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 target_port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] protocol: Port protocol.
        :param pulumi.Input[int] target_port: Service port.
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Port protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> pulumi.Input[int]:
        """
        Service port.
        """
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ClusterOperationInfoArgs:
    def __init__(__self__, *,
                 add_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoAddInstanceArgs']]]] = None,
                 destroys: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoDestroyArgs']]]] = None,
                 inits: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoInitArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoAddInstanceArgs']]] add_instances: Add the control information of the instance button.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoDestroyArgs']]] destroys: Destroy the control information of the machine.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoInitArgs']]] inits: Initialize the control information of the button.
        """
        if add_instances is not None:
            pulumi.set(__self__, "add_instances", add_instances)
        if destroys is not None:
            pulumi.set(__self__, "destroys", destroys)
        if inits is not None:
            pulumi.set(__self__, "inits", inits)

    @property
    @pulumi.getter(name="addInstances")
    def add_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoAddInstanceArgs']]]]:
        """
        Add the control information of the instance button.
        """
        return pulumi.get(self, "add_instances")

    @add_instances.setter
    def add_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoAddInstanceArgs']]]]):
        pulumi.set(self, "add_instances", value)

    @property
    @pulumi.getter
    def destroys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoDestroyArgs']]]]:
        """
        Destroy the control information of the machine.
        """
        return pulumi.get(self, "destroys")

    @destroys.setter
    def destroys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoDestroyArgs']]]]):
        pulumi.set(self, "destroys", value)

    @property
    @pulumi.getter
    def inits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoInitArgs']]]]:
        """
        Initialize the control information of the button.
        """
        return pulumi.get(self, "inits")

    @inits.setter
    def inits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoInitArgs']]]]):
        pulumi.set(self, "inits", value)


@pulumi.input_type
class ClusterOperationInfoAddInstanceArgs:
    def __init__(__self__, *,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 supported: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] disabled_reason: Reason for not showing.
        :param pulumi.Input[bool] enabled: Is the button clickable.
        :param pulumi.Input[bool] supported: whether to show the button.
        """
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason for not showing.
        """
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the button clickable.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def supported(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to show the button.
        """
        return pulumi.get(self, "supported")

    @supported.setter
    def supported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supported", value)


@pulumi.input_type
class ClusterOperationInfoDestroyArgs:
    def __init__(__self__, *,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 supported: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] disabled_reason: Reason for not showing.
        :param pulumi.Input[bool] enabled: Is the button clickable.
        :param pulumi.Input[bool] supported: whether to show the button.
        """
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason for not showing.
        """
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the button clickable.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def supported(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to show the button.
        """
        return pulumi.get(self, "supported")

    @supported.setter
    def supported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supported", value)


@pulumi.input_type
class ClusterOperationInfoInitArgs:
    def __init__(__self__, *,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 supported: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] disabled_reason: Reason for not showing.
        :param pulumi.Input[bool] enabled: Is the button clickable.
        :param pulumi.Input[bool] supported: whether to show the button.
        """
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason for not showing.
        """
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the button clickable.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def supported(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to show the button.
        """
        return pulumi.get(self, "supported")

    @supported.setter
    def supported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supported", value)


@pulumi.input_type
class ContainGroupEnvArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 value_froms: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromArgs']]]] = None):
        """
        :param pulumi.Input[str] name: environment variable name.
        :param pulumi.Input[str] value: environment variable value.
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromArgs']]] value_froms: k8s ValueFrom.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_froms is not None:
            pulumi.set(__self__, "value_froms", value_froms)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        environment variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        environment variable value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFroms")
    def value_froms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromArgs']]]]:
        """
        k8s ValueFrom.
        """
        return pulumi.get(self, "value_froms")

    @value_froms.setter
    def value_froms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromArgs']]]]):
        pulumi.set(self, "value_froms", value)


@pulumi.input_type
class ContainGroupEnvValueFromArgs:
    def __init__(__self__, *,
                 field_reves: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromFieldRefArgs']]]] = None,
                 resource_field_reves: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromResourceFieldRefArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromFieldRefArgs']]] field_reves: FieldRef for k8s env.
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromResourceFieldRefArgs']]] resource_field_reves: ResourceFieldRef of k8s env.
        """
        if field_reves is not None:
            pulumi.set(__self__, "field_reves", field_reves)
        if resource_field_reves is not None:
            pulumi.set(__self__, "resource_field_reves", resource_field_reves)

    @property
    @pulumi.getter(name="fieldReves")
    def field_reves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromFieldRefArgs']]]]:
        """
        FieldRef for k8s env.
        """
        return pulumi.get(self, "field_reves")

    @field_reves.setter
    def field_reves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromFieldRefArgs']]]]):
        pulumi.set(self, "field_reves", value)

    @property
    @pulumi.getter(name="resourceFieldReves")
    def resource_field_reves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromResourceFieldRefArgs']]]]:
        """
        ResourceFieldRef of k8s env.
        """
        return pulumi.get(self, "resource_field_reves")

    @resource_field_reves.setter
    def resource_field_reves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvValueFromResourceFieldRefArgs']]]]):
        pulumi.set(self, "resource_field_reves", value)


@pulumi.input_type
class ContainGroupEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_path: FieldPath of k8s.
        """
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        """
        FieldPath of k8s.
        """
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


@pulumi.input_type
class ContainGroupEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource: Resource of k8s.
        """
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Resource of k8s.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class ContainGroupHealthCheckSettingArgs:
    def __init__(__self__, *,
                 liveness_probes: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingLivenessProbeArgs']]]] = None,
                 readiness_probes: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingReadinessProbeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingLivenessProbeArgs']]] liveness_probes: live health check.
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingReadinessProbeArgs']]] readiness_probes: readiness health check.
        """
        if liveness_probes is not None:
            pulumi.set(__self__, "liveness_probes", liveness_probes)
        if readiness_probes is not None:
            pulumi.set(__self__, "readiness_probes", readiness_probes)

    @property
    @pulumi.getter(name="livenessProbes")
    def liveness_probes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingLivenessProbeArgs']]]]:
        """
        live health check.
        """
        return pulumi.get(self, "liveness_probes")

    @liveness_probes.setter
    def liveness_probes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingLivenessProbeArgs']]]]):
        pulumi.set(self, "liveness_probes", value)

    @property
    @pulumi.getter(name="readinessProbes")
    def readiness_probes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingReadinessProbeArgs']]]]:
        """
        readiness health check.
        """
        return pulumi.get(self, "readiness_probes")

    @readiness_probes.setter
    def readiness_probes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingReadinessProbeArgs']]]]):
        pulumi.set(self, "readiness_probes", value)


@pulumi.input_type
class ContainGroupHealthCheckSettingLivenessProbeArgs:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[str]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action_type: health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Execute command check mode, the command to execute.
        :param pulumi.Input[int] failure_threshold: Indicates the number of consecutive health check successes for the backend container from success to failure.
        :param pulumi.Input[int] initial_delay_seconds: The time for the container to delay starting the health check.
        :param pulumi.Input[str] path: The request path of the HTTP health check interface.
        :param pulumi.Input[int] period_seconds: The interval at which health checks are performed.
        :param pulumi.Input[int] port: service port.
        :param pulumi.Input[str] scheme: The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
        :param pulumi.Input[int] success_threshold: Indicates the number of consecutive health check successes for the backend container from failure to success.
        :param pulumi.Input[int] timeout_seconds: The maximum timeout for each health check response.
        :param pulumi.Input[str] type: TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
        """
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        """
        health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Execute command check mode, the command to execute.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the number of consecutive health check successes for the backend container from success to failure.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The time for the container to delay starting the health check.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The request path of the HTTP health check interface.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The interval at which health checks are performed.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        service port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the number of consecutive health check successes for the backend container from failure to success.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum timeout for each health check response.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ContainGroupHealthCheckSettingReadinessProbeArgs:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[str]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action_type: health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Execute command check mode, the command to execute.
        :param pulumi.Input[int] failure_threshold: Indicates the number of consecutive health check successes for the backend container from success to failure.
        :param pulumi.Input[int] initial_delay_seconds: The time for the container to delay starting the health check.
        :param pulumi.Input[str] path: The request path of the HTTP health check interface.
        :param pulumi.Input[int] period_seconds: The interval at which health checks are performed.
        :param pulumi.Input[int] port: service port.
        :param pulumi.Input[str] scheme: The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
        :param pulumi.Input[int] success_threshold: Indicates the number of consecutive health check successes for the backend container from failure to success.
        :param pulumi.Input[int] timeout_seconds: The maximum timeout for each health check response.
        :param pulumi.Input[str] type: TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
        """
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        """
        health check method. HTTP: check by HTTP interface; CMD: check by executing command; TCP: check by establishing TCP connection.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Execute command check mode, the command to execute.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the number of consecutive health check successes for the backend container from success to failure.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The time for the container to delay starting the health check.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The request path of the HTTP health check interface.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The interval at which health checks are performed.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        service port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        The inspection protocol used by the HTTP health check method. HTTP and HTTPS are supported.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates the number of consecutive health check successes for the backend container from failure to success.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum timeout for each health check response.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TSF_DEFAULT: tsf default readiness probe. K8S_NATIVE: k8s native probe. If not filled, it defaults to k8s native probe.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ContainGroupProtocolPortArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 target_port: pulumi.Input[int],
                 node_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] port: service port.
        :param pulumi.Input[str] protocol: TCP UDP.
        :param pulumi.Input[int] target_port: container port.
        :param pulumi.Input[int] node_port: host port.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        service port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        TCP UDP.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> pulumi.Input[int]:
        """
        container port.
        """
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_port", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        """
        host port.
        """
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class InstancesAttachmentInstanceAdvancedSettingsArgs:
    def __init__(__self__, *,
                 docker_graph_path: pulumi.Input[str],
                 mount_target: pulumi.Input[str]):
        """
        :param pulumi.Input[str] docker_graph_path: Dockerd --graph specifies the value, default is /var/lib/docker Note: This field may return null, indicating that no valid values can be obtained.
        :param pulumi.Input[str] mount_target: Data disk mount point, data disks are not mounted by default. Data disks with formatted ext3, ext4, xfs file systems will be mounted directly, other file systems or unformatted data disks will be automatically formatted as ext4 and mounted. Please back up your data! This setting does not take effect for cloud servers with no data disks or multiple data disks. Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> pulumi.Input[str]:
        """
        Dockerd --graph specifies the value, default is /var/lib/docker Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> pulumi.Input[str]:
        """
        Data disk mount point, data disks are not mounted by default. Data disks with formatted ext3, ext4, xfs file systems will be mounted directly, other file systems or unformatted data disks will be automatically formatted as ext4 and mounted. Please back up your data! This setting does not take effect for cloud servers with no data disks or multiple data disks. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class LaneLaneGroupListArgs:
    def __init__(__self__, *,
                 entrance: pulumi.Input[bool],
                 group_id: pulumi.Input[str],
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 lane_group_id: Optional[pulumi.Input[str]] = None,
                 lane_id: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] entrance: Whether to enter the application.
        :param pulumi.Input[str] group_id: Deployment group ID.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[str] application_name: application name.
        :param pulumi.Input[str] cluster_type: cluster type.
        :param pulumi.Input[int] create_time: creation time.
        :param pulumi.Input[str] group_name: deployment group name.
        :param pulumi.Input[str] lane_group_id: Swimlane deployment group ID.
        :param pulumi.Input[str] lane_id: Lane ID.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[str] namespace_name: namespace name.
        :param pulumi.Input[int] update_time: update time.
        """
        pulumi.set(__self__, "entrance", entrance)
        pulumi.set(__self__, "group_id", group_id)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if lane_group_id is not None:
            pulumi.set(__self__, "lane_group_id", lane_group_id)
        if lane_id is not None:
            pulumi.set(__self__, "lane_id", lane_id)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def entrance(self) -> pulumi.Input[bool]:
        """
        Whether to enter the application.
        """
        return pulumi.get(self, "entrance")

    @entrance.setter
    def entrance(self, value: pulumi.Input[bool]):
        pulumi.set(self, "entrance", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        Deployment group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        application name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[int]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        deployment group name.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="laneGroupId")
    def lane_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Swimlane deployment group ID.
        """
        return pulumi.get(self, "lane_group_id")

    @lane_group_id.setter
    def lane_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_group_id", value)

    @property
    @pulumi.getter(name="laneId")
    def lane_id(self) -> Optional[pulumi.Input[str]]:
        """
        Lane ID.
        """
        return pulumi.get(self, "lane_id")

    @lane_id.setter
    def lane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_id", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace ID.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[pulumi.Input[str]]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class LaneRuleRuleTagListArgs:
    def __init__(__self__, *,
                 tag_name: pulumi.Input[str],
                 tag_operator: pulumi.Input[str],
                 tag_value: pulumi.Input[str],
                 create_time: Optional[pulumi.Input[int]] = None,
                 lane_rule_id: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] tag_name: label name.
        :param pulumi.Input[str] tag_operator: label operator.
        :param pulumi.Input[str] tag_value: tag value.
        :param pulumi.Input[int] create_time: creation time.
        :param pulumi.Input[str] lane_rule_id: lane rule ID.
        :param pulumi.Input[str] tag_id: label ID.
        :param pulumi.Input[int] update_time: update time.
        """
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "tag_operator", tag_operator)
        pulumi.set(__self__, "tag_value", tag_value)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if lane_rule_id is not None:
            pulumi.set(__self__, "lane_rule_id", lane_rule_id)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> pulumi.Input[str]:
        """
        label name.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter(name="tagOperator")
    def tag_operator(self) -> pulumi.Input[str]:
        """
        label operator.
        """
        return pulumi.get(self, "tag_operator")

    @tag_operator.setter
    def tag_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_operator", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> pulumi.Input[str]:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_value", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[int]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="laneRuleId")
    def lane_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        lane rule ID.
        """
        return pulumi.get(self, "lane_rule_id")

    @lane_rule_id.setter
    def lane_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_rule_id", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        """
        label ID.
        """
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class TaskAdvanceSettingsArgs:
    def __init__(__self__, *,
                 sub_task_concurrency: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] sub_task_concurrency: Subtask single-machine concurrency limit, the default value is 2.
        """
        if sub_task_concurrency is not None:
            pulumi.set(__self__, "sub_task_concurrency", sub_task_concurrency)

    @property
    @pulumi.getter(name="subTaskConcurrency")
    def sub_task_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Subtask single-machine concurrency limit, the default value is 2.
        """
        return pulumi.get(self, "sub_task_concurrency")

    @sub_task_concurrency.setter
    def sub_task_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sub_task_concurrency", value)


@pulumi.input_type
class TaskShardArgumentArgs:
    def __init__(__self__, *,
                 shard_key: pulumi.Input[int],
                 shard_value: pulumi.Input[str]):
        """
        :param pulumi.Input[int] shard_key: Sharding parameter KEY, integer, range [1,1000].
        :param pulumi.Input[str] shard_value: Shard parameter VALUE.
        """
        pulumi.set(__self__, "shard_key", shard_key)
        pulumi.set(__self__, "shard_value", shard_value)

    @property
    @pulumi.getter(name="shardKey")
    def shard_key(self) -> pulumi.Input[int]:
        """
        Sharding parameter KEY, integer, range [1,1000].
        """
        return pulumi.get(self, "shard_key")

    @shard_key.setter
    def shard_key(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_key", value)

    @property
    @pulumi.getter(name="shardValue")
    def shard_value(self) -> pulumi.Input[str]:
        """
        Shard parameter VALUE.
        """
        return pulumi.get(self, "shard_value")

    @shard_value.setter
    def shard_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "shard_value", value)


@pulumi.input_type
class TaskTaskRuleArgs:
    def __init__(__self__, *,
                 rule_type: pulumi.Input[str],
                 expression: Optional[pulumi.Input[str]] = None,
                 repeat_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] rule_type: trigger rule type, Cron/Repeat.
        :param pulumi.Input[str] expression: Cron type rule, cron expression.
        :param pulumi.Input[int] repeat_interval: time interval, in milliseconds.
        """
        pulumi.set(__self__, "rule_type", rule_type)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        """
        trigger rule type, Cron/Repeat.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        Cron type rule, cron expression.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[pulumi.Input[int]]:
        """
        time interval, in milliseconds.
        """
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repeat_interval", value)


@pulumi.input_type
class UnitRuleUnitRuleItemListArgs:
    def __init__(__self__, *,
                 dest_namespace_id: pulumi.Input[str],
                 dest_namespace_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 relationship: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 unit_rule_id: Optional[pulumi.Input[str]] = None,
                 unit_rule_tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListUnitRuleTagListArgs']]]] = None):
        """
        :param pulumi.Input[str] dest_namespace_id: destination namespace ID.
        :param pulumi.Input[str] dest_namespace_name: destination namespace name.
        :param pulumi.Input[str] name: rule item name.
        :param pulumi.Input[str] relationship: logical relationship: AND/OR.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[int] priority: rule order, the smaller the higher the priority: the default is 0.
        :param pulumi.Input[str] rule_id: rule item ID.
        :param pulumi.Input[str] unit_rule_id: Unitization rule ID.
        :param pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListUnitRuleTagListArgs']]] unit_rule_tag_lists: list of rule labels.
        """
        pulumi.set(__self__, "dest_namespace_id", dest_namespace_id)
        pulumi.set(__self__, "dest_namespace_name", dest_namespace_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "relationship", relationship)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if unit_rule_id is not None:
            pulumi.set(__self__, "unit_rule_id", unit_rule_id)
        if unit_rule_tag_lists is not None:
            pulumi.set(__self__, "unit_rule_tag_lists", unit_rule_tag_lists)

    @property
    @pulumi.getter(name="destNamespaceId")
    def dest_namespace_id(self) -> pulumi.Input[str]:
        """
        destination namespace ID.
        """
        return pulumi.get(self, "dest_namespace_id")

    @dest_namespace_id.setter
    def dest_namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_namespace_id", value)

    @property
    @pulumi.getter(name="destNamespaceName")
    def dest_namespace_name(self) -> pulumi.Input[str]:
        """
        destination namespace name.
        """
        return pulumi.get(self, "dest_namespace_name")

    @dest_namespace_name.setter
    def dest_namespace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_namespace_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        rule item name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def relationship(self) -> pulumi.Input[str]:
        """
        logical relationship: AND/OR.
        """
        return pulumi.get(self, "relationship")

    @relationship.setter
    def relationship(self, value: pulumi.Input[str]):
        pulumi.set(self, "relationship", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        rule order, the smaller the higher the priority: the default is 0.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        rule item ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="unitRuleId")
    def unit_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unitization rule ID.
        """
        return pulumi.get(self, "unit_rule_id")

    @unit_rule_id.setter
    def unit_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_rule_id", value)

    @property
    @pulumi.getter(name="unitRuleTagLists")
    def unit_rule_tag_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListUnitRuleTagListArgs']]]]:
        """
        list of rule labels.
        """
        return pulumi.get(self, "unit_rule_tag_lists")

    @unit_rule_tag_lists.setter
    def unit_rule_tag_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListUnitRuleTagListArgs']]]]):
        pulumi.set(self, "unit_rule_tag_lists", value)


@pulumi.input_type
class UnitRuleUnitRuleItemListUnitRuleTagListArgs:
    def __init__(__self__, *,
                 tag_field: pulumi.Input[str],
                 tag_operator: pulumi.Input[str],
                 tag_type: pulumi.Input[str],
                 tag_value: pulumi.Input[str],
                 rule_id: Optional[pulumi.Input[str]] = None,
                 unit_rule_item_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag_field: label name.
        :param pulumi.Input[str] tag_operator: Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
        :param pulumi.Input[str] tag_type: Tag Type: U(User Tag).
        :param pulumi.Input[str] tag_value: tag value.
        :param pulumi.Input[str] rule_id: rule ID.
        :param pulumi.Input[str] unit_rule_item_id: Unitization rule item ID.
        """
        pulumi.set(__self__, "tag_field", tag_field)
        pulumi.set(__self__, "tag_operator", tag_operator)
        pulumi.set(__self__, "tag_type", tag_type)
        pulumi.set(__self__, "tag_value", tag_value)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if unit_rule_item_id is not None:
            pulumi.set(__self__, "unit_rule_item_id", unit_rule_item_id)

    @property
    @pulumi.getter(name="tagField")
    def tag_field(self) -> pulumi.Input[str]:
        """
        label name.
        """
        return pulumi.get(self, "tag_field")

    @tag_field.setter
    def tag_field(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_field", value)

    @property
    @pulumi.getter(name="tagOperator")
    def tag_operator(self) -> pulumi.Input[str]:
        """
        Operator: IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX.
        """
        return pulumi.get(self, "tag_operator")

    @tag_operator.setter
    def tag_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_operator", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> pulumi.Input[str]:
        """
        Tag Type: U(User Tag).
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_type", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> pulumi.Input[str]:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_value", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="unitRuleItemId")
    def unit_rule_item_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unitization rule item ID.
        """
        return pulumi.get(self, "unit_rule_item_id")

    @unit_rule_item_id.setter
    def unit_rule_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_rule_item_id", value)


