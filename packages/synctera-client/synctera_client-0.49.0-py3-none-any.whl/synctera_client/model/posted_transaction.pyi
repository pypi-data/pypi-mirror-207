# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class PostedTransaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "lead_mode",
            "data",
            "reference_id",
            "created",
            "idemkey",
            "type",
            "uuid",
            "subtype",
            "effective_date",
            "transaction_time",
            "info_only",
            "id",
            "updated",
            "posted_date",
            "tenant",
            "status",
        }
        
        class properties:
            created = schemas.DateTimeSchema
        
            @staticmethod
            def data() -> typing.Type['PostedTransactionData']:
                return PostedTransactionData
            effective_date = schemas.DateTimeSchema
            id = schemas.Int64Schema
            idemkey = schemas.StrSchema
            info_only = schemas.BoolSchema
            lead_mode = schemas.BoolSchema
            posted_date = schemas.DateTimeSchema
            
            
            class reference_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reference_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            status = schemas.StrSchema
            subtype = schemas.StrSchema
            tenant = schemas.StrSchema
            transaction_time = schemas.DateTimeSchema
            type = schemas.StrSchema
            updated = schemas.DateTimeSchema
            uuid = schemas.UUIDSchema
            
            
            class disputes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TransactionDispute']:
                        return TransactionDispute
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TransactionDispute'], typing.List['TransactionDispute']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disputes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TransactionDispute':
                    return super().__getitem__(i)
            __annotations__ = {
                "created": created,
                "data": data,
                "effective_date": effective_date,
                "id": id,
                "idemkey": idemkey,
                "info_only": info_only,
                "lead_mode": lead_mode,
                "posted_date": posted_date,
                "reference_id": reference_id,
                "status": status,
                "subtype": subtype,
                "tenant": tenant,
                "transaction_time": transaction_time,
                "type": type,
                "updated": updated,
                "uuid": uuid,
                "disputes": disputes,
            }
    
    lead_mode: MetaOapg.properties.lead_mode
    data: 'PostedTransactionData'
    reference_id: MetaOapg.properties.reference_id
    created: MetaOapg.properties.created
    idemkey: MetaOapg.properties.idemkey
    type: MetaOapg.properties.type
    uuid: MetaOapg.properties.uuid
    subtype: MetaOapg.properties.subtype
    effective_date: MetaOapg.properties.effective_date
    transaction_time: MetaOapg.properties.transaction_time
    info_only: MetaOapg.properties.info_only
    id: MetaOapg.properties.id
    updated: MetaOapg.properties.updated
    posted_date: MetaOapg.properties.posted_date
    tenant: MetaOapg.properties.tenant
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> 'PostedTransactionData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effective_date"]) -> MetaOapg.properties.effective_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idemkey"]) -> MetaOapg.properties.idemkey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info_only"]) -> MetaOapg.properties.info_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lead_mode"]) -> MetaOapg.properties.lead_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posted_date"]) -> MetaOapg.properties.posted_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_id"]) -> MetaOapg.properties.reference_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenant"]) -> MetaOapg.properties.tenant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_time"]) -> MetaOapg.properties.transaction_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disputes"]) -> MetaOapg.properties.disputes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created", "data", "effective_date", "id", "idemkey", "info_only", "lead_mode", "posted_date", "reference_id", "status", "subtype", "tenant", "transaction_time", "type", "updated", "uuid", "disputes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> 'PostedTransactionData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effective_date"]) -> MetaOapg.properties.effective_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idemkey"]) -> MetaOapg.properties.idemkey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info_only"]) -> MetaOapg.properties.info_only: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lead_mode"]) -> MetaOapg.properties.lead_mode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posted_date"]) -> MetaOapg.properties.posted_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_id"]) -> MetaOapg.properties.reference_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenant"]) -> MetaOapg.properties.tenant: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_time"]) -> MetaOapg.properties.transaction_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disputes"]) -> typing.Union[MetaOapg.properties.disputes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created", "data", "effective_date", "id", "idemkey", "info_only", "lead_mode", "posted_date", "reference_id", "status", "subtype", "tenant", "transaction_time", "type", "updated", "uuid", "disputes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        lead_mode: typing.Union[MetaOapg.properties.lead_mode, bool, ],
        data: 'PostedTransactionData',
        reference_id: typing.Union[MetaOapg.properties.reference_id, None, str, ],
        created: typing.Union[MetaOapg.properties.created, str, datetime, ],
        idemkey: typing.Union[MetaOapg.properties.idemkey, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, uuid.UUID, ],
        subtype: typing.Union[MetaOapg.properties.subtype, str, ],
        effective_date: typing.Union[MetaOapg.properties.effective_date, str, datetime, ],
        transaction_time: typing.Union[MetaOapg.properties.transaction_time, str, datetime, ],
        info_only: typing.Union[MetaOapg.properties.info_only, bool, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        updated: typing.Union[MetaOapg.properties.updated, str, datetime, ],
        posted_date: typing.Union[MetaOapg.properties.posted_date, str, datetime, ],
        tenant: typing.Union[MetaOapg.properties.tenant, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        disputes: typing.Union[MetaOapg.properties.disputes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PostedTransaction':
        return super().__new__(
            cls,
            *_args,
            lead_mode=lead_mode,
            data=data,
            reference_id=reference_id,
            created=created,
            idemkey=idemkey,
            type=type,
            uuid=uuid,
            subtype=subtype,
            effective_date=effective_date,
            transaction_time=transaction_time,
            info_only=info_only,
            id=id,
            updated=updated,
            posted_date=posted_date,
            tenant=tenant,
            status=status,
            disputes=disputes,
            _configuration=_configuration,
            **kwargs,
        )

from synctera_client.model.posted_transaction_data import PostedTransactionData
from synctera_client.model.transaction_dispute import TransactionDispute
