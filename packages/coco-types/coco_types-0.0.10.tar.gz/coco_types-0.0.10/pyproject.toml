[build-system]
requires = ["hatchling>=1.10.0"]
build-backend = "hatchling.build"

[project]
name = "coco-types"
authors = [{name="Bagard Hoel"}]
description = "Package for handling COCO datasets types."
keywords = ["COCO", "COCO dataset"]
readme = "README.md"
classifiers = [
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.10",
            "Programming Language :: Python :: 3.11",
            "Operating System :: OS Independent",
            "Intended Audience :: Developers",
]
license = {text = "MIT"}
dynamic = ["version"]
dependencies = ["pydantic", "numpy"]
requires-python = ">=3.10"

[project.urls]
"Homepage" = "https://github.com/hoel-bagard/coco-types"
"Bug Tracker" = "https://github.com/hoel-bagard/coco-types/issues"

[project.optional-dependencies]
test = ["pytest", "nox"]
dev = ["pre-commit", "pip-tools", "ruff", "pyright"]
build = ["hatch"]
flake8 = ["flake8", "flake8-bugbear", "flake8-comprehensions", "flake8-docstrings", "flake8-builtins", "flake8-quotes", "pep8-naming", "flake8-import-order", "flake8-noqa", "flake8-broken-line", "flake8-commas", "Flake8-pyproject"]

[tool.hatch.version]
path = "src/coco_types/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/.pytest_cache",
  "/build",
  "/dist",
  "/docs",
]

[tool.hatch.build.targets.wheel]
packages = ["src/coco_types"]

[tool.hatch.envs.pypi.scripts]
# hatch run pypi:publish_test
publish_test = "hatch build --clean && hatch publish -r test"
publish = "hatch build --clean && hatch publish"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/7.1.x/explanation/goodpractices.html
addopts = [
    "--import-mode=importlib",
]

[tool.ruff]
select = ["A", "B", "C4", "E", "I", "Q", "UP", "ANN", "S", "BLE", "COM", "DTZ", "PIE", "PT", "RSE", "SIM","PTH", "NPY", "RUF"]
ignore = ["ANN101", "D1", "D401", "D204", "D203", "D213", "S101", "PLR2004", "A002", "A003"]
line-length = 120

[tool.ruff.per-file-ignores]
"noxfile.py" = ["ANN001"]

[tool.ruff.isort]
order-by-type = false

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.pyright]
include = ["src/coco_types"]
ignore = ["src/coco_types/__init__.pyi"]

strictListInference = true
strictDictionaryInference = true
strictSetInference = true

reportMissingModuleSource = false
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportDuplicateImport = "warning"
reportUntypedNamedTuple = "warning"
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportMissingSuperCall = false
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownVariableType = "warning"
reportUnknownMemberType = false
reportMissingParameterType = "warning"
reportMissingTypeArgument = "warning"
reportCallInDefaultInitializer = false
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportImplicitStringConcatenation = false
reportUnusedCallResult = false
reportUnusedExpression = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportMatchNotExhaustive = "warning"

pythonVersion = "3.10"
pythonPlatform = "Linux"

[tool.flake8]
max-line-length = 120
docstring-convention = "google"
import-order-style = "smarkets"
application_import_names = "src"

# F401  # Imported but unused
# N801  # class name 'COCO_RLE' should use CapWords convention
per-file-ignores = [
    "__init__.py:F401,F403",
    "*detection.py:N801"
]
exclude = ["env", "venv", ".nox"]

# D1    # Do not require docstrings
# W503  # Line break occurred before a binary operator  (Should already be gone so...)
# E226  # Missing whitespace around arithmetic operator  --> 0.1*b + 0.2*c is considered "wrong"
# N805  # first argument of a method should be named 'self'
# A003  # class attribute "id" is shadowing a python builtin
# N815  # variable 'X' in class scope should not be mixedCase
ignore = ["A003", "D1", "W503", "E226", "N805", "N815"]
inline-quotes = "double"
# Cyclomatic complexity for functions
max-complexity = 20
