# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class WatchlistSubscription(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "customer_consent",
        }
        
        class properties:
            customer_consent = schemas.BoolSchema
            auto_renew = schemas.BoolSchema
            created = schemas.DateTimeSchema
            id = schemas.UUIDSchema
            period_end = schemas.DateSchema
            period_start = schemas.DateSchema
            provider_subscription_id = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
            __annotations__ = {
                "customer_consent": customer_consent,
                "auto_renew": auto_renew,
                "created": created,
                "id": id,
                "period_end": period_end,
                "period_start": period_start,
                "provider_subscription_id": provider_subscription_id,
                "status": status,
            }
    
    customer_consent: MetaOapg.properties.customer_consent
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_consent"]) -> MetaOapg.properties.customer_consent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_renew"]) -> MetaOapg.properties.auto_renew: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period_end"]) -> MetaOapg.properties.period_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period_start"]) -> MetaOapg.properties.period_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_subscription_id"]) -> MetaOapg.properties.provider_subscription_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customer_consent", "auto_renew", "created", "id", "period_end", "period_start", "provider_subscription_id", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_consent"]) -> MetaOapg.properties.customer_consent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_renew"]) -> typing.Union[MetaOapg.properties.auto_renew, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period_end"]) -> typing.Union[MetaOapg.properties.period_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period_start"]) -> typing.Union[MetaOapg.properties.period_start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_subscription_id"]) -> typing.Union[MetaOapg.properties.provider_subscription_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customer_consent", "auto_renew", "created", "id", "period_end", "period_start", "provider_subscription_id", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        customer_consent: typing.Union[MetaOapg.properties.customer_consent, bool, ],
        auto_renew: typing.Union[MetaOapg.properties.auto_renew, bool, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        period_end: typing.Union[MetaOapg.properties.period_end, str, date, schemas.Unset] = schemas.unset,
        period_start: typing.Union[MetaOapg.properties.period_start, str, date, schemas.Unset] = schemas.unset,
        provider_subscription_id: typing.Union[MetaOapg.properties.provider_subscription_id, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WatchlistSubscription':
        return super().__new__(
            cls,
            *_args,
            customer_consent=customer_consent,
            auto_renew=auto_renew,
            created=created,
            id=id,
            period_end=period_end,
            period_start=period_start,
            provider_subscription_id=provider_subscription_id,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
