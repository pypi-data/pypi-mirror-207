Metadata-Version: 2.1
Name: coco-types
Version: 0.0.10
Summary: Package for handling COCO datasets types.
Project-URL: Homepage, https://github.com/hoel-bagard/coco-types
Project-URL: Bug Tracker, https://github.com/hoel-bagard/coco-types/issues
Author: Bagard Hoel
License: MIT
License-File: LICENSE.md
Keywords: COCO,COCO dataset
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.10
Requires-Dist: numpy
Requires-Dist: pydantic
Provides-Extra: build
Requires-Dist: hatch; extra == 'build'
Provides-Extra: dev
Requires-Dist: pip-tools; extra == 'dev'
Requires-Dist: pre-commit; extra == 'dev'
Requires-Dist: pyright; extra == 'dev'
Requires-Dist: ruff; extra == 'dev'
Provides-Extra: flake8
Requires-Dist: flake8; extra == 'flake8'
Requires-Dist: flake8-broken-line; extra == 'flake8'
Requires-Dist: flake8-bugbear; extra == 'flake8'
Requires-Dist: flake8-builtins; extra == 'flake8'
Requires-Dist: flake8-commas; extra == 'flake8'
Requires-Dist: flake8-comprehensions; extra == 'flake8'
Requires-Dist: flake8-docstrings; extra == 'flake8'
Requires-Dist: flake8-import-order; extra == 'flake8'
Requires-Dist: flake8-noqa; extra == 'flake8'
Requires-Dist: flake8-pyproject; extra == 'flake8'
Requires-Dist: flake8-quotes; extra == 'flake8'
Requires-Dist: pep8-naming; extra == 'flake8'
Provides-Extra: test
Requires-Dist: nox; extra == 'test'
Requires-Dist: pytest; extra == 'test'
Description-Content-Type: text/markdown

# COCO Types

[![PyPI](https://img.shields.io/pypi/v/coco-types?color=green&style=flat)](https://pypi.org/project/coco-types)
[![PyPI - Implementation](https://img.shields.io/pypi/implementation/coco-types?style=flat)](https://pypi.org/project/coco-types)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/coco-types?style=flat)](https://pypi.org/project/coco-types)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/coco-types?style=flat-square)](https://pypistats.org/packages/coco-types)
[![License](https://img.shields.io/pypi/l/coco-types?style=flat)](https://opensource.org/licenses/MIT)
![Linting](https://github.com/hoel-bagard/coco-types/actions/workflows/pre-commit.yaml/badge.svg)
![Tests](https://github.com/hoel-bagard/coco-types/actions/workflows/nox.yaml/badge.svg)

Package for handling COCO datasets types.\
Note: This package loads the data as is and does not create dictionaries mapping ids to lists of images/annotations/categories.

## Installation

The package is available on pypi [here](https://pypi.org/project/coco-types/), you can install it with:
```
pip install coco-types
```

## Loading COCO data

You can load COCO dataset labels into Pydantic objects by using the `Dataset` and `DatasetKP` classes.

For an object detection dataset:
```python
import coco_types

with open("path/to/json", encoding="utf-8") as data_file:
    dataset = coco_types.Dataset.parse_raw(data_file.read())
```

For a keypoint detection dataset:
```python
import coco_types

with open("path/to/json", encoding="utf-8") as data_file:
    dataset = coco_types.DatasetKP.parse_raw(data_file.read())
```


## Usage example:
```python
import coco_types

with open("path/to/json", encoding="utf-8") as data_file:
    dataset = coco_types.Dataset.parse_raw(data_file.read())

img = dataset.images[0]
print(f"Image's filename {img.file_name}")
print(f"Image's id {img.id}")
print(f"Image's height {img.height}")
print(f"Image's width {img.width}")

img_annotations = [annotation for annotation in dataset.annotations
                   if annotation.image_id == img.id]
ann = img_annotations[0]
print(f"Annotation's id: {ann.id}")
print(f"Annotation's image id: {ann.image_id}")
print(f"Annotation's category id: {ann.category_id}")
print(f"Annotation's iscrowd: {ann.iscrowd}")
print(f"Annotation's bbox: {ann.bbox}")
print(f"Annotation's area {ann.area}")

for cat in dataset.categories:
    if cat.id == ann.category_id:
        break

print(f"Category's name {cat.name}")
print(f"Category's supercategory {cat.supercategory}")
```

### Keypoints
If using a dataset with keypoints (`coco_types.DatasetKP`), then annotations will have two additional attributes: `keypoints` and `num_keypoints`.\
In the same way, categories will have  two additional attributes: `keypoints` and `skeleton`.


## TypedDict versions
A `TypedDict` version of the pydantic models can be accessed using `coco_types.dicts.*` (for example `coco_types.dicts.Dataset`). This can be useful if you have data that is slightly malformed / follows a slightly different format but is still usable.
