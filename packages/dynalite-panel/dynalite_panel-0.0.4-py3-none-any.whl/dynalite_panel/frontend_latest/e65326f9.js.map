{"version":3,"file":"e65326f9.js","mappings":";;;;;;;;;;;;;AAOA;;;;ACDA;ACgCA;;;;;;;;;;AAUA;AAEA;;;AAKA;AACA;AACA;;AAEA;;;;;;;AAQA;AACA;;;AAGA;;AAnCA;;;;;;;;;;AAuEA","sources":["webpack://dynalitepanel/./homeassistant-frontend/src/components/ha-formfield.ts","webpack://dynalitepanel/./homeassistant-frontend/src/components/ha-radio.ts","webpack://dynalitepanel/./src/dynalite-select-gateway-dialog.ts"],"sourcesContent":["import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport { fireEvent } from \"../homeassistant-frontend/src/common/dom/fire_event\";\nimport { haStyle } from \"../homeassistant-frontend/src/resources/styles\";\nimport { CONF_HOST, CONF_PORT, CONF_NAME, EVENT_DIALOG_CLOSED } from \"./const\";\nimport type { DynaliteSelectGatewayDialogParams } from \"./show-dialog-select-gateway\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"../homeassistant-frontend/src/components/ha-dialog\";\nimport \"../homeassistant-frontend/src/components/ha-header-bar\";\nimport \"../homeassistant-frontend/src/components/ha-card\";\nimport \"../homeassistant-frontend/src/components/ha-formfield\";\nimport \"../homeassistant-frontend/src/components/ha-radio\";\n\n@customElement(\"dynalite-select-gateway-dialog\")\nexport class DynaliteSelectGatewayDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public narrow = false;\n\n  @state() private _params?: DynaliteSelectGatewayDialogParams;\n\n  private _result = \"\";\n\n  private _hasSelectionChanged = false;\n\n  public async showDialog(params: DynaliteSelectGatewayDialogParams): Promise<void> {\n    this.hass = params.hass;\n    this._params = params;\n    this._result = params.dynalite.entry_id;\n    this._hasSelectionChanged = false;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) return html``;\n    return html`\n      <ha-dialog open .heading=${\"abcde\"} @closed=${this._close}>\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\"> Select Dynalite Gateway </span>\n          </ha-header-bar>\n        </div>\n        <div class=\"wrapper\">\n          <ha-card outlined>\n            <div class=\"content\">\n              <label>\n                ${Object.entries(this._params.dynalite.completeConfig).map(\n                  ([entry_id, data]) => html`<ha-formfield\n                      .label=${`${data[CONF_NAME] || this._params?.dynalite.default.DEFAULT_NAME}\n                    - Host ${data[CONF_HOST]} Port\n                    ${data[CONF_PORT] || this._params?.dynalite.default.DEFAULT_PORT}`}\n                      ><ha-radio\n                        name=\"myGroup\"\n                        .value=${entry_id}\n                        ?checked=${entry_id === this._params?.dynalite.entry_id}\n                        @change=${this._handleChange}\n                      ></ha-radio></ha-formfield\n                    ><br />`\n                )}\n              </label>\n            </div>\n          </ha-card>\n        </div>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._save}\n          ?disabled=${!this._hasSelectionChanged}\n          >Select</mwc-button\n        >\n        <mwc-button slot=\"secondaryAction\" @click=${this._close}>Cancel</mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _handleChange(ev) {\n    this._result = ev.currentTarget.value;\n    this._hasSelectionChanged = true;\n    this.requestUpdate();\n  }\n\n  private _close(): void {\n    this._params = undefined;\n    fireEvent(this, EVENT_DIALOG_CLOSED, { dialog: this.localName });\n  }\n\n  private _save(): void {\n    this._params?.onSave(this._result);\n    this._close();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-dialog {\n          --dialog-content-position: static;\n          --dialog-content-padding: 0;\n          --dialog-z-index: 6;\n        }\n        .content {\n          display: block;\n          padding: 20px 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-select-gateway-dialog\": DynaliteSelectGatewayDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}