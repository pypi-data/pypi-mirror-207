name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v20
      - uses: cachix/cachix-action@v12
        with:
          name: unblob
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: Check Nix formatting
        run: nix fmt -- --check .
      - name: Check Python formatting
        run: nix develop -c -- black --check --diff --color .
      - name: Ruff
        run: nix develop -c -- ruff .

  build-nix:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64-linux
          - os: ubuntu-latest
            arch: aarch64-linux
          - os: macos-latest
            arch: x86_64-darwin
    name: Build Nix - ${{ matrix.arch }}.${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v20
      - uses: cachix/cachix-action@v12
        with:
          name: unblob
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Setup emulation
        if: ${{ matrix.arch == 'aarch64-linux' }}
        run: |
          sudo apt update
          sudo apt install -q -y qemu-system-aarch64 qemu-efi binfmt-support qemu-user-static
          mkdir -p ~/.config/nix
          echo "system-features = aarch64-linux arm-linux" | sudo tee -a /etc/nix/nix.conf
      - name: Nix Flake checks
        run: |
          nix flake check --keep-going --print-build-logs --option system ${{ matrix.arch }} --extra-platforms ${{ matrix.arch }}

  pytest:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up PDM
        uses: pdm-project/setup-pdm@v2
        with:
          python-version: ${{ matrix.python-version }}
          enable-pep582: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock
            ./Cargo.lock
      - name: Work around requests bug https://github.com/psf/requests/issues/6437
        run: pip install --force requests==2.29.0
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install dependencies
        run: |
          pdm sync -d
      - name: Run Tests
        run: |
          pdm pytest

  pyright:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up PDM
        uses: pdm-project/setup-pdm@v2
        with:
          python-version: "3.8"
          enable-pep582: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock
            ./Cargo.lock
      - name: Work around requests bug https://github.com/psf/requests/issues/6437
        run: pip install --force requests==2.29.0
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install dependencies
        run: |
          pdm sync -d
      - name: Type-Check
        run: |
          pdm pyright

  # Build jobs are auto-generated by maturin v0.14.17
  # To update, run
  #
  #    maturin generate-ci --platform linux macos -- github
  #
  wheel-linux:
    runs-on: ubuntu-latest
    needs: [checks, pytest, pyright]
    strategy:
      matrix:
        include:
          - target: x86_64
          - target: aarch64
            cross: true
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: setup emulation
        if: ${{ matrix.cross }}
        run: |
          sudo apt update
          sudo apt install -q -y qemu-system-${{ matrix.target }} qemu-efi binfmt-support qemu-user-static
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          container: quay.io/pypa/manylinux2014_${{ matrix.target }}:latest
          args: --release --out dist
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  wheel-macos:
    runs-on: macos-latest
    needs: [checks, pytest, pyright]
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          sccache: "true"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: [checks, pytest, pyright]
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [build-nix, wheel-linux, wheel-macos, sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}
        with:
          command: upload
          args: --skip-existing *
