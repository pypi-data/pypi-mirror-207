# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class SpendControl(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "action_decline",
            "is_active",
            "time_range",
            "amount_limit",
            "action_case",
            "name",
        }
        
        class properties:
            action_case = schemas.BoolSchema
            action_decline = schemas.BoolSchema
            
            
            class amount_limit(
                schemas.Int64Schema
            ):
                pass
            is_active = schemas.BoolSchema
            name = schemas.StrSchema
        
            @staticmethod
            def time_range() -> typing.Type['SpendControlTimeRange']:
                return SpendControlTimeRange
            creation_time = schemas.DateTimeSchema
        
            @staticmethod
            def direction() -> typing.Type['SpendControlDirection']:
                return SpendControlDirection
            id = schemas.UUIDSchema
            last_modified_time = schemas.DateTimeSchema
        
            @staticmethod
            def payment_types() -> typing.Type['PaymentTypeList']:
                return PaymentTypeList
            __annotations__ = {
                "action_case": action_case,
                "action_decline": action_decline,
                "amount_limit": amount_limit,
                "is_active": is_active,
                "name": name,
                "time_range": time_range,
                "creation_time": creation_time,
                "direction": direction,
                "id": id,
                "last_modified_time": last_modified_time,
                "payment_types": payment_types,
            }
    
    action_decline: MetaOapg.properties.action_decline
    is_active: MetaOapg.properties.is_active
    time_range: 'SpendControlTimeRange'
    amount_limit: MetaOapg.properties.amount_limit
    action_case: MetaOapg.properties.action_case
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action_case"]) -> MetaOapg.properties.action_case: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action_decline"]) -> MetaOapg.properties.action_decline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_limit"]) -> MetaOapg.properties.amount_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_range"]) -> 'SpendControlTimeRange': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["direction"]) -> 'SpendControlDirection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified_time"]) -> MetaOapg.properties.last_modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_types"]) -> 'PaymentTypeList': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["action_case", "action_decline", "amount_limit", "is_active", "name", "time_range", "creation_time", "direction", "id", "last_modified_time", "payment_types", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action_case"]) -> MetaOapg.properties.action_case: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action_decline"]) -> MetaOapg.properties.action_decline: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_limit"]) -> MetaOapg.properties.amount_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_range"]) -> 'SpendControlTimeRange': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_time"]) -> typing.Union[MetaOapg.properties.creation_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["direction"]) -> typing.Union['SpendControlDirection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified_time"]) -> typing.Union[MetaOapg.properties.last_modified_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_types"]) -> typing.Union['PaymentTypeList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action_case", "action_decline", "amount_limit", "is_active", "name", "time_range", "creation_time", "direction", "id", "last_modified_time", "payment_types", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        action_decline: typing.Union[MetaOapg.properties.action_decline, bool, ],
        is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
        time_range: 'SpendControlTimeRange',
        amount_limit: typing.Union[MetaOapg.properties.amount_limit, decimal.Decimal, int, ],
        action_case: typing.Union[MetaOapg.properties.action_case, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        creation_time: typing.Union[MetaOapg.properties.creation_time, str, datetime, schemas.Unset] = schemas.unset,
        direction: typing.Union['SpendControlDirection', schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        last_modified_time: typing.Union[MetaOapg.properties.last_modified_time, str, datetime, schemas.Unset] = schemas.unset,
        payment_types: typing.Union['PaymentTypeList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SpendControl':
        return super().__new__(
            cls,
            *_args,
            action_decline=action_decline,
            is_active=is_active,
            time_range=time_range,
            amount_limit=amount_limit,
            action_case=action_case,
            name=name,
            creation_time=creation_time,
            direction=direction,
            id=id,
            last_modified_time=last_modified_time,
            payment_types=payment_types,
            _configuration=_configuration,
            **kwargs,
        )

from synctera_client.model.payment_type_list import PaymentTypeList
from synctera_client.model.spend_control_direction import SpendControlDirection
from synctera_client.model.spend_control_time_range import SpendControlTimeRange
