{"version":3,"file":"d5e406e6.js","mappings":";AAgDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;AC3FA;AACA;;;;;;;;;;AAUA;;;;AAKA","sources":["webpack://dynalitepanel/./homeassistant-frontend/src/components/ha-button-menu.ts","webpack://dynalitepanel/./src/dynalite-action-button.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { mdiDelete, mdiDotsVertical } from \"@mdi/js\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { haStyle } from \"../homeassistant-frontend/src/resources/styles\";\nimport { showConfirmationDialog } from \"../homeassistant-frontend/src/dialogs/generic/show-dialog-box\";\nimport \"../homeassistant-frontend/src/components/ha-button-menu\";\nimport \"../homeassistant-frontend/src/components/ha-icon-button\";\nimport \"../homeassistant-frontend/src/components/ha-svg-icon\";\n\n@customElement(\"dynalite-action-button\")\nexport class DynaliteActionButton extends LitElement {\n  @property({ type: String }) public param!: string;\n\n  @property({ type: String }) public label!: string;\n\n  protected render(): TemplateResult | void {\n    return html`\n      <ha-button-menu\n        @action=${this._handleAction}\n        @closed=${this._onButtonClose}\n        corner=\"BOTTOM_START\"\n        fixed\n      >\n        <ha-icon-button\n          slot=\"trigger\"\n          label=\"Additional Actions\"\n          .path=${mdiDotsVertical}\n        ></ha-icon-button>\n        <mwc-list-item class=\"warning\" graphic=\"icon\">\n          Delete ${this.label}\n          <ha-svg-icon slot=\"graphic\" .path=${mdiDelete} class=\"warning\"> </ha-svg-icon>\n        </mwc-list-item>\n      </ha-button-menu>\n    `;\n  }\n\n  private async _handleAction(ev) {\n    const index = ev.detail.index;\n    switch (index) {\n      case 0: {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: `Delete ${this.label} ${this.param}`,\n            text: `Are you sure you want to delete ${this.label.toLowerCase()} ${this.param}`,\n            confirmText: \"Confirm\",\n          }))\n        ) {\n          return;\n        }\n        this.dispatchEvent(new CustomEvent(\"dynalite-action-button\", { detail: this.param }));\n        break;\n      }\n    }\n  }\n\n  private _onButtonClose(ev) {\n    ev.stopPropagation();\n  }\n\n  // needed to make it red XXX TODO - simpler\n  static get styles(): CSSResultGroup {\n    return [haStyle];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-action-button\": DynaliteActionButton;\n  }\n}\n"],"names":[],"sourceRoot":""}