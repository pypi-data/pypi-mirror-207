{"version":3,"file":"static/js/820.3a64213e.chunk.js","mappings":"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","sources":["../../core/src/assets/AssetsGroupsGlobalGraphRoot.tsx","../../core/src/instance/RepoFilterButton.tsx","../../core/src/workspace/ReloadAllButton.tsx"],"sourcesContent":["import {Page, PageHeader, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetGraphFetchScope} from '../asset-graph/useAssetGraphData';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {\n  ExplorerPath,\n  explorerPathFromString,\n  explorerPathToString,\n} from '../pipelines/PipelinePathUtils';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\ninterface AssetGroupRootParams {\n  0: string;\n}\n\nconst __GLOBAL__ = '__GLOBAL__';\n\nexport const AssetsGroupsGlobalGraphRoot: React.FC = () => {\n  const {0: path} = useParams<AssetGroupRootParams>();\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const history = useHistory();\n\n  useDocumentTitle(`Global Asset Lineage`);\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, mode: 'push' | 'replace') => {\n      history[mode](\n        `/asset-groups${explorerPathToString({...path, pipelineName: __GLOBAL__}).replace(\n          __GLOBAL__,\n          '',\n        )}`,\n      );\n    },\n    [history],\n  );\n\n  const onNavigateToSourceAssetNode = React.useCallback(\n    (node: AssetLocation) => {\n      history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n    },\n    [history],\n  );\n\n  const fetchOptions = React.useMemo(() => {\n    const options: AssetGraphFetchScope = {\n      hideEdgesToNodesOutsideQuery: false,\n      hideNodesMatching: (node) => {\n        return !visibleRepos.some(\n          (repo) =>\n            repo.repositoryLocation.name === node.repository.location.name &&\n            repo.repository.name === node.repository.name,\n        );\n      },\n    };\n    return options;\n  }, [visibleRepos]);\n\n  return (\n    <Page style={{display: 'flex', flexDirection: 'column', paddingBottom: 0}}>\n      <PageHeader\n        title={<Heading>Global Asset Lineage</Heading>}\n        right={\n          <div style={{marginBottom: -8}}>\n            <ReloadAllButton label=\"Reload definitions\" />\n          </div>\n        }\n      />\n      <AssetGraphExplorer\n        fetchOptions={fetchOptions}\n        fetchOptionFilters={<>{allRepos.length > 1 && <RepoFilterButton />}</>}\n        options={{preferAssetRendering: true, explodeComposites: true}}\n        explorerPath={explorerPathFromString(__GLOBAL__ + path || '/')}\n        onChangeExplorerPath={onChangeExplorerPath}\n        onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n      />\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default AssetsGroupsGlobalGraphRoot;\n","import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton: React.FC = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {Button, Dialog, DialogBody, DialogFooter, Icon, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useUnscopedPermissions} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  reloadFnForWorkspace,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationErrorDialog} from './RepositoryLocationErrorDialog';\n\nexport const ReloadAllButton: React.FC<{label?: string}> = ({label = 'Reload all'}) => {\n  const {\n    permissions: {canReloadWorkspace},\n    disabledReasons,\n  } = useUnscopedPermissions();\n  const {reloading, tryReload, error, errorLocationId} = useRepositoryLocationReload({\n    scope: 'workspace',\n    reloadFn: reloadFnForWorkspace,\n  });\n\n  const [isOpen, setIsOpen] = React.useState(!!error);\n  React.useEffect(() => setIsOpen(!!error), [error]);\n\n  if (!canReloadWorkspace) {\n    return (\n      <Tooltip content={disabledReasons.canReloadWorkspace}>\n        <Button icon={<Icon name=\"refresh\" />} disabled intent=\"none\">\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={tryReload} icon={<Icon name=\"refresh\" />} loading={reloading} intent=\"none\">\n        {label}\n      </Button>\n      {errorLocationId ? (\n        <RepositoryLocationErrorDialog\n          error={error}\n          location={errorLocationId}\n          reloading={reloading}\n          onTryReload={tryReload}\n          onDismiss={() => setIsOpen(false)}\n          isOpen={isOpen}\n        />\n      ) : (\n        <Dialog\n          icon=\"error\"\n          title=\"Reload error\"\n          canEscapeKeyClose={false}\n          canOutsideClickClose={false}\n          style={{width: '90%'}}\n          isOpen={isOpen}\n        >\n          <DialogBody>{error && <PythonErrorInfo error={error} />}</DialogBody>\n          <DialogFooter>\n            <Button onClick={() => setIsOpen(false)}>Dismiss</Button>\n          </DialogFooter>\n        </Dialog>\n      )}\n    </>\n  );\n};\n"],"names":["__GLOBAL__","AssetsGroupsGlobalGraphRoot","path","useParams","_React$useContext","React","WorkspaceContext","allRepos","visibleRepos","history","useHistory","useDocumentTitle","onChangeExplorerPath","mode","concat","explorerPathToString","_objectSpread","pipelineName","replace","onNavigateToSourceAssetNode","node","push","assetDetailsPathForKey","assetKey","view","fetchOptions","hideEdgesToNodesOutsideQuery","hideNodesMatching","some","repo","repositoryLocation","name","repository","location","_jsxs","Page","style","display","flexDirection","paddingBottom","children","_jsx","PageHeader","title","Heading","right","marginBottom","ReloadAllButton","label","AssetGraphExplorer","fetchOptionFilters","_Fragment","length","RepoFilterButton","options","preferAssetRendering","explodeComposites","explorerPath","explorerPathFromString","toggleVisible","_React$useState","_React$useState2","_slicedToArray","open","setOpen","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","width","onClose","DialogHeader","icon","RepoSelector","onBrowse","onToggle","selected","DialogFooter","Box","padding","top","Button","intent","onClick","Icon","rightIcon","_ref","_ref$label","_useUnscopedPermissio","useUnscopedPermissions","canReloadWorkspace","permissions","disabledReasons","_useRepositoryLocatio","useRepositoryLocationReload","scope","reloadFn","reloadFnForWorkspace","reloading","tryReload","error","errorLocationId","setIsOpen","loading","RepositoryLocationErrorDialog","onTryReload","onDismiss","DialogBody","PythonErrorInfo","Tooltip","content","disabled"],"sourceRoot":""}