# Generated by Django 4.1.1 on 2023-02-28 14:29

import tour_guide.blocks
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import media_catalogue.blocks
import modelcluster.fields
import officekit.models
import wagtail.fields
import wagtail.search.index
import wagtail_block_model_field.fields
import wagtail_dynamic_choice.model_fields
import wagtail_switch_block.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='', help_text='Optional organisation name, line breaks will be preserved.', max_length=128, validators=[django.core.validators.RegexValidator('^[A-Za-z_][A-Za-z_0-9]*$', code='invalid_identifier', message='A valid identifier starts with an alphanumeric letter or underscore and contains only alphanumeric letters, underscores or digits.')])),
                ('organisation', models.TextField(blank=True, help_text='Organisation, such as "University College London"', max_length=192, verbose_name='Organisation')),
                ('building_unit', models.CharField(blank=True, help_text='Unit in building, for example: "Flat 4", "First Floor", "Atrium", "Acute Admissions"', max_length=192, verbose_name='Building Unit')),
                ('building', models.CharField(blank=True, help_text='For example: Russell Square House, Maple House', max_length=192, verbose_name='Building')),
                ('building_number', models.CharField(max_length=24, verbose_name='Building Number')),
                ('street', models.CharField(max_length=192, verbose_name='Street')),
                ('locality', models.CharField(blank=True, help_text='Useful if a street name exists more than once in the same place.', max_length=192, verbose_name='Locality')),
                ('town', models.CharField(max_length=192, verbose_name='Town')),
                ('postal_code', models.CharField(max_length=32, verbose_name='Postal Code')),
                ('country', django_countries.fields.CountryField(default='GB', max_length=2)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, null=True, verbose_name='Longitude')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, null=True, verbose_name='Latitude')),
                ('directions', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='Directions')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'ordering': ['town', 'postal_code', 'street', 'building_number', 'building', 'building_unit'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='AddressFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='', max_length=128, validators=[django.core.validators.RegexValidator('^[A-Za-z_][A-Za-z_0-9]*$', code='invalid_identifier', message='A valid identifier starts with an alphanumeric letter or underscore and contains only alphanumeric letters, underscores or digits.')])),
                ('description', models.CharField(blank=True, max_length=192, verbose_name='Description')),
                ('method', wagtail_dynamic_choice.model_fields.DynamicChoiceField(choices_function_name='officekit.address_formats.get_address_format_choices', default='officekit:postal', max_length=128, verbose_name='Method')),
            ],
            options={
                'verbose_name': 'Address Format',
                'verbose_name_plural': 'Address Formats',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='', max_length=128, validators=[django.core.validators.RegexValidator('^[A-Za-z_][A-Za-z_0-9]*$', code='invalid_identifier', message='A valid identifier starts with an alphanumeric letter or underscore and contains only alphanumeric letters, underscores or digits.')])),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('name', models.CharField(default='', max_length=192, verbose_name='Name')),
                ('short_description', wagtail.fields.RichTextField(blank=True, default='', null=True, verbose_name='Short Description')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['name'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='', max_length=128, validators=[django.core.validators.RegexValidator('^[A-Za-z_][A-Za-z_0-9]*$', code='invalid_identifier', message='A valid identifier starts with an alphanumeric letter or underscore and contains only alphanumeric letters, underscores or digits.')])),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('content_type', models.ForeignKey(on_delete=models.SET(officekit.models.get_default_group_member_content_type), related_name='group_members', to='contenttypes.contenttype', verbose_name='content type')),
            ],
            options={
                'verbose_name': 'Group Member',
                'verbose_name_plural': 'Group Members',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('groupmember_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='officekit.groupmember')),
                ('name', models.CharField(max_length=192, verbose_name='Name')),
                ('abbreviation', models.CharField(max_length=192, verbose_name='Abbreviation')),
                ('link', wagtail_block_model_field.fields.BlockModelField(tour_guide.blocks.RichLinkBlock(label='Link'), tour_guide.blocks.RichLinkBlockValue)),
                ('short_description', wagtail.fields.RichTextField(blank=True, default='', null=True, verbose_name='Short Description')),
                ('logo', wagtail_block_model_field.fields.BlockModelField(media_catalogue.blocks.MediaItemChooserBlock(label='Organisation Logo', max_num_choices=1, required=False), wagtail_switch_block.blocks.SwitchValue)),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
                'ordering': ['name'],
            },
            bases=('officekit.groupmember',),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('groupmember_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='officekit.groupmember')),
                ('family_name', models.CharField(default='', max_length=192, verbose_name='Family Name')),
                ('given_names_and_initials', models.CharField(default='', max_length=192, verbose_name='Given Name(s) and Initial(s)')),
                ('title', models.CharField(blank=True, default='', max_length=192, verbose_name='Title')),
                ('email', models.EmailField(blank=True, default='', max_length=254, null=True, verbose_name='Email')),
                ('link', wagtail_block_model_field.fields.BlockModelField(tour_guide.blocks.RichLinkBlock(label='Link'), tour_guide.blocks.RichLinkBlockValue)),
                ('short_description', wagtail.fields.RichTextField(blank=True, default='', null=True, verbose_name='Short Description')),
                ('portrait', wagtail_block_model_field.fields.BlockModelField(media_catalogue.blocks.MediaItemChooserBlock(label='Portrait', max_num_choices=1, required=False), wagtail_switch_block.blocks.SwitchValue)),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
                'ordering': ['family_name', 'given_names_and_initials'],
                'abstract': False,
            },
            bases=('officekit.groupmember',),
        ),
        migrations.CreateModel(
            name='GroupAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('active', models.BooleanField(default=True, verbose_name='active')),
                ('short_description', wagtail.fields.RichTextField(blank=True, default='', null=True, verbose_name='Short Description')),
                ('visual', wagtail_block_model_field.fields.BlockModelField(media_catalogue.blocks.MediaItemChooserBlock(label='Visual', max_num_choices=1, required=False), wagtail_switch_block.blocks.SwitchValue)),
                ('link', wagtail_block_model_field.fields.BlockModelField(tour_guide.blocks.RichLinkBlock(label='Link'), tour_guide.blocks.RichLinkBlockValue)),
                ('group', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='officekit.group')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='officekit.groupmember')),
            ],
            options={
                'verbose_name': 'Group Assignment',
                'verbose_name_plural': 'Group Assignments',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(fields=('identifier',), name='unique_officekit_group.identifier'),
        ),
        migrations.AddConstraint(
            model_name='addressformat',
            constraint=models.UniqueConstraint(fields=('identifier',), name='unique_officekit_addressformat.identifier'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(fields=('identifier',), name='unique_officekit_address.identifier'),
        ),
        migrations.AddField(
            model_name='person',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddConstraint(
            model_name='groupmember',
            constraint=models.UniqueConstraint(fields=('identifier',), name='unique_officekit_groupmember.identifier'),
        ),
        migrations.AlterUniqueTogether(
            name='groupassignment',
            unique_together={('group', 'member')},
        ),
    ]
