# Generated by Django 4.2 on 2023-05-08 19:18

from django.db import migrations, models
import django.db.models.deletion
import tag_fields.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tag_fields', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CustomPKPet',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='DirectCustomPKFood',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='DirectCustomPKPet',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='DirectFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DirectPet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DirectTrackedFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='DirectTrackedPet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='MultipleTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='OfficialPet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OfficialTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('official', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='TrackedTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('created_by', models.CharField(max_length=50)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UUIDPet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='UUIDTag',
            fields=[
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleTag',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tag_fields.modeltag',),
        ),
        migrations.CreateModel(
            name='ArticleTaggedItem',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tag_fields.modeltagintfk',),
        ),
        migrations.CreateModel(
            name='Child',
            fields=[
                ('parent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.parent')),
            ],
            bases=('tests.parent',),
        ),
        migrations.CreateModel(
            name='CustomPKHousePet',
            fields=[
                ('custompkpet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.custompkpet')),
                ('trained', models.BooleanField(default=False)),
            ],
            bases=('tests.custompkpet',),
        ),
        migrations.CreateModel(
            name='DirectCustomPKHousePet',
            fields=[
                ('directcustompkpet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.directcustompkpet')),
                ('trained', models.BooleanField(default=False)),
            ],
            bases=('tests.directcustompkpet',),
        ),
        migrations.CreateModel(
            name='DirectHousePet',
            fields=[
                ('directpet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.directpet')),
                ('trained', models.BooleanField(default=False)),
            ],
            bases=('tests.directpet',),
        ),
        migrations.CreateModel(
            name='DirectTrackedHousePet',
            fields=[
                ('directtrackedpet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.directtrackedpet')),
                ('trained', models.BooleanField(default=False)),
            ],
            bases=('tests.directtrackedpet',),
        ),
        migrations.CreateModel(
            name='HousePet',
            fields=[
                ('pet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.pet')),
                ('trained', models.BooleanField(default=False)),
            ],
            bases=('tests.pet',),
        ),
        migrations.CreateModel(
            name='MultiInheritanceFood',
            fields=[
                ('basefood_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.basefood')),
            ],
            bases=('tests.basefood',),
        ),
        migrations.CreateModel(
            name='OfficialHousePet',
            fields=[
                ('officialpet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.officialpet')),
                ('trained', models.BooleanField(default=False)),
            ],
            bases=('tests.officialpet',),
        ),
        migrations.CreateModel(
            name='UUIDHousePet',
            fields=[
                ('uuidpet_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tests.uuidpet')),
                ('trained', models.BooleanField(default=False)),
            ],
            bases=('tests.uuidpet',),
        ),
        migrations.CreateModel(
            name='UUIDTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tests.uuidtag')),
            ],
            options={
                'unique_together': {('content_type', 'object_id', 'tag')},
            },
        ),
        migrations.AddField(
            model_name='uuidpet',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.UUIDTaggedItem', to='tests.UUIDTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='UUIDFood',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.UUIDTaggedItem', to='tests.UUIDTag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ThroughGFK',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='tag_fields.modeltag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Through2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.multipletags')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tag_fields.modeltag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Through1',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.multipletags')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tag_fields.modeltag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='TaggedTrackedPet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=50)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.directtrackedpet')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_items', to='tests.trackedtag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedTrackedFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(max_length=50)),
                ('created_dt', models.DateTimeField(auto_now_add=True)),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.directtrackedfood')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_items', to='tests.trackedtag')),
            ],
            options={
                'unique_together': {('content_object', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TaggedPet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.directpet')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tag_fields.modeltag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.directfood')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tag_fields.modeltag')),
            ],
            options={
                'unique_together': {('content_object', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TaggedCustomPKPet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.directcustompkpet')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tag_fields.modeltag')),
            ],
            options={
                'unique_together': {('content_object', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TaggedCustomPKFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tests.directcustompkfood')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tag_fields.modeltag')),
            ],
            options={
                'unique_together': {('content_object', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='TaggedCustomPK',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(db_index=True, max_length=50, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tag_fields.modeltag')),
            ],
            options={
                'unique_together': {('object_id', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderedModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='OfficialThroughModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                ('extra_field', models.CharField(max_length=10)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='tests.officialtag')),
            ],
            options={
                'unique_together': {('content_type', 'object_id', 'tag')},
            },
        ),
        migrations.AddField(
            model_name='officialpet',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.OfficialThroughModel', to='tests.OfficialTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='OfficialFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.OfficialThroughModel', to='tests.OfficialTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Name',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='MultipleTagsGFK',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags1', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
                ('tags2', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.ThroughGFK', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.AddField(
            model_name='multipletags',
            name='tags1',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.Through1', to='tag_fields.ModelTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='multipletags',
            name='tags2',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.Through2', to='tag_fields.ModelTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.AddField(
            model_name='directtrackedpet',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.TaggedTrackedPet', to='tests.TrackedTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='directtrackedfood',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.TaggedTrackedFood', to='tests.TrackedTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='directpet',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.TaggedPet', to='tag_fields.ModelTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='directfood',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.TaggedFood', to='tag_fields.ModelTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='directcustompkpet',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.TaggedCustomPKPet', to='tag_fields.ModelTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='directcustompkfood',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.TaggedCustomPKFood', to='tag_fields.ModelTag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='custompkpet',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.TaggedCustomPK', to='tag_fields.ModelTag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='CustomPKFood',
            fields=[
                ('name', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.TaggedCustomPK', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='CustomManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='BlankTagModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('tags', tag_fields.managers.ModelTagsManager(blank=True, help_text='A comma-separated list of tags.', through='tag_fields.ModelTagIntFk', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('tags', tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.ArticleTaggedItem', to='tag_fields.ModelTag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='ProxyPhoto',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('tests.photo',),
        ),
        migrations.CreateModel(
            name='MultiInheritanceLazyResolutionFoodTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='tag_fields.modeltag')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='tests.multiinheritancefood')),
            ],
            options={
                'unique_together': {('content_object', 'tag')},
            },
        ),
        migrations.AddField(
            model_name='multiinheritancefood',
            name='tags',
            field=tag_fields.managers.ModelTagsManager(help_text='A comma-separated list of tags.', through='tests.MultiInheritanceLazyResolutionFoodTag', to='tag_fields.ModelTag', verbose_name='Tags'),
        ),
    ]
