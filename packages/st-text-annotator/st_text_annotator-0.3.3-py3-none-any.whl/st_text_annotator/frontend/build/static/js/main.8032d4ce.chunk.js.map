{"version":3,"sources":["Annotation.tsx","index.tsx"],"names":["Annotation","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","text","actual_text","annotations","selectedReference","getCharactersCountUntilNode","node","parent","walker","document","createTreeWalker","body","NodeFilter","SHOW_TEXT","charCount","nextNode","_walker$currentNode$t","currentNode","textContent","handleMouseUp","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_document$getSelectio","selection","_document$querySelect","selectedText","startIndex","endIndex","startAdjustment","endAdjustment","container","charsBeforeStart","charsBeforeEnd","reStartIndex","reEndIndex","_this$state","finalStartIndex","finalEndIndex","newAnnotations","wrap","_context","prev","next","getSelection","getRangeAt","toString","trim","startOffset","endOffset","getElementById","startContainer","endContainer","querySelector","charAt","match","undefined","abrupt","slice","isAnnotated","removeAnnotation","setState","push","start","end","label","Streamlit","setComponentValue","renderText","stop","_createClass","key","value","_componentDidMount","_callee2","_this$props$args","_context2","this","props","_this$state2","i","_this$state3","splice","_addReference","_callee3","index","_context3","_selectReference","_callee4","_context4","_x","_removeReference","_callee5","_context5","_x2","_this$state4","_jsx","children","sort","a","b","forEach","annotation","substring","className","_this2","_jsxs","onClick","addReference","map","reference","_reference$","selectReference","xmlns","viewBox","fill","removeReference","fillRule","d","id","onMouseUp","StreamlitComponentBase","withStreamlitConnection","createRoot","render","MyComponent"],"mappings":"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","file":"static/js/main.8032d4ce.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from \"react\"\n\ninterface Reference {\n  start: number,\n  end: number,\n  label: string\n}\n\ninterface State {\n  text: string\n  actual_text: JSX.Element[]\n  selectedReference: number\n  annotations: Reference[][]\n}\n\nclass Annotation extends StreamlitComponentBase<State> {\n  state: State = {\n    text: \"\",\n    actual_text: [],\n    annotations: [],\n    selectedReference: 0\n  }\n\n  async componentDidMount(): Promise<void> {\n    const { text, annotations } = this.props.args\n\n    await this.setState({ text, annotations })\n    await this.setState({ actual_text: this.renderText() })\n    Streamlit.setComponentValue(annotations)\n  }\n\n  isAnnotated(start: number, end: number): boolean {\n    const { annotations, selectedReference } = this.state\n    \n    if (!annotations[selectedReference]) {\n      return false\n    }\n\n    for (let i = 0; i < annotations[selectedReference].length; i++) {\n      if (\n        (start >= annotations[selectedReference][i].start && end <= annotations[selectedReference][i].end) ||\n        (start <= annotations[selectedReference][i].start && end >= annotations[selectedReference][i].end) ||\n        (start <= annotations[selectedReference][i].start && end > annotations[selectedReference][i].start && end <= annotations[selectedReference][i].end) ||\n        (start >= annotations[selectedReference][i].start && start < annotations[selectedReference][i].end && end >= annotations[selectedReference][i].end)\n        ) {\n        return true\n      }\n    }\n    return false\n  }\n\n  removeAnnotation(start: number, end: number): Reference[][] {\n    const { annotations, selectedReference } = this.state\n\n    for (let i = 0; i < annotations[selectedReference].length; i++) {\n      if (\n        (start >= annotations[selectedReference][i].start && end <= annotations[selectedReference][i].end) ||\n        (start <= annotations[selectedReference][i].start && end >= annotations[selectedReference][i].end) ||\n        (start <= annotations[selectedReference][i].start && end > annotations[selectedReference][i].start && end <= annotations[selectedReference][i].end) ||\n        (start >= annotations[selectedReference][i].start && start < annotations[selectedReference][i].end && end >= annotations[selectedReference][i].end)\n        ) {\n        annotations[selectedReference].splice(i, 1)\n        break\n      }\n    }\n\n    if (annotations[selectedReference].length === 0) {\n      annotations.splice(selectedReference, 1)\n    }\n\n    return annotations\n  }\n\n  getCharactersCountUntilNode = (node: Node, parent: HTMLElement | null) => {\n    const walker = document.createTreeWalker(\n      parent || document.body,\n      NodeFilter.SHOW_TEXT,\n      null,\n    );\n    \n    let charCount = 0;\n    while (walker.nextNode()) {\n      if (walker.currentNode === node) {\n        break;\n      }\n      charCount += walker.currentNode.textContent?.length || 0;\n    }\n\n    return charCount;\n  }\n\n  handleMouseUp = async () => {\n    const selection = document.getSelection()?.getRangeAt(0)\n\n    if (selection && selection.toString().trim() !== \"\") {\n      let selectedText = selection.toString()\n\n      let startIndex = selection.startOffset\n      let endIndex = selection.endOffset\n      let startAdjustment = 0\n      let endAdjustment = 0\n\n      const container = document.getElementById(\"actual-text\")\n      const charsBeforeStart = this.getCharactersCountUntilNode(selection.startContainer, container);\n      const charsBeforeEnd = this.getCharactersCountUntilNode(selection.endContainer, container);\n\n      startIndex += charsBeforeStart\n      endIndex += charsBeforeEnd\n\n      const textContent = document.querySelector(\"#actual-text\")?.textContent || \"\"\n\n      const reStartIndex = /^[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g\n      while (!(textContent.charAt(startIndex + startAdjustment - 1) === \" \" || textContent.charAt(startIndex + startAdjustment - 1).match(reStartIndex)) && textContent?.charAt(startIndex + startAdjustment - 1) !== undefined) {\n        if (textContent.charAt(startIndex + startAdjustment - 1) === '') {\n          break\n        }\n\n        startAdjustment -= 1\n      }\n\n      const reEndIndex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]$/g\n      while (!(textContent.charAt(endIndex + endAdjustment) === \" \" || textContent.charAt(endIndex + endAdjustment).match(reEndIndex)) && textContent.charAt(endIndex + endAdjustment) !== undefined) {\n        if (textContent.charAt(endIndex + endAdjustment) === '') {\n          break\n        }\n\n        endAdjustment += 1\n      }\n\n      selectedText = textContent.slice(startIndex + startAdjustment, endIndex + endAdjustment) || \"\"\n\n      const { annotations, selectedReference } = this.state\n\n      if (!annotations[selectedReference]) {\n        annotations[selectedReference] = []\n      }\n\n      const finalStartIndex = startIndex + startAdjustment\n      const finalEndIndex = endIndex + endAdjustment\n\n      if (this.isAnnotated(finalStartIndex, finalEndIndex)) {\n        const newAnnotations = this.removeAnnotation(finalStartIndex, finalEndIndex)\n        await this.setState({ annotations: newAnnotations })\n      } else {\n        annotations[selectedReference].push({ start: finalStartIndex, end: finalEndIndex, label: selectedText })\n        await this.setState({ annotations })\n      }\n\n      Streamlit.setComponentValue(annotations)\n    }\n\n    this.setState({ actual_text: this.renderText() })\n  }\n\n  async addReference(): Promise<void> {\n    const { annotations } = this.state\n\n    // if selected annotation is empty do not add a new one\n    if (annotations[this.state.selectedReference] && annotations[this.state.selectedReference].length === 0) {\n      return\n    }\n\n    const index = annotations.length + 1\n    \n    if (!annotations[index]) {\n      annotations[index] = []\n    }\n\n    await this.setState({ \n      selectedReference: index,\n      annotations\n    })\n\n    this.setState({ actual_text: this.renderText() })\n  }\n\n  async selectReference(index: number): Promise<void> {\n    if (this.state.selectedReference === index || !this.state.annotations[index]) {\n      return\n    }\n\n    await this.setState({ selectedReference: index })\n    this.setState({ actual_text: this.renderText() })\n  }\n\n  async removeReference(index: number): Promise<void> {\n    const { annotations } = this.state\n\n    annotations.splice(index, 1)\n\n    await this.setState({ annotations, selectedReference: 0 })\n    this.setState({ actual_text: this.renderText() })\n    Streamlit.setComponentValue(annotations)\n  }\n\n  renderText(): JSX.Element[] {\n    const { text, annotations, selectedReference } = this.state\n    const actual_text: JSX.Element[] = []\n\n    if (!annotations[selectedReference]) {\n      return [<span>{text}</span>]\n    }\n\n\n    let start = 0\n\n    if (annotations[selectedReference].length > 0) {\n      annotations[selectedReference].sort((a, b) => a.start - b.start)\n    }\n\n    annotations[selectedReference].forEach((annotation, index) => {\n      actual_text.push(<span>{text.substring(start, annotation.start)}</span>)\n      actual_text.push(<span className=\"annotated bg-blue-500 text-gray-100\">{text.substring(annotation.start, annotation.end)}</span>)\n      start = annotation.end\n    })\n    actual_text.push(<span>{text.substring(start, text.length)}</span>)\n\n\n    return actual_text\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div>\n        <div className=\"flex flex-row flex-wrap\">\n          <div\n            className=\"flex flex-wrap px-4 py-2 m-1 justify-between items-center text-sm font-medium cursor-pointer hover:bg-blue-600 hover:text-gray-100 bg-blue-500 text-gray-100\"\n            onClick={ () => this.addReference() }\n            >\n            <span>Add</span>\n          </div>\n          {this.state.annotations.map((reference, index) => (\n            <span\n              key={index}\n              className={\"flex flex-wrap pl-4 pr-2 py-2 m-1 justify-between items-center text-sm font-medium cursor-pointer hover:bg-blue-600 hover:text-gray-100\" + (this.state.selectedReference === index ? \" bg-blue-500 text-gray-100\" : \" bg-blue-900 text-gray-200\")}\n              onClick={() => { this.selectReference(index) }}\n            >\n              {reference[0]?.label}\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"h-5 w-5 ml-3 hover:text-gray-300\" viewBox=\"0 0 20 20\"\n                fill=\"currentColor\"\n                onClick={() => { this.removeReference(index) }}\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\n                />\n              </svg>\n            </span>\n          ))}\n        </div>\n        <div id=\"actual-text\" className=\"mt-5 h-full\" onMouseUp={this.handleMouseUp}>\n          {this.state.actual_text}\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default withStreamlitConnection(Annotation)\n\n","import { createRoot } from 'react-dom/client';\nimport MyComponent from \"./Annotation\"\nimport React from 'react';\n\nconst container = document.getElementById(\"root\")\nconst root = createRoot(container)\n\nroot.render(<MyComponent />)\n"],"sourceRoot":""}