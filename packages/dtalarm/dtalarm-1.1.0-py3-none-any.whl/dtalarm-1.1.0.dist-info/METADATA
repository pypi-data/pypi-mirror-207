Metadata-Version: 2.1
Name: dtalarm
Version: 1.1.0
Summary: Python integration with DRIVE
Home-page: UNKNOWN
Author: TimeAshore
Author-email: timeashore@163.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Pillow
Requires-Dist: requests
Requires-Dist: kaleido (>=0.2.1)
Requires-Dist: plotly
Requires-Dist: numpy
Requires-Dist: pandas

# Dtalarm


## Installation


```shell
$ pip install dtalarm
```


## Usage

Register a new service on the DRIVE server and get the secret key.


The `DTAlarmConfig` module records the configuration information required to send alarms. Here, you need to configure a server address.

```python
from dtalarm import DTAlarmConfig

DTAlarmConfig.SERVER = ""
```

Generating alarms is very easy if the service is pre-configured, the following case will send alarms to the preset receivers. 
```python
from dtalarm import Alarm

alarm = Alarm(secret_key="")
alarm.title = "Title"
```

If the service is not pre-configured, alarms can also be sent in the following way:

Import the `TeamsChannelAlarm` class or the `TeamsPersonalAlarm` class from the package and configure the secret_key property.

After initialize, you can assign a value to the alarm object. If the alarm content is a dataframe, please use the to_json method and assign it to the table property.
```python
from dtalarm import TeamsChannelAlarm

alarm = TeamsChannelAlarm(secret_key="", channel_address="", template="message_only_v1")

alarm.title = "Title"
alarm.text = "Content"
alarm.table = df.to_json()
```


Finally call the send function to send, which can receive parameters supported by requests like timeout (how many seconds to wait for the server response). 

```python
response = alarm.send()
```


## Dependencies


Dtalarm supports CPython 3.6.8+, PyPy, and PyPy3.6.8+.

You can install all dependencies automatically with the following command:


```shell
$ pip install dtalarm['Pillow', 'requests', 'kaleido', 'plotly', 'numpy', 'pandas']
```


## Documentation

*Please install the following version dependencies when send error: ['Pillow==8.4.0', 'requests==2.27.1', 'kaleido==0.2.1', 'plotly==5.9.0', 'numpy==1.19.5', 'pandas==1.1.5']*


