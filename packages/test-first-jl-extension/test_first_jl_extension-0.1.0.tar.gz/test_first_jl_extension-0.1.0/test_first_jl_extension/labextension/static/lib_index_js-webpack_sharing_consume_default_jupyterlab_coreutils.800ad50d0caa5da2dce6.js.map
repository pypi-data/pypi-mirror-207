{"version":3,"file":"lib_index_js-webpack_sharing_consume_default_jupyterlab_coreutils.800ad50d0caa5da2dce6.js","mappings":";;;;;;;;;;;;;;;;;AACqD;AAGgB;AAE9D,MAAM,eAAe;IAI1B,YAAY,GAAoB;QAC9B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IACD;;;;;;OAMG;IACH,SAAS,CAAC,KAAoB;QAC5B,MAAM,WAAW,GAAG,GAAG,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YAEnC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CACvB,0DAA0D,CAC3D,CAAC;QACJ,CAAC,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,+DAAa,CAAC;YAC/B,KAAK,EAAE,kBAAkB;YACzB,OAAO,EAAE,WAAW;YACpB,OAAO,EAAE,kBAAkB;SAC5B,CAAC,CAAC;QAEH,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QAErD,OAAO,IAAI,kEAAkB,CAAC,GAAG,EAAE;YACjC,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;;;;;;;;;;;;;;;;;;;;ACzCgE;AACqC;AAOzD;AAE7C,MAAM,MAAO,SAAQ,gHAAqB;CAAG;AACtC,MAAM,QAAQ,GAAsB;IACzC;QACE,EAAE,EAAE,0CAA0C;QAC9C,KAAK,EAAE,kBAAkB;QACzB,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,EAAE;YACpC,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,WAAW,EAAE;gBAC3B,6DAA6D;gBAC7D,aAAa;gBACb,MAAM,YAAY,GAAG,UAAU,CAAC,UAAU,CAAC;gBAC3C,KAAK,YAAY,CAAC,WAAW,CAAC,0BAA0B,EAAE;oBACxD,OAAO,EAAE,0BAA0B;oBACnC,SAAS,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC;iBACxC,CAAC,CAAC;aACJ;QACH,CAAC;QACD,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;QACtB,IAAI,EAAE,CAAC;KACR;CACF,CAAC;AACF;;GAEG;AACH,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,gCAAgC;IACpC,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,2EAAkB,CAAC;IAC9B,QAAQ,EAAE,CAAC,GAAoB,EAAE,cAAkC,EAAE,EAAE;QACrE,cAAc,CAAC,QAAQ,CAAC;YACtB,OAAO,EAAE;gBACP,wBAAwB,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC;gBACjE,EAAE,EAAE,sBAAsB;gBAC1B,IAAI,EAAE,aAAa;gBACnB,QAAQ,EAAE,QAAQ;aACnB;SACF,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,IAAI,sDAAe,CAAC,GAAG,CAAC,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,4DAA4D,CAAC,CAAC;QAC1E,GAAG,CAAC,WAAW,CAAC,kBAAkB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzD,CAAC;CACF,CAAC;AAEF,iEAAe,MAAM,EAAC","sources":["webpack://test-first-jl-extension/./src/JlButton.tsx","webpack://test-first-jl-extension/./src/index.ts"],"sourcesContent":["import { JupyterFrontEnd } from \"@jupyterlab/application\";\nimport { ToolbarButton } from \"@jupyterlab/apputils\";\nimport { DocumentRegistry } from \"@jupyterlab/docregistry\";\nimport { INotebookModel, NotebookPanel } from \"@jupyterlab/notebook\";\nimport { DisposableDelegate, IDisposable } from \"@lumino/disposable\";\n\nexport class ButtonExtension\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\n{\n  app: JupyterFrontEnd;\n  constructor(app: JupyterFrontEnd) {\n    this.app = app;\n  }\n  /**\n   * Create a new extension for the notebook panel widget.\n   *\n   * @param panel Notebook panel\n   * @param context Notebook context\n   * @returns Disposable on the added button\n   */\n  createNew(panel: NotebookPanel): IDisposable {\n    const clearOutput = () => {\n      console.log(this.app);\n      console.log(\"Inside button click\");\n\n      this.app.commands.execute(\n        \"lsp:test-first-jl-extension:show-hello-world-file_editor\"\n      );\n    };\n    const button = new ToolbarButton({\n      label: \"Show hello world\",\n      onClick: clearOutput,\n      tooltip: \"Show hello world\",\n    });\n\n    panel.toolbar.insertItem(10, \"clearOutputs\", button);\n\n    return new DisposableDelegate(() => {\n      button.dispose();\n    });\n  }\n}\n","import { ILSPFeatureManager } from '@jupyter-lsp/jupyterlab-lsp';\nimport { CodeMirrorIntegration } from '@jupyter-lsp/jupyterlab-lsp/lib/editor_integration/codemirror';\nimport { IFeatureCommand } from '@jupyter-lsp/jupyterlab-lsp/lib/feature';\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { ButtonExtension } from './JlButton';\n\nclass AdopCM extends CodeMirrorIntegration {}\nexport const COMMANDS: IFeatureCommand[] = [\n  {\n    id: 'test-first-jl-extension:show-hello-world',\n    label: 'Show hello world',\n    execute: ({ connection, document }) => {\n      if (connection?.isConnected) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const wsConnection = connection.connection;\n        void wsConnection.sendRequest('workspace/executeCommand', {\n          command: 'manthan.show_hello_world',\n          arguments: [document.document_info.uri]\n        });\n      }\n    },\n    is_enabled: () => true,\n    rank: 4\n  }\n];\n/**\n * Initialization data for the test-first-jl-extension extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'test-first-jl-extension:plugin',\n  autoStart: true,\n  optional: [ILSPFeatureManager],\n  activate: (app: JupyterFrontEnd, featureManager: ILSPFeatureManager) => {\n    featureManager.register({\n      feature: {\n        editorIntegrationFactory: new Map([['CodeMirrorEditor', AdopCM]]),\n        id: 'jle:show_hello_world',\n        name: 'hello world',\n        commands: COMMANDS\n      }\n    });\n\n    const button = new ButtonExtension(app);\n    console.log('JupyterLab extension test-first-jl-extension is activated!');\n    app.docRegistry.addWidgetExtension('Notebook', button);\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}