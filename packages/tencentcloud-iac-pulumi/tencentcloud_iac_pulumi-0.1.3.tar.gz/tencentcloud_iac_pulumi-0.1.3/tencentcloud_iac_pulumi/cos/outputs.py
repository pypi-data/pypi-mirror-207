# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BucketCorsRule',
    'BucketDomainCertificateAttachmentDomainCertificate',
    'BucketDomainCertificateAttachmentDomainCertificateCertificate',
    'BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert',
    'BucketLifecycleRule',
    'BucketLifecycleRuleExpiration',
    'BucketLifecycleRuleNonCurrentExpiration',
    'BucketLifecycleRuleNonCurrentTransition',
    'BucketLifecycleRuleTransition',
    'BucketOriginDomainRule',
    'BucketOriginPullRule',
    'BucketReplicaRule',
    'BucketWebsite',
    'GetBucketsBucketListResult',
    'GetBucketsBucketListCorsRuleResult',
    'GetBucketsBucketListLifecycleRuleResult',
    'GetBucketsBucketListLifecycleRuleExpirationResult',
    'GetBucketsBucketListLifecycleRuleNonCurrentExpirationResult',
    'GetBucketsBucketListLifecycleRuleNonCurrentTransitionResult',
    'GetBucketsBucketListLifecycleRuleTransitionResult',
    'GetBucketsBucketListOriginDomainRuleResult',
    'GetBucketsBucketListOriginPullRuleResult',
    'GetBucketsBucketListWebsiteResult',
]

@pulumi.output_type
class BucketCorsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "exposeHeaders":
            suggest = "expose_headers"
        elif key == "maxAgeSeconds":
            suggest = "max_age_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketCorsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketCorsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketCorsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 expose_headers: Optional[Sequence[str]] = None,
                 max_age_seconds: Optional[int] = None):
        """
        :param Sequence[str] allowed_headers: Specifies which headers are allowed.
        :param Sequence[str] allowed_methods: Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
        :param Sequence[str] allowed_origins: Specifies which origins are allowed.
        :param Sequence[str] expose_headers: Specifies expose header in the response.
        :param int max_age_seconds: Specifies time in seconds that browser can cache the response for a preflight request.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        Specifies which headers are allowed.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        Specifies which origins are allowed.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        """
        Specifies expose header in the response.
        """
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[int]:
        """
        Specifies time in seconds that browser can cache the response for a preflight request.
        """
        return pulumi.get(self, "max_age_seconds")


@pulumi.output_type
class BucketDomainCertificateAttachmentDomainCertificate(dict):
    def __init__(__self__, *,
                 certificate: 'outputs.BucketDomainCertificateAttachmentDomainCertificateCertificate',
                 domain: str):
        """
        :param 'BucketDomainCertificateAttachmentDomainCertificateCertificateArgs' certificate: Certificate info.
        :param str domain: The name of domain.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def certificate(self) -> 'outputs.BucketDomainCertificateAttachmentDomainCertificateCertificate':
        """
        Certificate info.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The name of domain.
        """
        return pulumi.get(self, "domain")


@pulumi.output_type
class BucketDomainCertificateAttachmentDomainCertificateCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certType":
            suggest = "cert_type"
        elif key == "customCert":
            suggest = "custom_cert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketDomainCertificateAttachmentDomainCertificateCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketDomainCertificateAttachmentDomainCertificateCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketDomainCertificateAttachmentDomainCertificateCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_type: str,
                 custom_cert: 'outputs.BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert'):
        """
        :param str cert_type: Certificate type.
        :param 'BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs' custom_cert: Custom certificate.
        """
        pulumi.set(__self__, "cert_type", cert_type)
        pulumi.set(__self__, "custom_cert", custom_cert)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> str:
        """
        Certificate type.
        """
        return pulumi.get(self, "cert_type")

    @property
    @pulumi.getter(name="customCert")
    def custom_cert(self) -> 'outputs.BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert':
        """
        Custom certificate.
        """
        return pulumi.get(self, "custom_cert")


@pulumi.output_type
class BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCert.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert: str,
                 private_key: str):
        """
        :param str cert: Public key of certificate.
        :param str private_key: Private key of certificate.
        """
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter
    def cert(self) -> str:
        """
        Public key of certificate.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        """
        Private key of certificate.
        """
        return pulumi.get(self, "private_key")


@pulumi.output_type
class BucketLifecycleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterPrefix":
            suggest = "filter_prefix"
        elif key == "nonCurrentExpiration":
            suggest = "non_current_expiration"
        elif key == "nonCurrentTransitions":
            suggest = "non_current_transitions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_prefix: str,
                 expiration: Optional['outputs.BucketLifecycleRuleExpiration'] = None,
                 id: Optional[str] = None,
                 non_current_expiration: Optional['outputs.BucketLifecycleRuleNonCurrentExpiration'] = None,
                 non_current_transitions: Optional[Sequence['outputs.BucketLifecycleRuleNonCurrentTransition']] = None,
                 transitions: Optional[Sequence['outputs.BucketLifecycleRuleTransition']] = None):
        """
        :param str filter_prefix: Object key prefix identifying one or more objects to which the rule applies.
        :param 'BucketLifecycleRuleExpirationArgs' expiration: Specifies a period in the object's expire (documented below).
        :param str id: A unique identifier for the rule. It can be up to 255 characters.
        :param 'BucketLifecycleRuleNonCurrentExpirationArgs' non_current_expiration: Specifies when non current object versions shall expire.
        :param Sequence['BucketLifecycleRuleNonCurrentTransitionArgs'] non_current_transitions: Specifies a period in the non current object's transitions.
        :param Sequence['BucketLifecycleRuleTransitionArgs'] transitions: Specifies a period in the object's transitions (documented below).
        """
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if non_current_expiration is not None:
            pulumi.set(__self__, "non_current_expiration", non_current_expiration)
        if non_current_transitions is not None:
            pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> str:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "filter_prefix")

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.BucketLifecycleRuleExpiration']:
        """
        Specifies a period in the object's expire (documented below).
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A unique identifier for the rule. It can be up to 255 characters.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nonCurrentExpiration")
    def non_current_expiration(self) -> Optional['outputs.BucketLifecycleRuleNonCurrentExpiration']:
        """
        Specifies when non current object versions shall expire.
        """
        return pulumi.get(self, "non_current_expiration")

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Optional[Sequence['outputs.BucketLifecycleRuleNonCurrentTransition']]:
        """
        Specifies a period in the non current object's transitions.
        """
        return pulumi.get(self, "non_current_transitions")

    @property
    @pulumi.getter
    def transitions(self) -> Optional[Sequence['outputs.BucketLifecycleRuleTransition']]:
        """
        Specifies a period in the object's transitions (documented below).
        """
        return pulumi.get(self, "transitions")


@pulumi.output_type
class BucketLifecycleRuleExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteMarker":
            suggest = "delete_marker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 days: Optional[int] = None,
                 delete_marker: Optional[bool] = None):
        """
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param bool delete_marker: Indicates whether the delete marker of an expired object will be removed.
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if delete_marker is not None:
            pulumi.set(__self__, "delete_marker", delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="deleteMarker")
    def delete_marker(self) -> Optional[bool]:
        """
        Indicates whether the delete marker of an expired object will be removed.
        """
        return pulumi.get(self, "delete_marker")


@pulumi.output_type
class BucketLifecycleRuleNonCurrentExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonCurrentDays":
            suggest = "non_current_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleNonCurrentExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleNonCurrentExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleNonCurrentExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 non_current_days: Optional[int] = None):
        """
        :param int non_current_days: Number of days after non current object creation when the specific rule action takes effect. The maximum value is 3650.
        """
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[int]:
        """
        Number of days after non current object creation when the specific rule action takes effect. The maximum value is 3650.
        """
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class BucketLifecycleRuleNonCurrentTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"
        elif key == "nonCurrentDays":
            suggest = "non_current_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleNonCurrentTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleNonCurrentTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleNonCurrentTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: str,
                 non_current_days: Optional[int] = None):
        """
        :param str storage_class: Specifies the storage class to which you want the non current object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        :param int non_current_days: Number of days after non current object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the non current object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[int]:
        """
        Number of days after non current object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class BucketLifecycleRuleTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleRuleTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleRuleTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleRuleTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: str,
                 date: Optional[str] = None,
                 days: Optional[int] = None):
        """
        :param str storage_class: Specifies the storage class to which you want the object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the object to transition. Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class BucketOriginDomainRule(dict):
    def __init__(__self__, *,
                 domain: str,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str domain: Specify domain host.
        :param str status: Domain status, default: `ENABLED`.
        :param str type: Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
        """
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Specify domain host.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Domain status, default: `ENABLED`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specify origin domain type, available values: `REST`, `WEBSITE`, `ACCELERATE`, default: `REST`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class BucketOriginPullRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customHttpHeaders":
            suggest = "custom_http_headers"
        elif key == "followHttpHeaders":
            suggest = "follow_http_headers"
        elif key == "followQueryString":
            suggest = "follow_query_string"
        elif key == "followRedirection":
            suggest = "follow_redirection"
        elif key == "syncBackToSource":
            suggest = "sync_back_to_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketOriginPullRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketOriginPullRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketOriginPullRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 priority: int,
                 custom_http_headers: Optional[Mapping[str, Any]] = None,
                 follow_http_headers: Optional[Sequence[str]] = None,
                 follow_query_string: Optional[bool] = None,
                 follow_redirection: Optional[bool] = None,
                 prefix: Optional[str] = None,
                 protocol: Optional[str] = None,
                 sync_back_to_source: Optional[bool] = None):
        """
        :param str host: Allows only a domain name or IP address. You can optionally append a port number to the address.
        :param int priority: Priority of origin-pull rules, do not set the same value for multiple rules.
        :param Mapping[str, Any] custom_http_headers: Specifies the custom headers that you can add for COS to access your origin server.
        :param Sequence[str] follow_http_headers: Specifies the pass through headers when accessing the origin server.
        :param bool follow_query_string: Specifies whether to pass through COS request query string when accessing the origin server.
        :param bool follow_redirection: Specifies whether to follow 3XX redirect to another origin server to pull data from.
        :param str prefix: Triggers the origin-pull rule when the requested file name matches this prefix.
        :param str protocol: the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
        :param bool sync_back_to_source: If `true`, COS will not return 3XX status code when pulling data from an origin server. Current available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Allows only a domain name or IP address. You can optionally append a port number to the address.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        Priority of origin-pull rules, do not set the same value for multiple rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[Mapping[str, Any]]:
        """
        Specifies the custom headers that you can add for COS to access your origin server.
        """
        return pulumi.get(self, "custom_http_headers")

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[Sequence[str]]:
        """
        Specifies the pass through headers when accessing the origin server.
        """
        return pulumi.get(self, "follow_http_headers")

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[bool]:
        """
        Specifies whether to pass through COS request query string when accessing the origin server.
        """
        return pulumi.get(self, "follow_query_string")

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[bool]:
        """
        Specifies whether to follow 3XX redirect to another origin server to pull data from.
        """
        return pulumi.get(self, "follow_redirection")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Triggers the origin-pull rule when the requested file name matches this prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        the protocol used for COS to access the specified origin server. The available value include `HTTP`, `HTTPS` and `FOLLOW`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[bool]:
        """
        If `true`, COS will not return 3XX status code when pulling data from an origin server. Current available zone: ap-beijing, ap-shanghai, ap-singapore, ap-mumbai.
        """
        return pulumi.get(self, "sync_back_to_source")


@pulumi.output_type
class BucketReplicaRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBucket":
            suggest = "destination_bucket"
        elif key == "destinationStorageClass":
            suggest = "destination_storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketReplicaRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketReplicaRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketReplicaRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_bucket: str,
                 status: str,
                 destination_storage_class: Optional[str] = None,
                 id: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param str destination_bucket: Destination bucket identifier, format: `qcs::cos:<region>::<bucketname-appid>`. NOTE: destination bucket must enable versioning.
        :param str status: Status identifier, available values: `Enabled`, `Disabled`.
        :param str destination_storage_class: Storage class of destination, available values: `STANDARD`, `INTELLIGENT_TIERING`, `STANDARD_IA`. default is following current class of destination.
        :param str id: Name of a specific rule.
        :param str prefix: Prefix matching policy. Policies cannot overlap; otherwise, an error will be returned. To match the root directory, leave this parameter empty.
        """
        pulumi.set(__self__, "destination_bucket", destination_bucket)
        pulumi.set(__self__, "status", status)
        if destination_storage_class is not None:
            pulumi.set(__self__, "destination_storage_class", destination_storage_class)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> str:
        """
        Destination bucket identifier, format: `qcs::cos:<region>::<bucketname-appid>`. NOTE: destination bucket must enable versioning.
        """
        return pulumi.get(self, "destination_bucket")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status identifier, available values: `Enabled`, `Disabled`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="destinationStorageClass")
    def destination_storage_class(self) -> Optional[str]:
        """
        Storage class of destination, available values: `STANDARD`, `INTELLIGENT_TIERING`, `STANDARD_IA`. default is following current class of destination.
        """
        return pulumi.get(self, "destination_storage_class")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Name of a specific rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix matching policy. Policies cannot overlap; otherwise, an error will be returned. To match the root directory, leave this parameter empty.
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class BucketWebsite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorDocument":
            suggest = "error_document"
        elif key == "indexDocument":
            suggest = "index_document"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketWebsite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketWebsite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketWebsite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: Optional[str] = None,
                 error_document: Optional[str] = None,
                 index_document: Optional[str] = None):
        """
        :param str error_document: An absolute path to the document to return in case of a 4XX error.
        :param str index_document: COS returns this index document when requests are made to the root domain or any of the subfolders.
        """
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[str]:
        """
        An absolute path to the document to return in case of a 4XX error.
        """
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[str]:
        """
        COS returns this index document when requests are made to the root domain or any of the subfolders.
        """
        return pulumi.get(self, "index_document")


@pulumi.output_type
class GetBucketsBucketListResult(dict):
    def __init__(__self__, *,
                 acl: str,
                 acl_body: str,
                 bucket: str,
                 cors_rules: Sequence['outputs.GetBucketsBucketListCorsRuleResult'],
                 cos_bucket_url: str,
                 lifecycle_rules: Sequence['outputs.GetBucketsBucketListLifecycleRuleResult'],
                 origin_domain_rules: Sequence['outputs.GetBucketsBucketListOriginDomainRuleResult'],
                 origin_pull_rules: Sequence['outputs.GetBucketsBucketListOriginPullRuleResult'],
                 tags: Mapping[str, Any],
                 websites: Sequence['outputs.GetBucketsBucketListWebsiteResult']):
        """
        :param str acl: Bucket access control configurations.
        :param str acl_body: Bucket verbose acl configurations.
        :param str bucket: Bucket name, the format likes `<bucket>-<appid>`.
        :param Sequence['GetBucketsBucketListCorsRuleArgs'] cors_rules: A list of CORS rule configurations.
        :param str cos_bucket_url: The URL of this cos bucket.
        :param Sequence['GetBucketsBucketListLifecycleRuleArgs'] lifecycle_rules: The lifecycle configuration of a bucket.
        :param Sequence['GetBucketsBucketListOriginDomainRuleArgs'] origin_domain_rules: Bucket origin domain rules.
        :param Sequence['GetBucketsBucketListOriginPullRuleArgs'] origin_pull_rules: Bucket Origin-Pull rules.
        :param Mapping[str, Any] tags: Tags to filter bucket.
        :param Sequence['GetBucketsBucketListWebsiteArgs'] websites: A list of one element containing configuration parameters used when the bucket is used as a website.
        """
        pulumi.set(__self__, "acl", acl)
        pulumi.set(__self__, "acl_body", acl_body)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "cors_rules", cors_rules)
        pulumi.set(__self__, "cos_bucket_url", cos_bucket_url)
        pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        pulumi.set(__self__, "origin_domain_rules", origin_domain_rules)
        pulumi.set(__self__, "origin_pull_rules", origin_pull_rules)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "websites", websites)

    @property
    @pulumi.getter
    def acl(self) -> str:
        """
        Bucket access control configurations.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="aclBody")
    def acl_body(self) -> str:
        """
        Bucket verbose acl configurations.
        """
        return pulumi.get(self, "acl_body")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        Bucket name, the format likes `<bucket>-<appid>`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Sequence['outputs.GetBucketsBucketListCorsRuleResult']:
        """
        A list of CORS rule configurations.
        """
        return pulumi.get(self, "cors_rules")

    @property
    @pulumi.getter(name="cosBucketUrl")
    def cos_bucket_url(self) -> str:
        """
        The URL of this cos bucket.
        """
        return pulumi.get(self, "cos_bucket_url")

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleResult']:
        """
        The lifecycle configuration of a bucket.
        """
        return pulumi.get(self, "lifecycle_rules")

    @property
    @pulumi.getter(name="originDomainRules")
    def origin_domain_rules(self) -> Sequence['outputs.GetBucketsBucketListOriginDomainRuleResult']:
        """
        Bucket origin domain rules.
        """
        return pulumi.get(self, "origin_domain_rules")

    @property
    @pulumi.getter(name="originPullRules")
    def origin_pull_rules(self) -> Sequence['outputs.GetBucketsBucketListOriginPullRuleResult']:
        """
        Bucket Origin-Pull rules.
        """
        return pulumi.get(self, "origin_pull_rules")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags to filter bucket.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def websites(self) -> Sequence['outputs.GetBucketsBucketListWebsiteResult']:
        """
        A list of one element containing configuration parameters used when the bucket is used as a website.
        """
        return pulumi.get(self, "websites")


@pulumi.output_type
class GetBucketsBucketListCorsRuleResult(dict):
    def __init__(__self__, *,
                 allowed_headers: Sequence[str],
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 expose_headers: Sequence[str],
                 max_age_seconds: int):
        """
        :param Sequence[str] allowed_headers: Specifies which headers are allowed.
        :param Sequence[str] allowed_methods: Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
        :param Sequence[str] allowed_origins: Specifies which origins are allowed.
        :param Sequence[str] expose_headers: Specifies expose header in the response.
        :param int max_age_seconds: Specifies time in seconds that browser can cache the response for a preflight request.
        """
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        pulumi.set(__self__, "expose_headers", expose_headers)
        pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Sequence[str]:
        """
        Specifies which headers are allowed.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        Specifies which methods are allowed. Can be GET, PUT, POST, DELETE or HEAD.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        Specifies which origins are allowed.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Sequence[str]:
        """
        Specifies expose header in the response.
        """
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> int:
        """
        Specifies time in seconds that browser can cache the response for a preflight request.
        """
        return pulumi.get(self, "max_age_seconds")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleResult(dict):
    def __init__(__self__, *,
                 expirations: Sequence['outputs.GetBucketsBucketListLifecycleRuleExpirationResult'],
                 filter_prefix: str,
                 non_current_expirations: Sequence['outputs.GetBucketsBucketListLifecycleRuleNonCurrentExpirationResult'],
                 non_current_transitions: Sequence['outputs.GetBucketsBucketListLifecycleRuleNonCurrentTransitionResult'],
                 transitions: Sequence['outputs.GetBucketsBucketListLifecycleRuleTransitionResult']):
        """
        :param Sequence['GetBucketsBucketListLifecycleRuleExpirationArgs'] expirations: Specifies a period in the object's expire.
        :param str filter_prefix: Object key prefix identifying one or more objects to which the rule applies.
        :param Sequence['GetBucketsBucketListLifecycleRuleNonCurrentExpirationArgs'] non_current_expirations: Specifies when non current object versions shall expire.
        :param Sequence['GetBucketsBucketListLifecycleRuleNonCurrentTransitionArgs'] non_current_transitions: Specifies when to transition objects of non current versions and the target storage class.
        :param Sequence['GetBucketsBucketListLifecycleRuleTransitionArgs'] transitions: Specifies a period in the object's transitions.
        """
        pulumi.set(__self__, "expirations", expirations)
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        pulumi.set(__self__, "non_current_expirations", non_current_expirations)
        pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter
    def expirations(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleExpirationResult']:
        """
        Specifies a period in the object's expire.
        """
        return pulumi.get(self, "expirations")

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> str:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "filter_prefix")

    @property
    @pulumi.getter(name="nonCurrentExpirations")
    def non_current_expirations(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleNonCurrentExpirationResult']:
        """
        Specifies when non current object versions shall expire.
        """
        return pulumi.get(self, "non_current_expirations")

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleNonCurrentTransitionResult']:
        """
        Specifies when to transition objects of non current versions and the target storage class.
        """
        return pulumi.get(self, "non_current_transitions")

    @property
    @pulumi.getter
    def transitions(self) -> Sequence['outputs.GetBucketsBucketListLifecycleRuleTransitionResult']:
        """
        Specifies a period in the object's transitions.
        """
        return pulumi.get(self, "transitions")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleExpirationResult(dict):
    def __init__(__self__, *,
                 date: str,
                 days: int):
        """
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def date(self) -> str:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> int:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleNonCurrentExpirationResult(dict):
    def __init__(__self__, *,
                 non_current_days: int):
        """
        :param int non_current_days: Number of days after non current object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> int:
        """
        Number of days after non current object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleNonCurrentTransitionResult(dict):
    def __init__(__self__, *,
                 non_current_days: int,
                 storage_class: str):
        """
        :param int non_current_days: Number of days after non current object creation when the specific rule action takes effect.
        :param str storage_class: Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
        """
        pulumi.set(__self__, "non_current_days", non_current_days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> int:
        """
        Number of days after non current object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "non_current_days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class GetBucketsBucketListLifecycleRuleTransitionResult(dict):
    def __init__(__self__, *,
                 date: str,
                 days: int,
                 storage_class: str):
        """
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param str storage_class: Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def date(self) -> str:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> int:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the object to transition. Available values include STANDARD, STANDARD_IA and ARCHIVE.
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class GetBucketsBucketListOriginDomainRuleResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBucketsBucketListOriginPullRuleResult(dict):
    def __init__(__self__, *,
                 host: str,
                 priority: int,
                 custom_http_headers: Optional[Mapping[str, Any]] = None,
                 follow_http_headers: Optional[Sequence[str]] = None,
                 follow_query_string: Optional[bool] = None,
                 follow_redirection: Optional[bool] = None,
                 prefix: Optional[str] = None,
                 protocol: Optional[str] = None,
                 sync_back_to_source: Optional[bool] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_http_headers")

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "follow_http_headers")

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[bool]:
        return pulumi.get(self, "follow_query_string")

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[bool]:
        return pulumi.get(self, "follow_redirection")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[bool]:
        return pulumi.get(self, "sync_back_to_source")


@pulumi.output_type
class GetBucketsBucketListWebsiteResult(dict):
    def __init__(__self__, *,
                 error_document: str,
                 index_document: str):
        """
        :param str error_document: An absolute path to the document to return in case of a 4XX error.
        :param str index_document: COS returns this index document when requests are made to the root domain or any of the subfolders.
        """
        pulumi.set(__self__, "error_document", error_document)
        pulumi.set(__self__, "index_document", index_document)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> str:
        """
        An absolute path to the document to return in case of a 4XX error.
        """
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> str:
        """
        COS returns this index document when requests are made to the root domain or any of the subfolders.
        """
        return pulumi.get(self, "index_document")


