# Generated by Django 4.1.1 on 2023-02-04 19:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import media_catalogue.models.media_item_fields
import media_catalogue.models.media_items
import media_catalogue.models.mixins
import modelcluster.fields
import taggit.managers
import wagtail.models.collections
import wagtail.search.index
import wagtail_attachments.models.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0005_auto_20220424_2025'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('wagtailcore', '0078_referenceindex'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('wagtail_attachments', '0002_add_attachment_roles'),
    ]

    operations = [
        migrations.CreateModel(
            name='MediaItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="The media item title as you'd like it to be seen by the public", max_length=255, verbose_name='title')),
                ('created_at', models.DateTimeField(default=None, editable=False, verbose_name='created at')),
                ('live', models.BooleanField(default=True, editable=False, verbose_name='live')),
                ('search_description', models.TextField(blank=True, verbose_name='search description')),
                ('go_live_at', models.DateTimeField(blank=True, null=True, verbose_name='go live date/time')),
                ('expire_at', models.DateTimeField(blank=True, null=True, verbose_name='expiry date/time')),
                ('expired', models.BooleanField(default=False, editable=False, verbose_name='expired')),
                ('first_published_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='first published at')),
                ('last_published_at', models.DateTimeField(editable=False, null=True, verbose_name='last published at')),
                ('collection', models.ForeignKey(default=wagtail.models.collections.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.collection', verbose_name='collection')),
                ('content_type', models.ForeignKey(editable=False, on_delete=models.SET(media_catalogue.models.media_items.get_default_media_item_content_type), related_name='media_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('created_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by user')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'Media Item',
                'verbose_name_plural': 'Media Items',
            },
            bases=(media_catalogue.models.mixins.ChangeScopeMixin, wagtail_attachments.models.mixins.SpecificMixin, wagtail_attachments.models.mixins.StorageMixin, wagtail_attachments.models.mixins.AttachableMixin, media_catalogue.models.mixins.PreviewGeneratorMixin, wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='UploadedMediaItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', media_catalogue.models.media_item_fields.MediaItemField(max_length=200, upload_to='uploaded_media_items')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
        ),
        migrations.CreateModel(
            name='MediaItemViewRestriction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restriction_type', models.CharField(choices=[('none', 'Public'), ('login', 'Private, accessible to logged-in users'), ('password', 'Private, accessible with the following password'), ('groups', 'Private, accessible to users in specific groups')], max_length=20)),
                ('password', models.CharField(blank=True, max_length=255, verbose_name='password')),
                ('groups', models.ManyToManyField(blank=True, to='auth.group', verbose_name='groups')),
                ('media_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_restrictions', to='media_catalogue.mediaitem', verbose_name='Media Item')),
            ],
            options={
                'verbose_name': 'media item view restriction',
                'verbose_name_plural': 'media item view restrictions',
            },
        ),
        migrations.CreateModel(
            name='MediaItemLogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField()),
                ('action', models.CharField(blank=True, db_index=True, max_length=255)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(db_index=True, verbose_name='timestamp (UTC)')),
                ('uuid', models.UUIDField(blank=True, editable=False, help_text='Log entries that happened as part of the same user action are assigned the same UUID', null=True)),
                ('content_changed', models.BooleanField(db_index=True, default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='contenttypes.contenttype', verbose_name='content type')),
                ('media_item', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='media_catalogue.mediaitem')),
                ('revision', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='wagtailcore.revision')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'media item log entry',
                'verbose_name_plural': 'media item log entries',
                'ordering': ['-timestamp', '-id'],
            },
        ),
        migrations.CreateModel(
            name='MediaItemAttachment',
            fields=[
                ('modelattachment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtail_attachments.modelattachment')),
                ('model', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='media_catalogue.mediaitem')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtail_attachments.modelattachment',),
        ),
        migrations.CreateModel(
            name='UniversalMediaItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_id', models.PositiveBigIntegerField()),
                ('created_at', models.DateTimeField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'Universal Media Item',
                'verbose_name_plural': 'Universal Media Items',
                'ordering': ['-created_at', 'id'],
                'unique_together': {('content_type', 'content_id')},
                'index_together': {('content_type', 'content_id')},
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='GroupMediaItemPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_type', models.CharField(choices=[('add', 'Add/edit media items you own'), ('edit', 'Edit any media item'), ('publish', 'Publish any media item'), ('lock', "Lock/unlock media items you've locked"), ('unlock', 'Unlock any media item')], max_length=20, verbose_name='permission type')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_item_permissions', to='auth.group', verbose_name='group')),
                ('media_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_permissions', to='media_catalogue.mediaitem', verbose_name='media_item')),
            ],
            options={
                'verbose_name': 'Group Media Item Permission',
                'verbose_name_plural': 'Group Media Item Permissions',
                'unique_together': {('group', 'media_item', 'permission_type')},
            },
        ),
    ]
