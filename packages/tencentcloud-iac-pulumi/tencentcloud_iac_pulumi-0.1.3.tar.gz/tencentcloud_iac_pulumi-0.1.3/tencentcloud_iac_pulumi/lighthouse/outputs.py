# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FirewallRuleFirewallRule',
    'InstanceContainer',
    'InstanceContainerEnv',
    'InstanceContainerPublishPort',
    'InstanceContainerVolume',
    'InstanceLoginConfiguration',
    'GetBundleBundleSetResult',
    'GetBundleBundleSetPriceResult',
    'GetBundleBundleSetPriceInstancePriceResult',
    'GetBundleFilterResult',
    'GetFirewallRulesTemplateFirewallRuleSetResult',
]

@pulumi.output_type
class FirewallRuleFirewallRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "firewallRuleDescription":
            suggest = "firewall_rule_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallRuleFirewallRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallRuleFirewallRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallRuleFirewallRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 action: Optional[str] = None,
                 cidr_block: Optional[str] = None,
                 firewall_rule_description: Optional[str] = None,
                 port: Optional[str] = None):
        """
        :param str protocol: Protocol. Valid values are TCP, UDP, ICMP, ALL.
        :param str action: Valid values are ACCEPT, DROP. Default value is ACCEPT.
        :param str cidr_block: IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
        :param str firewall_rule_description: Firewall rule description.
        :param str port: Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
        """
        pulumi.set(__self__, "protocol", protocol)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if firewall_rule_description is not None:
            pulumi.set(__self__, "firewall_rule_description", firewall_rule_description)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol. Valid values are TCP, UDP, ICMP, ALL.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        Valid values are ACCEPT, DROP. Default value is ACCEPT.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        """
        IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="firewallRuleDescription")
    def firewall_rule_description(self) -> Optional[str]:
        """
        Firewall rule description.
        """
        return pulumi.get(self, "firewall_rule_description")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        """
        Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class InstanceContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerImage":
            suggest = "container_image"
        elif key == "containerName":
            suggest = "container_name"
        elif key == "publishPorts":
            suggest = "publish_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command: Optional[str] = None,
                 container_image: Optional[str] = None,
                 container_name: Optional[str] = None,
                 envs: Optional[Sequence['outputs.InstanceContainerEnv']] = None,
                 publish_ports: Optional[Sequence['outputs.InstanceContainerPublishPort']] = None,
                 volumes: Optional[Sequence['outputs.InstanceContainerVolume']] = None):
        """
        :param str command: The command to run.
        :param str container_image: Container image address.
        :param str container_name: Container name.
        :param Sequence['InstanceContainerEnvArgs'] envs: List of environment variables.
        :param Sequence['InstanceContainerPublishPortArgs'] publish_ports: List of mappings of container ports and host ports.
        :param Sequence['InstanceContainerVolumeArgs'] volumes: List of container mount volumes.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)
        if container_image is not None:
            pulumi.set(__self__, "container_image", container_image)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if publish_ports is not None:
            pulumi.set(__self__, "publish_ports", publish_ports)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        """
        The command to run.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> Optional[str]:
        """
        Container image address.
        """
        return pulumi.get(self, "container_image")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        """
        Container name.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.InstanceContainerEnv']]:
        """
        List of environment variables.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="publishPorts")
    def publish_ports(self) -> Optional[Sequence['outputs.InstanceContainerPublishPort']]:
        """
        List of mappings of container ports and host ports.
        """
        return pulumi.get(self, "publish_ports")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.InstanceContainerVolume']]:
        """
        List of container mount volumes.
        """
        return pulumi.get(self, "volumes")


@pulumi.output_type
class InstanceContainerEnv(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Environment variable key.
        :param str value: Environment variable value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Environment variable key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Environment variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InstanceContainerPublishPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPort":
            suggest = "container_port"
        elif key == "hostPort":
            suggest = "host_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainerPublishPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainerPublishPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainerPublishPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_port: int,
                 host_port: int,
                 ip: Optional[str] = None,
                 protocol: Optional[str] = None):
        """
        :param int container_port: Container port.
        :param int host_port: Host port.
        :param str ip: External IP. It defaults to 0.0.0.0.
        :param str protocol: The protocol defaults to tcp. Valid values: tcp, udp and sctp.
        """
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "host_port", host_port)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        """
        Container port.
        """
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> int:
        """
        Host port.
        """
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        External IP. It defaults to 0.0.0.0.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        The protocol defaults to tcp. Valid values: tcp, udp and sctp.
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class InstanceContainerVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPath":
            suggest = "container_path"
        elif key == "hostPath":
            suggest = "host_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainerVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainerVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainerVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_path: str,
                 host_path: str):
        """
        :param str container_path: Container path.
        :param str host_path: Host path.
        """
        pulumi.set(__self__, "container_path", container_path)
        pulumi.set(__self__, "host_path", host_path)

    @property
    @pulumi.getter(name="containerPath")
    def container_path(self) -> str:
        """
        Container path.
        """
        return pulumi.get(self, "container_path")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> str:
        """
        Host path.
        """
        return pulumi.get(self, "host_path")


@pulumi.output_type
class InstanceLoginConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoGeneratePassword":
            suggest = "auto_generate_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLoginConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLoginConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLoginConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_generate_password: str,
                 password: Optional[str] = None):
        """
        :param str auto_generate_password: whether auto generate password. if false, need set password.
        :param str password: Login password.
        """
        pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> str:
        """
        whether auto generate password. if false, need set password.
        """
        return pulumi.get(self, "auto_generate_password")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Login password.
        """
        return pulumi.get(self, "password")


@pulumi.output_type
class GetBundleBundleSetResult(dict):
    def __init__(__self__, *,
                 bundle_display_label: str,
                 bundle_id: str,
                 bundle_sales_state: str,
                 bundle_type: str,
                 cpu: int,
                 internet_charge_type: str,
                 internet_max_bandwidth_out: int,
                 memory: int,
                 monthly_traffic: int,
                 prices: Sequence['outputs.GetBundleBundleSetPriceResult'],
                 support_linux_unix_platform: bool,
                 support_windows_platform: bool,
                 system_disk_size: int,
                 system_disk_type: str):
        """
        :param str bundle_display_label: Package tag.Valid values:ACTIVITY: promotional packageNORMAL: regular packageCAREFREE: carefree package.
        :param str bundle_id: Package ID.
        :param str bundle_sales_state: Package sale status. Valid values are AVAILABLE, SOLD_OUT.
        :param str bundle_type: Package type.Valid values:GENERAL_BUNDLE: generalSTORAGE_BUNDLE: Storage.
        :param int cpu: CPU.
        :param str internet_charge_type: Network billing mode.
        :param int internet_max_bandwidth_out: Peak bandwidth in Mbps.
        :param int memory: Memory size in GB.
        :param int monthly_traffic: Monthly network traffic in Gb.
        :param Sequence['GetBundleBundleSetPriceArgs'] prices: Current package unit price information.
        :param bool support_linux_unix_platform: Whether Linux/Unix is supported.
        :param bool support_windows_platform: Whether Windows is supported.
        :param int system_disk_size: System disk size.
        :param str system_disk_type: System disk type.
        """
        pulumi.set(__self__, "bundle_display_label", bundle_display_label)
        pulumi.set(__self__, "bundle_id", bundle_id)
        pulumi.set(__self__, "bundle_sales_state", bundle_sales_state)
        pulumi.set(__self__, "bundle_type", bundle_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "monthly_traffic", monthly_traffic)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "support_linux_unix_platform", support_linux_unix_platform)
        pulumi.set(__self__, "support_windows_platform", support_windows_platform)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)

    @property
    @pulumi.getter(name="bundleDisplayLabel")
    def bundle_display_label(self) -> str:
        """
        Package tag.Valid values:ACTIVITY: promotional packageNORMAL: regular packageCAREFREE: carefree package.
        """
        return pulumi.get(self, "bundle_display_label")

    @property
    @pulumi.getter(name="bundleId")
    def bundle_id(self) -> str:
        """
        Package ID.
        """
        return pulumi.get(self, "bundle_id")

    @property
    @pulumi.getter(name="bundleSalesState")
    def bundle_sales_state(self) -> str:
        """
        Package sale status. Valid values are AVAILABLE, SOLD_OUT.
        """
        return pulumi.get(self, "bundle_sales_state")

    @property
    @pulumi.getter(name="bundleType")
    def bundle_type(self) -> str:
        """
        Package type.Valid values:GENERAL_BUNDLE: generalSTORAGE_BUNDLE: Storage.
        """
        return pulumi.get(self, "bundle_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        CPU.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        """
        Network billing mode.
        """
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        """
        Peak bandwidth in Mbps.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory size in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="monthlyTraffic")
    def monthly_traffic(self) -> int:
        """
        Monthly network traffic in Gb.
        """
        return pulumi.get(self, "monthly_traffic")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetBundleBundleSetPriceResult']:
        """
        Current package unit price information.
        """
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="supportLinuxUnixPlatform")
    def support_linux_unix_platform(self) -> bool:
        """
        Whether Linux/Unix is supported.
        """
        return pulumi.get(self, "support_linux_unix_platform")

    @property
    @pulumi.getter(name="supportWindowsPlatform")
    def support_windows_platform(self) -> bool:
        """
        Whether Windows is supported.
        """
        return pulumi.get(self, "support_windows_platform")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> int:
        """
        System disk size.
        """
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> str:
        """
        System disk type.
        """
        return pulumi.get(self, "system_disk_type")


@pulumi.output_type
class GetBundleBundleSetPriceResult(dict):
    def __init__(__self__, *,
                 instance_prices: Sequence['outputs.GetBundleBundleSetPriceInstancePriceResult']):
        """
        :param Sequence['GetBundleBundleSetPriceInstancePriceArgs'] instance_prices: Instance price.
        """
        pulumi.set(__self__, "instance_prices", instance_prices)

    @property
    @pulumi.getter(name="instancePrices")
    def instance_prices(self) -> Sequence['outputs.GetBundleBundleSetPriceInstancePriceResult']:
        """
        Instance price.
        """
        return pulumi.get(self, "instance_prices")


@pulumi.output_type
class GetBundleBundleSetPriceInstancePriceResult(dict):
    def __init__(__self__, *,
                 currency: str,
                 discount: float,
                 discount_price: float,
                 original_bundle_price: float,
                 original_price: float):
        """
        :param str currency: Currency unit. Valid values: CNY and USD.
        :param float discount: Discount.
        :param float discount_price: Discounted price.
        :param float original_bundle_price: Original package unit price.
        :param float original_price: Original price.
        """
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "discount", discount)
        pulumi.set(__self__, "discount_price", discount_price)
        pulumi.set(__self__, "original_bundle_price", original_bundle_price)
        pulumi.set(__self__, "original_price", original_price)

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        Currency unit. Valid values: CNY and USD.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def discount(self) -> float:
        """
        Discount.
        """
        return pulumi.get(self, "discount")

    @property
    @pulumi.getter(name="discountPrice")
    def discount_price(self) -> float:
        """
        Discounted price.
        """
        return pulumi.get(self, "discount_price")

    @property
    @pulumi.getter(name="originalBundlePrice")
    def original_bundle_price(self) -> float:
        """
        Original package unit price.
        """
        return pulumi.get(self, "original_bundle_price")

    @property
    @pulumi.getter(name="originalPrice")
    def original_price(self) -> float:
        """
        Original price.
        """
        return pulumi.get(self, "original_price")


@pulumi.output_type
class GetBundleFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Field to be filtered.
        :param Sequence[str] values: Filter value of field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field to be filtered.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter value of field.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFirewallRulesTemplateFirewallRuleSetResult(dict):
    def __init__(__self__, *,
                 action: str,
                 app_type: str,
                 cidr_block: str,
                 firewall_rule_description: str,
                 port: str,
                 protocol: str):
        """
        :param str action: Valid values are (ACCEPT, DROP). Default value is ACCEPT.
        :param str app_type: Application type. Valid values are custom, HTTP (80), HTTPS (443), Linux login (22), Windows login (3389), MySQL (3306), SQL Server (1433), all TCP ports, all UDP ports, Ping-ICMP, ALL.
        :param str cidr_block: IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
        :param str firewall_rule_description: Firewall rule description.
        :param str port: Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
        :param str protocol: Protocol. Valid values are TCP, UDP, ICMP, ALL.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "app_type", app_type)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "firewall_rule_description", firewall_rule_description)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Valid values are (ACCEPT, DROP). Default value is ACCEPT.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> str:
        """
        Application type. Valid values are custom, HTTP (80), HTTPS (443), Linux login (22), Windows login (3389), MySQL (3306), SQL Server (1433), all TCP ports, all UDP ports, Ping-ICMP, ALL.
        """
        return pulumi.get(self, "app_type")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="firewallRuleDescription")
    def firewall_rule_description(self) -> str:
        """
        Firewall rule description.
        """
        return pulumi.get(self, "firewall_rule_description")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol. Valid values are TCP, UDP, ICMP, ALL.
        """
        return pulumi.get(self, "protocol")


