# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class AddAccountsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "customer_type",
            "routing_identifiers",
            "account_owner_names",
            "type",
            "account_identifiers",
        }
        
        class properties:
        
            @staticmethod
            def account_identifiers() -> typing.Type['AddAccountsRequestAccountIdentifiers']:
                return AddAccountsRequestAccountIdentifiers
            
            
            class account_owner_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                        pass
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'account_owner_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def customer_type() -> typing.Type['ExtAccountCustomerType']:
                return ExtAccountCustomerType
        
            @staticmethod
            def routing_identifiers() -> typing.Type['AddAccountsRequestRoutingIdentifiers']:
                return AddAccountsRequestRoutingIdentifiers
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CHECKING(cls):
                    return cls("CHECKING")
                
                @schemas.classproperty
                def SAVINGS(cls):
                    return cls("SAVINGS")
            business_id = schemas.UUIDSchema
            customer_id = schemas.UUIDSchema
            metadata = schemas.DictSchema
            
            
            class nickname(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_account_id(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def verification() -> typing.Type['AccountVerification']:
                return AccountVerification
            __annotations__ = {
                "account_identifiers": account_identifiers,
                "account_owner_names": account_owner_names,
                "customer_type": customer_type,
                "routing_identifiers": routing_identifiers,
                "type": type,
                "business_id": business_id,
                "customer_id": customer_id,
                "metadata": metadata,
                "nickname": nickname,
                "vendor_account_id": vendor_account_id,
                "verification": verification,
            }
    
    customer_type: 'ExtAccountCustomerType'
    routing_identifiers: 'AddAccountsRequestRoutingIdentifiers'
    account_owner_names: MetaOapg.properties.account_owner_names
    type: MetaOapg.properties.type
    account_identifiers: 'AddAccountsRequestAccountIdentifiers'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_identifiers"]) -> 'AddAccountsRequestAccountIdentifiers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_owner_names"]) -> MetaOapg.properties.account_owner_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_type"]) -> 'ExtAccountCustomerType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routing_identifiers"]) -> 'AddAccountsRequestRoutingIdentifiers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["business_id"]) -> MetaOapg.properties.business_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_id"]) -> MetaOapg.properties.customer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nickname"]) -> MetaOapg.properties.nickname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_account_id"]) -> MetaOapg.properties.vendor_account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verification"]) -> 'AccountVerification': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_identifiers", "account_owner_names", "customer_type", "routing_identifiers", "type", "business_id", "customer_id", "metadata", "nickname", "vendor_account_id", "verification", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_identifiers"]) -> 'AddAccountsRequestAccountIdentifiers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_owner_names"]) -> MetaOapg.properties.account_owner_names: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_type"]) -> 'ExtAccountCustomerType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routing_identifiers"]) -> 'AddAccountsRequestRoutingIdentifiers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["business_id"]) -> typing.Union[MetaOapg.properties.business_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_id"]) -> typing.Union[MetaOapg.properties.customer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nickname"]) -> typing.Union[MetaOapg.properties.nickname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_account_id"]) -> typing.Union[MetaOapg.properties.vendor_account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verification"]) -> typing.Union['AccountVerification', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_identifiers", "account_owner_names", "customer_type", "routing_identifiers", "type", "business_id", "customer_id", "metadata", "nickname", "vendor_account_id", "verification", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        customer_type: 'ExtAccountCustomerType',
        routing_identifiers: 'AddAccountsRequestRoutingIdentifiers',
        account_owner_names: typing.Union[MetaOapg.properties.account_owner_names, list, tuple, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        account_identifiers: 'AddAccountsRequestAccountIdentifiers',
        business_id: typing.Union[MetaOapg.properties.business_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        customer_id: typing.Union[MetaOapg.properties.customer_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        nickname: typing.Union[MetaOapg.properties.nickname, str, schemas.Unset] = schemas.unset,
        vendor_account_id: typing.Union[MetaOapg.properties.vendor_account_id, str, schemas.Unset] = schemas.unset,
        verification: typing.Union['AccountVerification', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddAccountsRequest':
        return super().__new__(
            cls,
            *_args,
            customer_type=customer_type,
            routing_identifiers=routing_identifiers,
            account_owner_names=account_owner_names,
            type=type,
            account_identifiers=account_identifiers,
            business_id=business_id,
            customer_id=customer_id,
            metadata=metadata,
            nickname=nickname,
            vendor_account_id=vendor_account_id,
            verification=verification,
            _configuration=_configuration,
            **kwargs,
        )

from synctera_client.model.account_verification import AccountVerification
from synctera_client.model.add_accounts_request_account_identifiers import AddAccountsRequestAccountIdentifiers
from synctera_client.model.add_accounts_request_routing_identifiers import AddAccountsRequestRoutingIdentifiers
from synctera_client.model.ext_account_customer_type import ExtAccountCustomerType
