# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class DeviceDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Optionally provided browser device details, used as a fallback in case there is an issue with Device Data Collection. Note that minimal field validation is performed.
    """


    class MetaOapg:
        required = {
            "javascript_enabled",
            "screen_width",
            "screen_height",
            "timezone",
            "color_depth",
            "header",
            "java_enabled",
            "language",
            "ip_address",
            "user_agent",
        }
        
        class properties:
            
            
            class color_depth(
                schemas.IntSchema
            ):
                pass
            header = schemas.StrSchema
            ip_address = schemas.StrSchema
            java_enabled = schemas.BoolSchema
            javascript_enabled = schemas.BoolSchema
            language = schemas.StrSchema
            
            
            class screen_height(
                schemas.IntSchema
            ):
                pass
            
            
            class screen_width(
                schemas.IntSchema
            ):
                pass
            
            
            class timezone(
                schemas.IntSchema
            ):
                pass
            user_agent = schemas.StrSchema
            __annotations__ = {
                "color_depth": color_depth,
                "header": header,
                "ip_address": ip_address,
                "java_enabled": java_enabled,
                "javascript_enabled": javascript_enabled,
                "language": language,
                "screen_height": screen_height,
                "screen_width": screen_width,
                "timezone": timezone,
                "user_agent": user_agent,
            }
    
    javascript_enabled: MetaOapg.properties.javascript_enabled
    screen_width: MetaOapg.properties.screen_width
    screen_height: MetaOapg.properties.screen_height
    timezone: MetaOapg.properties.timezone
    color_depth: MetaOapg.properties.color_depth
    header: MetaOapg.properties.header
    java_enabled: MetaOapg.properties.java_enabled
    language: MetaOapg.properties.language
    ip_address: MetaOapg.properties.ip_address
    user_agent: MetaOapg.properties.user_agent
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color_depth"]) -> MetaOapg.properties.color_depth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["header"]) -> MetaOapg.properties.header: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["java_enabled"]) -> MetaOapg.properties.java_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["javascript_enabled"]) -> MetaOapg.properties.javascript_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screen_height"]) -> MetaOapg.properties.screen_height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["screen_width"]) -> MetaOapg.properties.screen_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_agent"]) -> MetaOapg.properties.user_agent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["color_depth", "header", "ip_address", "java_enabled", "javascript_enabled", "language", "screen_height", "screen_width", "timezone", "user_agent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color_depth"]) -> MetaOapg.properties.color_depth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["header"]) -> MetaOapg.properties.header: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["java_enabled"]) -> MetaOapg.properties.java_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["javascript_enabled"]) -> MetaOapg.properties.javascript_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screen_height"]) -> MetaOapg.properties.screen_height: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["screen_width"]) -> MetaOapg.properties.screen_width: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_agent"]) -> MetaOapg.properties.user_agent: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["color_depth", "header", "ip_address", "java_enabled", "javascript_enabled", "language", "screen_height", "screen_width", "timezone", "user_agent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        javascript_enabled: typing.Union[MetaOapg.properties.javascript_enabled, bool, ],
        screen_width: typing.Union[MetaOapg.properties.screen_width, decimal.Decimal, int, ],
        screen_height: typing.Union[MetaOapg.properties.screen_height, decimal.Decimal, int, ],
        timezone: typing.Union[MetaOapg.properties.timezone, decimal.Decimal, int, ],
        color_depth: typing.Union[MetaOapg.properties.color_depth, decimal.Decimal, int, ],
        header: typing.Union[MetaOapg.properties.header, str, ],
        java_enabled: typing.Union[MetaOapg.properties.java_enabled, bool, ],
        language: typing.Union[MetaOapg.properties.language, str, ],
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, ],
        user_agent: typing.Union[MetaOapg.properties.user_agent, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviceDetails':
        return super().__new__(
            cls,
            *_args,
            javascript_enabled=javascript_enabled,
            screen_width=screen_width,
            screen_height=screen_height,
            timezone=timezone,
            color_depth=color_depth,
            header=header,
            java_enabled=java_enabled,
            language=language,
            ip_address=ip_address,
            user_agent=user_agent,
            _configuration=_configuration,
            **kwargs,
        )
