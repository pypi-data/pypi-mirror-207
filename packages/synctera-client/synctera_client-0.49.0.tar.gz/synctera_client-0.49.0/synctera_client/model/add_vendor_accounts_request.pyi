# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class AddVendorAccountsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "customer_type",
            "vendor",
        }
        
        class properties:
        
            @staticmethod
            def customer_type() -> typing.Type['ExtAccountCustomerType']:
                return ExtAccountCustomerType
        
            @staticmethod
            def vendor() -> typing.Type['ExternalAccountVendorValues']:
                return ExternalAccountVendorValues
            business_id = schemas.UUIDSchema
            customer_id = schemas.UUIDSchema
            
            
            class vendor_access_token(
                schemas.StrSchema
            ):
                pass
            
            
            class vendor_account_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrSchema
                    ):
                        pass
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendor_account_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            vendor_customer_id = schemas.StrSchema
            verify_owner = schemas.BoolSchema
            __annotations__ = {
                "customer_type": customer_type,
                "vendor": vendor,
                "business_id": business_id,
                "customer_id": customer_id,
                "vendor_access_token": vendor_access_token,
                "vendor_account_ids": vendor_account_ids,
                "vendor_customer_id": vendor_customer_id,
                "verify_owner": verify_owner,
            }
    
    customer_type: 'ExtAccountCustomerType'
    vendor: 'ExternalAccountVendorValues'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_type"]) -> 'ExtAccountCustomerType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> 'ExternalAccountVendorValues': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["business_id"]) -> MetaOapg.properties.business_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_id"]) -> MetaOapg.properties.customer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_access_token"]) -> MetaOapg.properties.vendor_access_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_account_ids"]) -> MetaOapg.properties.vendor_account_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_customer_id"]) -> MetaOapg.properties.vendor_customer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verify_owner"]) -> MetaOapg.properties.verify_owner: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customer_type", "vendor", "business_id", "customer_id", "vendor_access_token", "vendor_account_ids", "vendor_customer_id", "verify_owner", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_type"]) -> 'ExtAccountCustomerType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> 'ExternalAccountVendorValues': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["business_id"]) -> typing.Union[MetaOapg.properties.business_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_id"]) -> typing.Union[MetaOapg.properties.customer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_access_token"]) -> typing.Union[MetaOapg.properties.vendor_access_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_account_ids"]) -> typing.Union[MetaOapg.properties.vendor_account_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_customer_id"]) -> typing.Union[MetaOapg.properties.vendor_customer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verify_owner"]) -> typing.Union[MetaOapg.properties.verify_owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customer_type", "vendor", "business_id", "customer_id", "vendor_access_token", "vendor_account_ids", "vendor_customer_id", "verify_owner", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        customer_type: 'ExtAccountCustomerType',
        vendor: 'ExternalAccountVendorValues',
        business_id: typing.Union[MetaOapg.properties.business_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        customer_id: typing.Union[MetaOapg.properties.customer_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        vendor_access_token: typing.Union[MetaOapg.properties.vendor_access_token, str, schemas.Unset] = schemas.unset,
        vendor_account_ids: typing.Union[MetaOapg.properties.vendor_account_ids, list, tuple, schemas.Unset] = schemas.unset,
        vendor_customer_id: typing.Union[MetaOapg.properties.vendor_customer_id, str, schemas.Unset] = schemas.unset,
        verify_owner: typing.Union[MetaOapg.properties.verify_owner, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddVendorAccountsRequest':
        return super().__new__(
            cls,
            *_args,
            customer_type=customer_type,
            vendor=vendor,
            business_id=business_id,
            customer_id=customer_id,
            vendor_access_token=vendor_access_token,
            vendor_account_ids=vendor_account_ids,
            vendor_customer_id=vendor_customer_id,
            verify_owner=verify_owner,
            _configuration=_configuration,
            **kwargs,
        )

from synctera_client.model.ext_account_customer_type import ExtAccountCustomerType
from synctera_client.model.external_account_vendor_values import ExternalAccountVendorValues
