# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from osmosis.lockup import tx_pb2 as osmosis_dot_lockup_dot_tx__pb2


class MsgStub(object):
    """Msg defines the Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LockTokens = channel.unary_unary(
                '/osmosis.lockup.Msg/LockTokens',
                request_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgLockTokens.SerializeToString,
                response_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgLockTokensResponse.FromString,
                )
        self.BeginUnlockingAll = channel.unary_unary(
                '/osmosis.lockup.Msg/BeginUnlockingAll',
                request_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingAll.SerializeToString,
                response_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingAllResponse.FromString,
                )
        self.BeginUnlocking = channel.unary_unary(
                '/osmosis.lockup.Msg/BeginUnlocking',
                request_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlocking.SerializeToString,
                response_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingResponse.FromString,
                )
        self.ExtendLockup = channel.unary_unary(
                '/osmosis.lockup.Msg/ExtendLockup',
                request_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgExtendLockup.SerializeToString,
                response_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgExtendLockupResponse.FromString,
                )
        self.ForceUnlock = channel.unary_unary(
                '/osmosis.lockup.Msg/ForceUnlock',
                request_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgForceUnlock.SerializeToString,
                response_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgForceUnlockResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the Msg service.
    """

    def LockTokens(self, request, context):
        """LockTokens lock tokens
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BeginUnlockingAll(self, request, context):
        """BeginUnlockingAll begin unlocking all tokens
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BeginUnlocking(self, request, context):
        """MsgBeginUnlocking begins unlocking tokens by lock ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExtendLockup(self, request, context):
        """MsgEditLockup edits the existing lockups by lock ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForceUnlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LockTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.LockTokens,
                    request_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgLockTokens.FromString,
                    response_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgLockTokensResponse.SerializeToString,
            ),
            'BeginUnlockingAll': grpc.unary_unary_rpc_method_handler(
                    servicer.BeginUnlockingAll,
                    request_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingAll.FromString,
                    response_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingAllResponse.SerializeToString,
            ),
            'BeginUnlocking': grpc.unary_unary_rpc_method_handler(
                    servicer.BeginUnlocking,
                    request_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlocking.FromString,
                    response_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingResponse.SerializeToString,
            ),
            'ExtendLockup': grpc.unary_unary_rpc_method_handler(
                    servicer.ExtendLockup,
                    request_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgExtendLockup.FromString,
                    response_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgExtendLockupResponse.SerializeToString,
            ),
            'ForceUnlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ForceUnlock,
                    request_deserializer=osmosis_dot_lockup_dot_tx__pb2.MsgForceUnlock.FromString,
                    response_serializer=osmosis_dot_lockup_dot_tx__pb2.MsgForceUnlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'osmosis.lockup.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the Msg service.
    """

    @staticmethod
    def LockTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/osmosis.lockup.Msg/LockTokens',
            osmosis_dot_lockup_dot_tx__pb2.MsgLockTokens.SerializeToString,
            osmosis_dot_lockup_dot_tx__pb2.MsgLockTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BeginUnlockingAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/osmosis.lockup.Msg/BeginUnlockingAll',
            osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingAll.SerializeToString,
            osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BeginUnlocking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/osmosis.lockup.Msg/BeginUnlocking',
            osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlocking.SerializeToString,
            osmosis_dot_lockup_dot_tx__pb2.MsgBeginUnlockingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExtendLockup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/osmosis.lockup.Msg/ExtendLockup',
            osmosis_dot_lockup_dot_tx__pb2.MsgExtendLockup.SerializeToString,
            osmosis_dot_lockup_dot_tx__pb2.MsgExtendLockupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForceUnlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/osmosis.lockup.Msg/ForceUnlock',
            osmosis_dot_lockup_dot_tx__pb2.MsgForceUnlock.SerializeToString,
            osmosis_dot_lockup_dot_tx__pb2.MsgForceUnlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
