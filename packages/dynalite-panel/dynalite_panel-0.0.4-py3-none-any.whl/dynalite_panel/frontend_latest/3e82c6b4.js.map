{"version":3,"file":"3e82c6b4.js","mappings":";AAmDA;;;;AAIA;;AAIA;;AAGA;AACA;AACA;;AAEA;;;;;;AAOA;;;;AAIA;;;AAGA;;AAGA;;;;;;;;;;AAiDA","sources":["webpack://dynalitepanel/./src/dynalite-edit-dialog.ts"],"sourcesContent":["import { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement, property, queryAll, state } from \"lit/decorators\";\nimport type { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport { fireEvent } from \"../homeassistant-frontend/src/common/dom/fire_event\";\nimport { haStyle } from \"../homeassistant-frontend/src/resources/styles\";\nimport { CONF_DYNET_ID, EVENT_DIALOG_CLOSED } from \"./const\";\nimport type { DynaliteInput } from \"./dynalite-input\";\nimport type { DynaliteEditDialogParams, DynaliteRowData } from \"./show-dialog-dynalite-edit\";\nimport { DynaliteInputElement } from \"./dynalite-input-element\";\nimport \"@material/mwc-button\";\nimport \"../homeassistant-frontend/src/components/ha-dialog\";\nimport \"../homeassistant-frontend/src/components/ha-header-bar\";\nimport \"../homeassistant-frontend/src/components/ha-card\";\nimport \"./dynalite-action-button\";\n\n@customElement(\"dynalite-edit-dialog\")\nexport class DynaliteEditDialog extends DynaliteInputElement<DynaliteRowData> {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public narrow = false;\n\n  @state() private _params?: DynaliteEditDialogParams;\n\n  protected result = {};\n\n  protected settings = {};\n\n  @state() private _isNew = false;\n\n  @queryAll(\"dynalite-input\") _inputElements?: DynaliteInput[];\n\n  public async showDialog(params: DynaliteEditDialogParams): Promise<void> {\n    this.hass = params.hass;\n    this._params = params;\n    this.result = params.value;\n    this.settings = params.inputs;\n    this.excluded = { dynetId: params.excluded };\n    this.disabled = (params.disabled as any) || [];\n    this._isNew = !(CONF_DYNET_ID in this._params.value);\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) return html``;\n    this._genHelpers();\n    const canSave =\n      this.hasElementChanged &&\n      this._inputElements?.length &&\n      Array.from(this._inputElements).every((elem) => elem.isValid());\n    return html`\n      <ha-dialog open .heading=${\"abcde\"} @closed=${this._close}>\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <span slot=\"title\">\n              ${this._isNew\n                ? `New ${this._params.name}`\n                : `Edit ${this._params.name} ` + this._params.value.dynetId}\n            </span>\n            ${this._params.onDelete\n              ? html`<span slot=\"actionItems\">\n                  <dynalite-action-button\n                    @dynalite-action-button=${this._onDelete}\n                    param=${this._params.value.dynetId || \"\"}\n                    label=${this._params.name}\n                  ></dynalite-action-button>\n                </span>`\n              : html``}\n          </ha-header-bar>\n        </div>\n        <div class=\"wrapper\">\n          <ha-card outlined>\n            <div class=\"content\">\n              ${Object.keys(this._params.inputs).map((field) => this.genInputElement(field as any))}\n            </div>\n          </ha-card>\n        </div>\n        <mwc-button slot=\"primaryAction\" @click=${this._save} ?disabled=${!canSave}\n          >Update</mwc-button\n        >\n        <mwc-button slot=\"secondaryAction\" @click=${this._close}>Cancel</mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _onDelete(ev): void {\n    const dynetId = ev.detail;\n    this._params!.onDelete!(dynetId);\n    this._close();\n  }\n\n  private _close(): void {\n    this._params = undefined;\n    fireEvent(this, EVENT_DIALOG_CLOSED, { dialog: this.localName });\n  }\n\n  private _save(): void {\n    this._params?.onSave(this._params);\n    this._close();\n  }\n\n  private _genHelpers(): void {\n    const res: { [key: string]: string } = {};\n    if (this._params?.value.dynetId || (this.result as DynaliteRowData).dynetId) {\n      Object.entries(this._params!.helpers!).forEach(([key, value]) => {\n        res[key] = value.replace(CONF_DYNET_ID, (this.result as DynaliteRowData).dynetId!);\n      });\n    } else {\n      Object.entries(this._params!.helpers!).forEach(([key, value]) => {\n        if (!value.includes(CONF_DYNET_ID)) {\n          res[key] = value;\n        }\n      });\n    }\n    this.helpers = res;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-dialog {\n          --dialog-content-position: static;\n          --dialog-content-padding: 0;\n          --dialog-z-index: 6;\n        }\n        .content {\n          display: block;\n          padding: 20px 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-edit-dialog\": DynaliteEditDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}