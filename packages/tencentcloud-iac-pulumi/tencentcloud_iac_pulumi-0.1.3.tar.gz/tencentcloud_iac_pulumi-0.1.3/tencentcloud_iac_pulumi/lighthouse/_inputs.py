# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FirewallRuleFirewallRuleArgs',
    'InstanceContainerArgs',
    'InstanceContainerEnvArgs',
    'InstanceContainerPublishPortArgs',
    'InstanceContainerVolumeArgs',
    'InstanceLoginConfigurationArgs',
    'GetBundleFilterArgs',
]

@pulumi.input_type
class FirewallRuleFirewallRuleArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 firewall_rule_description: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] protocol: Protocol. Valid values are TCP, UDP, ICMP, ALL.
        :param pulumi.Input[str] action: Valid values are ACCEPT, DROP. Default value is ACCEPT.
        :param pulumi.Input[str] cidr_block: IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
        :param pulumi.Input[str] firewall_rule_description: Firewall rule description.
        :param pulumi.Input[str] port: Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
        """
        pulumi.set(__self__, "protocol", protocol)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if firewall_rule_description is not None:
            pulumi.set(__self__, "firewall_rule_description", firewall_rule_description)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol. Valid values are TCP, UDP, ICMP, ALL.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are ACCEPT, DROP. Default value is ACCEPT.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        IP range or IP (mutually exclusive). Default value is 0.0.0.0/0, which indicates all sources.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="firewallRuleDescription")
    def firewall_rule_description(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall rule description.
        """
        return pulumi.get(self, "firewall_rule_description")

    @firewall_rule_description.setter
    def firewall_rule_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "firewall_rule_description", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Port. Valid values are ALL, one single port, multiple ports separated by commas, or port range indicated by a minus sign.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class InstanceContainerArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[str]] = None,
                 container_image: Optional[pulumi.Input[str]] = None,
                 container_name: Optional[pulumi.Input[str]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerEnvArgs']]]] = None,
                 publish_ports: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerPublishPortArgs']]]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerVolumeArgs']]]] = None):
        """
        :param pulumi.Input[str] command: The command to run.
        :param pulumi.Input[str] container_image: Container image address.
        :param pulumi.Input[str] container_name: Container name.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceContainerEnvArgs']]] envs: List of environment variables.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceContainerPublishPortArgs']]] publish_ports: List of mappings of container ports and host ports.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceContainerVolumeArgs']]] volumes: List of container mount volumes.
        """
        if command is not None:
            pulumi.set(__self__, "command", command)
        if container_image is not None:
            pulumi.set(__self__, "container_image", container_image)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if publish_ports is not None:
            pulumi.set(__self__, "publish_ports", publish_ports)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        The command to run.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> Optional[pulumi.Input[str]]:
        """
        Container image address.
        """
        return pulumi.get(self, "container_image")

    @container_image.setter
    def container_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_image", value)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[pulumi.Input[str]]:
        """
        Container name.
        """
        return pulumi.get(self, "container_name")

    @container_name.setter
    def container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container_name", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerEnvArgs']]]]:
        """
        List of environment variables.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="publishPorts")
    def publish_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerPublishPortArgs']]]]:
        """
        List of mappings of container ports and host ports.
        """
        return pulumi.get(self, "publish_ports")

    @publish_ports.setter
    def publish_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerPublishPortArgs']]]]):
        pulumi.set(self, "publish_ports", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerVolumeArgs']]]]:
        """
        List of container mount volumes.
        """
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceContainerVolumeArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class InstanceContainerEnvArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Environment variable key.
        :param pulumi.Input[str] value: Environment variable value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Environment variable key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Environment variable value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InstanceContainerPublishPortArgs:
    def __init__(__self__, *,
                 container_port: pulumi.Input[int],
                 host_port: pulumi.Input[int],
                 ip: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] container_port: Container port.
        :param pulumi.Input[int] host_port: Host port.
        :param pulumi.Input[str] ip: External IP. It defaults to 0.0.0.0.
        :param pulumi.Input[str] protocol: The protocol defaults to tcp. Valid values: tcp, udp and sctp.
        """
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "host_port", host_port)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> pulumi.Input[int]:
        """
        Container port.
        """
        return pulumi.get(self, "container_port")

    @container_port.setter
    def container_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "container_port", value)

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> pulumi.Input[int]:
        """
        Host port.
        """
        return pulumi.get(self, "host_port")

    @host_port.setter
    def host_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "host_port", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        External IP. It defaults to 0.0.0.0.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol defaults to tcp. Valid values: tcp, udp and sctp.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class InstanceContainerVolumeArgs:
    def __init__(__self__, *,
                 container_path: pulumi.Input[str],
                 host_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] container_path: Container path.
        :param pulumi.Input[str] host_path: Host path.
        """
        pulumi.set(__self__, "container_path", container_path)
        pulumi.set(__self__, "host_path", host_path)

    @property
    @pulumi.getter(name="containerPath")
    def container_path(self) -> pulumi.Input[str]:
        """
        Container path.
        """
        return pulumi.get(self, "container_path")

    @container_path.setter
    def container_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_path", value)

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> pulumi.Input[str]:
        """
        Host path.
        """
        return pulumi.get(self, "host_path")

    @host_path.setter
    def host_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "host_path", value)


@pulumi.input_type
class InstanceLoginConfigurationArgs:
    def __init__(__self__, *,
                 auto_generate_password: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auto_generate_password: whether auto generate password. if false, need set password.
        :param pulumi.Input[str] password: Login password.
        """
        pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> pulumi.Input[str]:
        """
        whether auto generate password. if false, need set password.
        """
        return pulumi.get(self, "auto_generate_password")

    @auto_generate_password.setter
    def auto_generate_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "auto_generate_password", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Login password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class GetBundleFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Field to be filtered.
        :param Sequence[str] values: Filter value of field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field to be filtered.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter value of field.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


