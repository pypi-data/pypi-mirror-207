# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceBackupPlanArgs',
    'InstanceDbNodeSetArgs',
    'ParameterTemplateModifyParamEntrySetArgs',
    'GetParameterTemplatesFilterArgs',
]

@pulumi.input_type
class InstanceBackupPlanArgs:
    def __init__(__self__, *,
                 backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 base_backup_retention_period: Optional[pulumi.Input[int]] = None,
                 max_backup_start_time: Optional[pulumi.Input[str]] = None,
                 min_backup_start_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_periods: List of backup period per week, available values: `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`. NOTE: At least specify two days.
        :param pulumi.Input[int] base_backup_retention_period: Specify days of the retention.
        :param pulumi.Input[str] max_backup_start_time: Specify latest backup start time, format `hh:mm:ss`.
        :param pulumi.Input[str] min_backup_start_time: Specify earliest backup start time, format `hh:mm:ss`.
        """
        if backup_periods is not None:
            pulumi.set(__self__, "backup_periods", backup_periods)
        if base_backup_retention_period is not None:
            pulumi.set(__self__, "base_backup_retention_period", base_backup_retention_period)
        if max_backup_start_time is not None:
            pulumi.set(__self__, "max_backup_start_time", max_backup_start_time)
        if min_backup_start_time is not None:
            pulumi.set(__self__, "min_backup_start_time", min_backup_start_time)

    @property
    @pulumi.getter(name="backupPeriods")
    def backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of backup period per week, available values: `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, `sunday`. NOTE: At least specify two days.
        """
        return pulumi.get(self, "backup_periods")

    @backup_periods.setter
    def backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_periods", value)

    @property
    @pulumi.getter(name="baseBackupRetentionPeriod")
    def base_backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specify days of the retention.
        """
        return pulumi.get(self, "base_backup_retention_period")

    @base_backup_retention_period.setter
    def base_backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_backup_retention_period", value)

    @property
    @pulumi.getter(name="maxBackupStartTime")
    def max_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Specify latest backup start time, format `hh:mm:ss`.
        """
        return pulumi.get(self, "max_backup_start_time")

    @max_backup_start_time.setter
    def max_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_backup_start_time", value)

    @property
    @pulumi.getter(name="minBackupStartTime")
    def min_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Specify earliest backup start time, format `hh:mm:ss`.
        """
        return pulumi.get(self, "min_backup_start_time")

    @min_backup_start_time.setter
    def min_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_backup_start_time", value)


@pulumi.input_type
class InstanceDbNodeSetArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] zone: Indicates the node available zone.
        :param pulumi.Input[str] role: Indicates node type, available values:`Primary`, `Standby`. Default: `Standby`.
        """
        pulumi.set(__self__, "zone", zone)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Indicates the node available zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates node type, available values:`Primary`, `Standby`. Default: `Standby`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class ParameterTemplateModifyParamEntrySetArgs:
    def __init__(__self__, *,
                 expected_value: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] expected_value: Modify the parameter value. The input parameters are passed in the form of strings, for example: decimal `0.1`, integer `1000`, enumeration `replica`.
        :param pulumi.Input[str] name: The parameter name.
        """
        pulumi.set(__self__, "expected_value", expected_value)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="expectedValue")
    def expected_value(self) -> pulumi.Input[str]:
        """
        Modify the parameter value. The input parameters are passed in the form of strings, for example: decimal `0.1`, integer `1000`, enumeration `replica`.
        """
        return pulumi.get(self, "expected_value")

    @expected_value.setter
    def expected_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "expected_value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetParameterTemplatesFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: One or more filter values.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        One or more filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


