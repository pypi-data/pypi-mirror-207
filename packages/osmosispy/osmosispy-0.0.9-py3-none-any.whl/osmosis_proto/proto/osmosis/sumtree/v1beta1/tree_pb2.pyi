"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Node(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHILDREN_FIELD_NUMBER: builtins.int
    @property
    def children(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Child]: ...
    def __init__(
        self,
        *,
        children: collections.abc.Iterable[global___Child] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["children", b"children"]) -> None: ...

global___Node = Node

@typing_extensions.final
class Child(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INDEX_FIELD_NUMBER: builtins.int
    ACCUMULATION_FIELD_NUMBER: builtins.int
    index: builtins.bytes
    accumulation: builtins.str
    def __init__(
        self,
        *,
        index: builtins.bytes = ...,
        accumulation: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["accumulation", b"accumulation", "index", b"index"]) -> None: ...

global___Child = Child

@typing_extensions.final
class Leaf(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LEAF_FIELD_NUMBER: builtins.int
    @property
    def leaf(self) -> global___Child: ...
    def __init__(
        self,
        *,
        leaf: global___Child | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["leaf", b"leaf"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["leaf", b"leaf"]) -> None: ...

global___Leaf = Leaf
