{"version":3,"file":"7717c19d.js","mappings":";;AAyJA;AACA;AACA;AACA;;;;;;;AAOA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMA;;;;;AAMA;;;;;;;;;;;AAkIA","sources":["webpack://dynalitepanel/./src/dynalite-global-settings.ts"],"sourcesContent":["import { ifDefined } from \"lit/directives/if-defined\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement, property, queryAll, state } from \"lit/decorators\";\nimport type { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport { haStyle } from \"../homeassistant-frontend/src/resources/styles\";\nimport { fireEvent } from \"../homeassistant-frontend/src/common/dom/fire_event\";\nimport { navigate } from \"../homeassistant-frontend/src/common/navigate\";\nimport {\n  CONF_ACTIVE,\n  CONF_ACTIVE_INIT,\n  CONF_ACTIVE_OFF,\n  CONF_ACTIVE_ON,\n  CONF_AUTODISCOVER,\n  CONF_CHANNEL,\n  CONF_CHANNEL_COVER,\n  CONF_CLASS,\n  CONF_CLOSE,\n  CONF_DURATION,\n  CONF_FADE,\n  CONF_NAME,\n  CONF_OPEN,\n  CONF_OVERRIDE_PRESETS,\n  CONF_OVERRIDE_TEMPLATES,\n  CONF_PRESET,\n  CONF_ROOM_OFF,\n  CONF_ROOM_ON,\n  CONF_STOP,\n  CONF_TILT,\n  CONF_TILT_ENABLED,\n  EVENT_CONFIG_CHANGED,\n  ROUTE_AREAS,\n  TEMPLATE_COVER,\n  TEMPLATE_ROOM,\n} from \"./const\";\nimport {\n  Dynalite,\n  dynaliteCopy,\n  DynaliteDefaultTemplates,\n  DynalitePresetData,\n  dynaliteRoute,\n  DynaliteTemplateData,\n  enumeratedTemplates,\n  panelTabs,\n} from \"./common\";\nimport type { DynaliteInput } from \"./dynalite-input\";\nimport {\n  DynaliteBooleanInput,\n  DynaliteDurationInput,\n  DynaliteFadeInput,\n  DynaliteIdInput,\n  DynaliteSelectInput,\n  DynaliteTextInput,\n} from \"./dynalite-input-settings\";\nimport { DynaliteInputElement } from \"./dynalite-input-element\";\nimport { showDynaliteSelectGatewayDialog } from \"./show-dialog-select-gateway\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"../homeassistant-frontend/src/layouts/hass-tabs-subpage\";\nimport \"../homeassistant-frontend/src/components/ha-card\";\nimport \"./dynalite-preset-table\";\n\ninterface DynaliteGlobalSettingsInput {\n  name: string;\n  autodiscover: boolean;\n  fade: string;\n  active: string;\n  overridePresets: boolean;\n  overrideTemplates: boolean;\n  room_on: string;\n  room_off: string;\n  open: string;\n  close: string;\n  stop: string;\n  channel_cover: string;\n  class: string;\n  duration: string;\n  tiltEnabled: boolean;\n  tilt: string;\n}\n\n@customElement(\"dynalite-global-settings\")\nexport class DynaliteGlobalSettings extends DynaliteInputElement<DynaliteGlobalSettingsInput> {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public dynalite!: Dynalite;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public narrow = false;\n\n  @state() private _hasInitialized = false;\n\n  @state() private _presets: { [key: string]: DynalitePresetData } = {};\n\n  @queryAll(\"dynalite-input\") _inputElements?: DynaliteInput[];\n\n  protected willUpdate(_changedProperties: Map<string | number | symbol, unknown>): void {\n    super.willUpdate(_changedProperties);\n    if (!this.dynalite) return;\n    if (!this._hasInitialized) {\n      this.settings.class.selection(this.dynalite.classSelection);\n      this.result = {\n        name: this.dynalite.config.name || \"\",\n        autodiscover: this.dynalite.config.autodiscover!,\n        fade: this.dynalite.config.default!.fade!,\n        active: this.dynalite.config.active!,\n        overridePresets: CONF_PRESET in this.dynalite.config,\n        overrideTemplates: false,\n        room_on: \"\",\n        room_off: \"\",\n        open: \"\",\n        close: \"\",\n        stop: \"\",\n        channel_cover: \"\",\n        class: \"\",\n        duration: \"\",\n        tiltEnabled: false,\n        tilt: DynaliteDefaultTemplates.time_cover!.tilt!,\n      };\n      this.helpers = {\n        name: \"Default: \" + this.dynalite.default.DEFAULT_NAME,\n        fade: \"0 For No fade\",\n      };\n      this._presets = dynaliteCopy(this.dynalite.config.preset || {});\n      enumeratedTemplates.forEach(([template, param]) => {\n        if (param in this.dynalite.config.template![template])\n          this.result[param] = this.dynalite.config.template![template][param];\n        this.helpers![param] = \"Default: \" + DynaliteDefaultTemplates[template][param];\n      });\n      if (parseFloat(this.result.tilt) === 0) {\n        this.result.tiltEnabled = false;\n        this.result.tilt = DynaliteDefaultTemplates.time_cover!.tilt!;\n      } else {\n        this.result.tiltEnabled = true;\n        this.result.tilt = this.dynalite.config.template!.time_cover!.tilt!;\n      }\n      this._hasInitialized = true;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.dynalite) {\n      return html``;\n    }\n    const canSave =\n      this.hasElementChanged &&\n      this._inputElements?.length &&\n      Array.from(this._inputElements).every(\n        (elem) =>\n          elem.isValid() || (elem.settings.nameVal === CONF_TILT && !this.result.tiltEnabled)\n      );\n    const showAdvanced = this.hass.userData?.showAdvanced;\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .tabs=${panelTabs}\n        .route=${this.route}\n        clickable\n      >\n        <div class=\"content\">\n          <ha-card outlined>\n            <div class=\"card-content\">\n              <h1>Configure Global Dynalite Settings</h1>\n              <p>Host: ${this.dynalite.config.host} Port: ${this.dynalite.config.port}</p>\n              ${Object.keys(this.dynalite.completeConfig).length > 1\n                ? html`<a @click=${this._handleChangeHost} href=\"#select-gateway\">Change</a>`\n                : html``}\n              <h2>Global Settings</h2>\n              ${this.genInputElement(CONF_NAME)} ${this.genInputElement(CONF_AUTODISCOVER)}\n              ${this.genInputElement(CONF_FADE)} ${this.genInputElement(CONF_ACTIVE)}\n              <h2>Settings for Blinds and Covers</h2>\n              ${this.genInputElement(CONF_CLASS)} ${this.genInputElement(CONF_DURATION)}\n              ${this.genInputElement(CONF_TILT_ENABLED)}\n              ${this.result.tiltEnabled ? this.genInputElement(CONF_TILT) : html``}\n              ${showAdvanced\n                ? html`\n                  <h1>Advanced Settings</h1>\n                  ${this.result.overridePresets ? html` <h2>Default Presets</h2>` : html``}\n                  ${this.genInputElement(CONF_OVERRIDE_PRESETS)}\n                  ${\n                    this.result.overridePresets\n                      ? html`<dynalite-preset-table\n                          .hass=${this.hass}\n                          .narrow=${this.narrow}\n                          .route=${this.route}\n                          .presets=${this._presets || {}}\n                          defaultFade=${ifDefined(this.dynalite.config.default?.fade)}\n                          @dynalite-table=${this._onDynaliteTableEvent}\n                        ></dynalite-preset-table>`\n                      : html``\n                  }\n                  </dynalite-preset-table>\n                  ${\n                    this.result.overrideTemplates\n                      ? html` <h2>Area Behavior Default Settings</h2>\n                          <p>Advanced only - recommended to leave empty</p>`\n                      : html``\n                  }\n                  ${this.genInputElement(CONF_OVERRIDE_TEMPLATES)}\n                  ${\n                    this.result.overrideTemplates\n                      ? html`\n                          <b>${TEMPLATE_ROOM}</b>\n                          ${this.genInputElement(CONF_ROOM_ON)}\n                          ${this.genInputElement(CONF_ROOM_OFF)}\n                          <b>${TEMPLATE_COVER}</b>\n                          ${this.genInputElement(CONF_OPEN)} ${this.genInputElement(CONF_CLOSE)}\n                          ${this.genInputElement(CONF_STOP)}\n                          ${this.genInputElement(CONF_CHANNEL_COVER)}\n                        `\n                      : html``\n                  }`\n                : html``}\n            </div>\n            <div class=\"card-actions\">\n              <mwc-button @click=${this._save} ?disabled=${!canSave}> Save </mwc-button>\n            </div>\n          </ha-card>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _onDynaliteTableEvent(_ev: CustomEvent) {\n    this.hasElementChanged = true;\n    this.requestUpdate();\n  }\n\n  private _save() {\n    // fill complete and send update signal\n    if (this.result.name) this.dynalite.config.name = this.result.name;\n    else delete this.dynalite.config.name;\n    this.dynalite.config.autodiscover = this.result.autodiscover;\n    this.dynalite.config.default!.fade = this.result.fade;\n    this.dynalite.config.active = this.result.active;\n    if (this.result.overridePresets)\n      this.dynalite.config.preset = JSON.parse(JSON.stringify(this._presets));\n    else delete this.dynalite.config.preset;\n    const templates: DynaliteTemplateData = { room: {}, time_cover: {} };\n    enumeratedTemplates.forEach(([template, param]) => {\n      if (this.result[param] !== \"\") templates[template][param] = this.result[param];\n    });\n    if (!this.result.tiltEnabled) templates.time_cover!.tilt = \"0\";\n    this.dynalite.config.template = templates;\n    this.hasElementChanged = false;\n    fireEvent(this, EVENT_CONFIG_CHANGED, { value: true });\n    this.requestUpdate();\n  }\n\n  private _handleChangeHost(ev) {\n    ev.preventDefault();\n    showDynaliteSelectGatewayDialog(this, {\n      hass: this.hass,\n      dynalite: this.dynalite,\n      onSave: this._hostChanged.bind(this),\n    });\n  }\n\n  private _hostChanged(entry_id: string): void {\n    this.dynalite.entry_id = entry_id;\n    fireEvent(this, EVENT_CONFIG_CHANGED, { value: false });\n    navigate(dynaliteRoute(ROUTE_AREAS));\n  }\n\n  protected result = {\n    name: \"\",\n    autodiscover: false,\n    fade: \"\",\n    active: \"off\",\n    overridePresets: false,\n    overrideTemplates: false,\n    room_on: \"\",\n    room_off: \"\",\n    open: \"\",\n    close: \"\",\n    stop: \"\",\n    channel_cover: \"\",\n    class: \"\",\n    duration: \"\",\n    tiltEnabled: false,\n    tilt: \"\",\n  };\n\n  protected settings = {\n    name: DynaliteTextInput(CONF_NAME)\n      .heading(\"System Name\")\n      .desc(\"User-defined name for this Dynalite system\"),\n    autodiscover: DynaliteBooleanInput(CONF_AUTODISCOVER)\n      .heading(\"Auto Discover\")\n      .desc(\"Discover devices dynamically (useful for initial setup)\"),\n    fade: DynaliteFadeInput(CONF_FADE)\n      .heading(\"Fade Time\")\n      .desc(\"Default fade for device actions (seconds)\"),\n    active: DynaliteSelectInput(CONF_ACTIVE)\n      .heading(\"Active Mode\")\n      .desc(\"Actively poll system - may increase load\")\n      .selection([\n        [CONF_ACTIVE_OFF, \"Not Active (default)\"],\n        [CONF_ACTIVE_INIT, \"Initial Init\"],\n        [CONF_ACTIVE_ON, \"Always Active\"],\n      ]),\n    class: DynaliteSelectInput(CONF_CLASS).heading(\"Type\").desc(\"Default type for new blinds\"),\n    duration: DynaliteDurationInput(CONF_DURATION)\n      .heading(\"Default Open/Close Duration\")\n      .desc(\"Time in seconds to open a blind\")\n      .required(),\n    tiltEnabled: DynaliteBooleanInput(CONF_TILT_ENABLED)\n      .heading(\"Enable Tilt\")\n      .desc(\"Enable tilt by default in blinds\"),\n    tilt: DynaliteDurationInput(CONF_TILT)\n      .heading(\"Default Tilt Duration\")\n      .desc(\"Time in seconds to open the tilt\")\n      .required(),\n    overridePresets: DynaliteBooleanInput(CONF_OVERRIDE_PRESETS)\n      .heading(\"Override Default Presets\")\n      .desc(\"Not recommended\"),\n    overrideTemplates: DynaliteBooleanInput(CONF_OVERRIDE_TEMPLATES)\n      .heading(\"Configure Behaviors\")\n      .desc(\"Not recommended\"),\n    room_on: DynaliteIdInput(CONF_ROOM_ON, CONF_PRESET)\n      .heading(\"Turn On\")\n      .desc(\"Preset that turns an area on\"),\n    room_off: DynaliteIdInput(CONF_ROOM_OFF, CONF_PRESET)\n      .heading(\"Turn Off\")\n      .desc(\"Preset that turns an area off\"),\n    open: DynaliteIdInput(CONF_OPEN, CONF_PRESET).heading(\"Open\").desc(\"Preset to open a blind\"),\n    close: DynaliteIdInput(CONF_CLOSE, CONF_PRESET)\n      .heading(\"Close\")\n      .desc(\"Preset to close a blind\"),\n    stop: DynaliteIdInput(CONF_STOP, CONF_PRESET).heading(\"Open\").desc(\"Preset to open a blind\"),\n    channel_cover: DynaliteIdInput(CONF_CHANNEL_COVER, CONF_CHANNEL)\n      .heading(\"Controlling channel\")\n      .desc(\"Channel number to control a blind\"),\n  };\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        p {\n          margin-top: 0;\n          margin-bottom: 0;\n        }\n        .content {\n          padding: 28px 20px 0;\n          display: block;\n          max-width: 600px;\n          margin: 0 auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-global-settings\": DynaliteGlobalSettings;\n  }\n}\n"],"names":[],"sourceRoot":""}