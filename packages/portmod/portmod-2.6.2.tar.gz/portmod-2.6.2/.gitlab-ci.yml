include:
  - template: Dependency-Scanning.gitlab-ci.yml

default:
  image: registry.gitlab.com/portmod/portmod/rust:latest
  before_script:
    - python -V  # Print out python version for debugging
    - rustc -V
    - pip install --upgrade -r requirements.txt --cache-dir .cache/pip
    - pip install --upgrade setuptools_scm --cache-dir .cache/pip
  cache:
    key: $CI_JOB_NAME
    paths:
      - .cache

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYLINTRC: ".pylintrc"

stages:
  - build
  - test
  - deploy

inquisitor:
  stage: test
  needs: ["install"]
  script:
  - ./bin/portmod sync openmw
  - python ${CI_PROJECT_DIR}/bin/inquisitor scan ~/.local/share/portmod/repos/openmw
  cache:
    key: $CI_JOB_NAME
    paths:
      - .cache
      - ~/.cache/portmod
      - ~/.local/share/portmod/repos

install:
  stage: build
  script:
  - mkdir -p .cache/tmp
  - pip install -e .[test] --cache-dir .cache/pip
  artifacts:
    paths:
      - portmodlib/portmod.cpython-*.so
  cache:
    key: build
    paths:
      - target
      - .cache

lint:
  stage: test
  needs: ["install"]
  script:
  - pip install --upgrade flake8 pylint setuptools_rust bandit mypy black isort --cache-dir .cache/pip
  - shopt -s globstar
  - flake8 --exclude .venv,--max-line-length=88 --filename '*.py,*.pybuild'
  - pylint -E portmod/**/*.py pybuild/**/*.py portmodlib/**/*.py
  # Enable selected pylint warnings
  - pylint portmod/**/*.py pybuild/**/*.py portmodlib/**/*.py --disable=all --enable=undefined-loop-variable
  - bandit -c .bandit.yaml **/*.py

lint-nodeps:
  stage: test
  needs: []
  script:
    - shopt -s globstar
    - pip install --upgrade mypy black isort --cache-dir .cache/pip
    - cargo clippy -- -D warnings
    - cargo audit
    - mypy --install-types --non-interactive --incremental --cache-dir .cache/mypy portmod/**/*.py pybuild/**/*.py portmodlib/**/*.py
    - black --diff --check **/*.{py,pybuild}
    - cargo fmt -- --check -l
    - isort --diff --check portmod pybuild portmodlib bin

pytest:
  stage: test
  needs: ["install"]
  script:
    # pytest-cov has special handling for subprocesses, which amazingly also works with sandboxing
    - pip install deprecated pytest pytest-cov setuptools_scm --upgrade --cache-dir .cache/pip
    - PYTHONWARNINGS=error pytest --cov
    - coverage xml
  coverage: '/TOTAL.*\s([.\d]+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

deploy:
  image: quay.io/pypa/manylinux2014_x86_64
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  before_script: []
  script: |
    curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
    export PATH="/opt/python/cp37-cp37m/bin:$HOME/.cargo/bin:$PATH"
    pip install -U twine "setuptools!=50.0" setuptools_rust wheel --cache-dir .cache/pip
    pip install .[man] --cache-dir .cache/pip
    python setup.py build_rust --inplace --release build_man
    # Remove in-place library so it doesn't get included in the wheel
    rm portmodlib/*.so
    rm build -r
    python setup.py bdist_wheel --py-limited-api=cp37
    python setup.py check sdist
    for whl in dist/*.whl; do
        auditwheel repair "$whl" -w dist/
        rm $whl
    done
    python -m twine upload dist/*
  cache:
    key: build
    paths:
      - target
      - .cache

gemnasium-python-dependency_scanning:
  inherit:
    default: false
  stage: test

html-doc:
  stage: test
  needs: []
  script:
    - pip install -e .[doc]
    - make -C doc clean
    - make -C doc html
    - ./mkdoc.sh
  # Don't test on master branch, where the pages job does the same thing
  rules:
    - if: '$CI_COMMIT_BRANCH != "master"'
  cache:
    key: build
    paths:
      - target
      - .cache

manpages:
  stage: test
  needs: []
  script:
    - pip install -U setuptools_rust --cache-dir .cache/pip
    - pip install -e .[man]
    # Test both ways of building the man pages
    - python setup.py build_man
    - make -C doc man
  cache:
    key: build
    paths:
      - target
      - .cache

pages:
  stage: deploy
  extends: html-doc
  after_script:
    - mv doc/_build/html/ public/
    - mv apidoc/_build/ public/api
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

# Not currently working due to https://gitlab.archlinux.org/archlinux/archlinux-docker/-/issues/56
docker:
  image: docker:19.03.12
  stage: build
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  inherit:
    default: false
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  when: manual
