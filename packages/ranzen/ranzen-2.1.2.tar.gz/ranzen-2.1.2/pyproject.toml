[tool.black]
line-length = 100
target-version = ['py38']
extend_exclude = ".undodir/*"

[tool.isort]
known_third_party = [
  "black",
  "click",
  "click_option_group",
  "ethicml",
  "hydra",
  "matplotlib",
  "mypy",
  "numpy",
  "omegaconf",
  "pandas",
  "pylint",
  "pytest",
  "scipy",
  "setuptools",
  "sklearn",
  "torch",
  "tqdm",
  "wandb",
]
known_future_library = []
extra_standard_library = ["dataclasses", "__future__", "typing_extensions"]
line_length = 88
profile = "black"
force_sort_within_sections = "True"
classes = ["MISSING", "LAMB", "SAM"]

[tool.poetry]
name = "ranzen"
version = "2.1.2"
description = "A toolkit facilitating machine-learning experimentation."
authors = ["PAL <info@predictive-analytics-lab.com>"]
license = "Apache License 2.0"
packages = [
  { include = "ranzen" },
]
include=["ranzen/py.typed"]
classifiers=[
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]
keywords=["typing", "python"]
repository="https://github.com/wearepal/ranzen"
readme="README.md"

[tool.poetry.dependencies]
python = ">=3.8.0,<3.12"
typing-extensions = ">=4.5.0"

# wandb dependencies
pandas = { version = "^1.5.0", optional = true }
wandb = { version= ">=0.12,<0.14", optional = true }

# logging dependencies
loguru = { version = "^0.6.0", optional = true }

# torch dependencies
torch = { version = ">=1.12.1", optional = true }
numpy = { version = "^1.23.2", optional = true }

# hydra dependencies
hydra-core = { version = "^1.3.0", optional = true }
neoconfigen = { version = ">=2.3.3", optional = true }

[tool.poetry.extras]
wandb = ["pandas", "wandb"]
logging = ["loguru"]
torch = ["torch", "numpy"]
hydra = ["hydra-core", "neoconfigen"]
all = ["hydra-core", "loguru", "neoconfigen", "numpy", "pandas", "torch", "wandb"]

[tool.poetry.group.dev.dependencies]
black = "^23.1"
pytest = "^7.1.2"
isort = "^5.7.0"
darglint = "^1.8.0"
pandas-stubs = ">=1.4.3.220718"

[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.8"
reportUnknownArgumentType = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownParameterType = "none"
reportMissingTypeArgument = "none"
reportUnnecessaryIsInstance = "none"
reportPrivateImportUsage = "none"
reportPrivateUsage = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"

[tool.ruff]
line-length = 100
select = [
    "A", # builtins
    # "ANN", # flake8-annotations
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    # "N", # naming
    # "PD", # pandas-vet
    "PLC", # pylint convention
    "PLE", # pylint error
    "PLR", # pylint refactor
    "PLW", # pylint warning
    # "PT", # pytest-style
    "PTH", # use-pathlib
    # "UP", # pyupgrade
    "W",
]
ignore = [
    "D105", # magic methods
    "D107", # __init__
    "D203",
    "D208", # over indentation
    "D212",
    "D213",
    "D214",
    "D215",
    "D404",
    "D405",
    "D406",
    "D407",
    "D408",
    "D409",
    "D410",
    "D411",
    "D413",
    "D415",
    "D416",
    "D417",
    "TID252", # relative imports
    "PDV901", # forbidding "df" as a variable name
    "ANN101",
    "ANN102",
]
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F403"]

known_third_party = [
  "black",
  "hydra",
  "matplotlib",
  "mypy",
  "numpy",
  "omegaconf",
  "pandas",
  "pylint",
  "pytest",
  "scipy",
  "setuptools",
  "sklearn",
  "torch",
  "tqdm",
  "wandb",
]
extra-standard-library = ["__future__", "typing_extensions"]
force-sort-within-sections = true
split-on-trailing-comma = false
classes = [
  "SAM",
  "LAMB",
]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
