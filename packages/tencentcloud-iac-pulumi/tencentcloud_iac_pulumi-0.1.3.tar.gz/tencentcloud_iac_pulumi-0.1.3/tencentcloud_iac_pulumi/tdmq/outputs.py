# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RocketmqClusterVpc',
    'GetRocketmqClusterClusterListResult',
    'GetRocketmqClusterClusterListConfigResult',
    'GetRocketmqClusterClusterListInfoResult',
    'GetRocketmqClusterClusterListInfoVpcResult',
    'GetRocketmqGroupGroupResult',
    'GetRocketmqNamespaceNamespaceResult',
    'GetRocketmqRoleRoleSetResult',
    'GetRocketmqTopicTopicResult',
]

@pulumi.output_type
class RocketmqClusterVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RocketmqClusterVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RocketmqClusterVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RocketmqClusterVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param str subnet_id: Subnet ID.
        :param str vpc_id: Vpc ID.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        Vpc ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetRocketmqClusterClusterListResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetRocketmqClusterClusterListConfigResult'],
                 infos: Sequence['outputs.GetRocketmqClusterClusterListInfoResult'],
                 status: int):
        """
        :param Sequence['GetRocketmqClusterClusterListConfigArgs'] configs: Cluster configuration information.
        :param Sequence['GetRocketmqClusterClusterListInfoArgs'] infos: Basic cluster information.
        :param int status: Cluster status. `0`: Creating; `1`: Normal; `2`: Terminating; `3`: Deleted; `4`: Isolated; `5`: Creation failed; `6`: Deletion failed.
        """
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetRocketmqClusterClusterListConfigResult']:
        """
        Cluster configuration information.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetRocketmqClusterClusterListInfoResult']:
        """
        Basic cluster information.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Cluster status. `0`: Creating; `1`: Normal; `2`: Terminating; `3`: Deleted; `4`: Isolated; `5`: Creation failed; `6`: Deletion failed.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRocketmqClusterClusterListConfigResult(dict):
    def __init__(__self__, *,
                 max_group_num: int,
                 max_latency_time: int,
                 max_namespace_num: int,
                 max_retention_time: int,
                 max_topic_num: int,
                 max_tps_per_namespace: int,
                 used_group_num: int,
                 used_namespace_num: int,
                 used_topic_num: int):
        """
        :param int max_group_num: Maximum number of groups.
        :param int max_latency_time: Maximum message delay in millisecond.
        :param int max_namespace_num: Maximum number of namespaces.
        :param int max_retention_time: Maximum message retention period in milliseconds.
        :param int max_topic_num: Maximum number of topics.
        :param int max_tps_per_namespace: Maximum TPS per namespace.
        :param int used_group_num: Number of used groups.
        :param int used_namespace_num: Number of used namespaces.
        :param int used_topic_num: Number of used topics.
        """
        pulumi.set(__self__, "max_group_num", max_group_num)
        pulumi.set(__self__, "max_latency_time", max_latency_time)
        pulumi.set(__self__, "max_namespace_num", max_namespace_num)
        pulumi.set(__self__, "max_retention_time", max_retention_time)
        pulumi.set(__self__, "max_topic_num", max_topic_num)
        pulumi.set(__self__, "max_tps_per_namespace", max_tps_per_namespace)
        pulumi.set(__self__, "used_group_num", used_group_num)
        pulumi.set(__self__, "used_namespace_num", used_namespace_num)
        pulumi.set(__self__, "used_topic_num", used_topic_num)

    @property
    @pulumi.getter(name="maxGroupNum")
    def max_group_num(self) -> int:
        """
        Maximum number of groups.
        """
        return pulumi.get(self, "max_group_num")

    @property
    @pulumi.getter(name="maxLatencyTime")
    def max_latency_time(self) -> int:
        """
        Maximum message delay in millisecond.
        """
        return pulumi.get(self, "max_latency_time")

    @property
    @pulumi.getter(name="maxNamespaceNum")
    def max_namespace_num(self) -> int:
        """
        Maximum number of namespaces.
        """
        return pulumi.get(self, "max_namespace_num")

    @property
    @pulumi.getter(name="maxRetentionTime")
    def max_retention_time(self) -> int:
        """
        Maximum message retention period in milliseconds.
        """
        return pulumi.get(self, "max_retention_time")

    @property
    @pulumi.getter(name="maxTopicNum")
    def max_topic_num(self) -> int:
        """
        Maximum number of topics.
        """
        return pulumi.get(self, "max_topic_num")

    @property
    @pulumi.getter(name="maxTpsPerNamespace")
    def max_tps_per_namespace(self) -> int:
        """
        Maximum TPS per namespace.
        """
        return pulumi.get(self, "max_tps_per_namespace")

    @property
    @pulumi.getter(name="usedGroupNum")
    def used_group_num(self) -> int:
        """
        Number of used groups.
        """
        return pulumi.get(self, "used_group_num")

    @property
    @pulumi.getter(name="usedNamespaceNum")
    def used_namespace_num(self) -> int:
        """
        Number of used namespaces.
        """
        return pulumi.get(self, "used_namespace_num")

    @property
    @pulumi.getter(name="usedTopicNum")
    def used_topic_num(self) -> int:
        """
        Number of used topics.
        """
        return pulumi.get(self, "used_topic_num")


@pulumi.output_type
class GetRocketmqClusterClusterListInfoResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 create_time: int,
                 is_vip: bool,
                 public_end_point: str,
                 region: str,
                 remark: str,
                 rocketmq_flag: bool,
                 support_namespace_endpoint: bool,
                 vpc_end_point: str,
                 vpcs: Sequence['outputs.GetRocketmqClusterClusterListInfoVpcResult']):
        """
        :param str cluster_id: Cluster ID.
        :param str cluster_name: Cluster name.
        :param int create_time: Creation time in milliseconds.
        :param bool is_vip: Whether it is an exclusive instance.
        :param str public_end_point: Public network access address.
        :param str region: Region information.
        :param str remark: Cluster description (up to 128 characters).
        :param bool rocketmq_flag: Rocketmq cluster identification.
        :param bool support_namespace_endpoint: Whether the namespace access point is supported.
        :param str vpc_end_point: VPC access address.
        :param Sequence['GetRocketmqClusterClusterListInfoVpcArgs'] vpcs: Vpc list.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "is_vip", is_vip)
        pulumi.set(__self__, "public_end_point", public_end_point)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "rocketmq_flag", rocketmq_flag)
        pulumi.set(__self__, "support_namespace_endpoint", support_namespace_endpoint)
        pulumi.set(__self__, "vpc_end_point", vpc_end_point)
        pulumi.set(__self__, "vpcs", vpcs)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Creation time in milliseconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="isVip")
    def is_vip(self) -> bool:
        """
        Whether it is an exclusive instance.
        """
        return pulumi.get(self, "is_vip")

    @property
    @pulumi.getter(name="publicEndPoint")
    def public_end_point(self) -> str:
        """
        Public network access address.
        """
        return pulumi.get(self, "public_end_point")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region information.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Cluster description (up to 128 characters).
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="rocketmqFlag")
    def rocketmq_flag(self) -> bool:
        """
        Rocketmq cluster identification.
        """
        return pulumi.get(self, "rocketmq_flag")

    @property
    @pulumi.getter(name="supportNamespaceEndpoint")
    def support_namespace_endpoint(self) -> bool:
        """
        Whether the namespace access point is supported.
        """
        return pulumi.get(self, "support_namespace_endpoint")

    @property
    @pulumi.getter(name="vpcEndPoint")
    def vpc_end_point(self) -> str:
        """
        VPC access address.
        """
        return pulumi.get(self, "vpc_end_point")

    @property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetRocketmqClusterClusterListInfoVpcResult']:
        """
        Vpc list.
        """
        return pulumi.get(self, "vpcs")


@pulumi.output_type
class GetRocketmqClusterClusterListInfoVpcResult(dict):
    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str subnet_id: Subnet ID.
        :param str vpc_id: Vpc ID.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Vpc ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetRocketmqGroupGroupResult(dict):
    def __init__(__self__, *,
                 broadcast_enable: bool,
                 client_protocol: str,
                 consumer_num: int,
                 consumer_type: str,
                 consumption_mode: int,
                 create_time: int,
                 name: str,
                 read_enable: bool,
                 remark: str,
                 retry_partition_num: int,
                 total_accumulative: int,
                 tps: int,
                 update_time: int):
        """
        :param bool broadcast_enable: Whether to enable broadcast consumption.
        :param str client_protocol: Client protocol.
        :param int consumer_num: The number of online consumers.
        :param str consumer_type: Consumer type. Enumerated values: ACTIVELY or PASSIVELY.
        :param int consumption_mode: `0`: Cluster consumption mode; `1`: Broadcast consumption mode; `-1`: Unknown.
        :param int create_time: Creation time in milliseconds.
        :param str name: Consumer group name.
        :param bool read_enable: Whether to enable consumption.
        :param str remark: Remarks (up to 128 characters).
        :param int retry_partition_num: The number of partitions in a retry topic.
        :param int total_accumulative: The total number of heaped messages.
        :param int tps: Consumption TPS.
        :param int update_time: Modification time in milliseconds.
        """
        pulumi.set(__self__, "broadcast_enable", broadcast_enable)
        pulumi.set(__self__, "client_protocol", client_protocol)
        pulumi.set(__self__, "consumer_num", consumer_num)
        pulumi.set(__self__, "consumer_type", consumer_type)
        pulumi.set(__self__, "consumption_mode", consumption_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_enable", read_enable)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "retry_partition_num", retry_partition_num)
        pulumi.set(__self__, "total_accumulative", total_accumulative)
        pulumi.set(__self__, "tps", tps)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="broadcastEnable")
    def broadcast_enable(self) -> bool:
        """
        Whether to enable broadcast consumption.
        """
        return pulumi.get(self, "broadcast_enable")

    @property
    @pulumi.getter(name="clientProtocol")
    def client_protocol(self) -> str:
        """
        Client protocol.
        """
        return pulumi.get(self, "client_protocol")

    @property
    @pulumi.getter(name="consumerNum")
    def consumer_num(self) -> int:
        """
        The number of online consumers.
        """
        return pulumi.get(self, "consumer_num")

    @property
    @pulumi.getter(name="consumerType")
    def consumer_type(self) -> str:
        """
        Consumer type. Enumerated values: ACTIVELY or PASSIVELY.
        """
        return pulumi.get(self, "consumer_type")

    @property
    @pulumi.getter(name="consumptionMode")
    def consumption_mode(self) -> int:
        """
        `0`: Cluster consumption mode; `1`: Broadcast consumption mode; `-1`: Unknown.
        """
        return pulumi.get(self, "consumption_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Creation time in milliseconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Consumer group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readEnable")
    def read_enable(self) -> bool:
        """
        Whether to enable consumption.
        """
        return pulumi.get(self, "read_enable")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks (up to 128 characters).
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="retryPartitionNum")
    def retry_partition_num(self) -> int:
        """
        The number of partitions in a retry topic.
        """
        return pulumi.get(self, "retry_partition_num")

    @property
    @pulumi.getter(name="totalAccumulative")
    def total_accumulative(self) -> int:
        """
        The total number of heaped messages.
        """
        return pulumi.get(self, "total_accumulative")

    @property
    @pulumi.getter
    def tps(self) -> int:
        """
        Consumption TPS.
        """
        return pulumi.get(self, "tps")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        Modification time in milliseconds.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetRocketmqNamespaceNamespaceResult(dict):
    def __init__(__self__, *,
                 namespace_id: str,
                 public_endpoint: str,
                 remark: str,
                 retention_time: int,
                 ttl: int,
                 vpc_endpoint: str):
        """
        :param str namespace_id: Namespace name, which can contain 3-64 letters, digits, hyphens, and underscores.
        :param str public_endpoint: Public network access point address.
        :param str remark: Remarks (up to 128 characters).
        :param int retention_time: Retention time of persisted messages in milliseconds.
        :param int ttl: Retention time of unconsumed messages in milliseconds. Value range: 60 seconds-15 days.
        :param str vpc_endpoint: VPC access point address.
        """
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "public_endpoint", public_endpoint)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "retention_time", retention_time)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "vpc_endpoint", vpc_endpoint)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        Namespace name, which can contain 3-64 letters, digits, hyphens, and underscores.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> str:
        """
        Public network access point address.
        """
        return pulumi.get(self, "public_endpoint")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks (up to 128 characters).
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="retentionTime")
    def retention_time(self) -> int:
        """
        Retention time of persisted messages in milliseconds.
        """
        return pulumi.get(self, "retention_time")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        Retention time of unconsumed messages in milliseconds. Value range: 60 seconds-15 days.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="vpcEndpoint")
    def vpc_endpoint(self) -> str:
        """
        VPC access point address.
        """
        return pulumi.get(self, "vpc_endpoint")


@pulumi.output_type
class GetRocketmqRoleRoleSetResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 remark: str,
                 role_name: str,
                 token: str,
                 update_time: str):
        """
        :param str create_time: Creation time.
        :param str remark: Remarks.
        :param str role_name: Fuzzy query by role name.
        :param str token: Value of the role token.
        :param str update_time: Update time.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        """
        Fuzzy query by role name.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        Value of the role token.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetRocketmqTopicTopicResult(dict):
    def __init__(__self__, *,
                 create_time: int,
                 name: str,
                 partition_num: int,
                 remark: str,
                 update_time: int):
        """
        :param int create_time: Creation time in milliseconds.
        :param str name: Topic name.
        :param int partition_num: The number of read/write partitions.
        :param str remark: Topic name.
        :param int update_time: Update time in milliseconds.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "partition_num", partition_num)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Creation time in milliseconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Topic name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> int:
        """
        The number of read/write partitions.
        """
        return pulumi.get(self, "partition_num")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Topic name.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        Update time in milliseconds.
        """
        return pulumi.get(self, "update_time")


