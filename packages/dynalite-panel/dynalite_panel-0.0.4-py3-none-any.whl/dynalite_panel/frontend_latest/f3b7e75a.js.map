{"version":3,"file":"f3b7e75a.js","mappings":";;AAkCA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;;;AAKA","sources":["webpack://dynalitepanel/./src/dynalite-areas.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\nimport { mdiPlus } from \"@mdi/js\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { HomeAssistant, Route } from \"../homeassistant-frontend/src/types\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n} from \"../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport { navigate } from \"../homeassistant-frontend/src/common/navigate\";\nimport { CONF_DYNET_ID, ROUTE_EDIT, TEMPLATE_COVER, TEMPLATE_MANUAL, TEMPLATE_ROOM } from \"./const\";\nimport { Dynalite, panelTabs, DynaliteAreaRowInfo, dynaliteRoute } from \"./common\";\nimport \"../homeassistant-frontend/src/layouts/hass-tabs-subpage\";\nimport \"../homeassistant-frontend/src/components/data-table/ha-data-table\";\nimport \"../homeassistant-frontend/src/components/ha-fab\";\nimport \"../homeassistant-frontend/src/components/ha-svg-icon\";\n\n@customElement(\"dynalite-areas\")\nexport class DynaliteAreas extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public dynalite!: Dynalite;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public narrow = false;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.dynalite) {\n      return html``;\n    }\n    const data = this._calculateData();\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .tabs=${panelTabs}\n        .route=${this.route}\n      >\n        <ha-data-table\n          .hass=${this.hass}\n          .columns=${this._columns(this.narrow)}\n          .data=${data}\n          id=${CONF_DYNET_ID}\n          clickable\n          @row-click=${this._handleRowClicked}\n        ></ha-data-table>\n        <ha-fab slot=\"fab\" label=\"Define New Area\" extended @click=${this._createNew}>\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _handleRowClicked(ev) {\n    const dynetId = ev.detail.id;\n    navigate(`${dynaliteRoute(ROUTE_EDIT)}/${dynetId}`);\n  }\n\n  private _columns = memoizeOne((narrow: boolean): DataTableColumnContainer => {\n    const columns: DataTableColumnContainer = {\n      dynetId: {\n        title: \"Area Number\",\n        sortable: true,\n        hidden: false,\n        filterable: false,\n        width: narrow ? \"30%\" : \"10%\",\n      },\n      name: {\n        title: \"Name\",\n        sortable: true,\n        hidden: false,\n        filterable: false,\n        width: narrow ? \"70%\" : \"15%\",\n      },\n      template: {\n        title: \"Behavior\",\n        sortable: true,\n        hidden: narrow,\n        filterable: false,\n        width: \"10%\",\n      },\n      fade: {\n        title: \"Fade\",\n        sortable: true,\n        hidden: narrow,\n        filterable: false,\n        width: \"10%\",\n      },\n      preset: {\n        title: \"Presets\",\n        sortable: true,\n        hidden: narrow,\n        filterable: false,\n        width: \"25%\",\n      },\n      channel: {\n        title: \"Channels\",\n        sortable: true,\n        hidden: narrow,\n        filterable: false,\n        width: \"25%\",\n      },\n    };\n    return columns;\n  });\n\n  private _calculateData(): DataTableRowData[] {\n    function calcSingleArea(areaNum: string, areaConfig: any): DynaliteAreaRowInfo {\n      const templateNames = { room: TEMPLATE_ROOM, time_cover: TEMPLATE_COVER };\n      return {\n        name: areaConfig.name,\n        dynetId: areaNum,\n        template: areaConfig.template ? templateNames[areaConfig.template] : TEMPLATE_MANUAL,\n        fade: areaConfig.fade,\n        preset: areaConfig.preset ? Object.keys(areaConfig.preset).join(\", \") : \"-\",\n        channel: areaConfig.channel ? Object.keys(areaConfig.channel).join(\", \") : \"-\",\n      };\n    }\n    const areas = this.dynalite.config.area!;\n    const areaNumbers = Object.keys(areas);\n    const data = areaNumbers.map((area) => calcSingleArea(area, areas[area]));\n    return data;\n  }\n\n  private _createNew() {\n    navigate(`${dynaliteRoute(ROUTE_EDIT)}/new`);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dynalite-areas\": DynaliteAreas;\n  }\n}\n"],"names":[],"sourceRoot":""}