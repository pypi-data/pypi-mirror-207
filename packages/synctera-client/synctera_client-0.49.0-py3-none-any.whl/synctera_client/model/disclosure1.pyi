# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 0.49.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from synctera_client import schemas  # noqa: F401


class Disclosure1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Represents a disclosure
    """


    class MetaOapg:
        required = {
            "event_type",
            "type",
            "version",
            "timestamp",
        }
        
        class properties:
            
            
            class event_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DISPLAYED(cls):
                    return cls("DISPLAYED")
                
                @schemas.classproperty
                def VIEWED(cls):
                    return cls("VIEWED")
                
                @schemas.classproperty
                def ACKNOWLEDGED(cls):
                    return cls("ACKNOWLEDGED")
            timestamp = schemas.DateTimeSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACH_AUTHORIZATION(cls):
                    return cls("ACH_AUTHORIZATION")
                
                @schemas.classproperty
                def CARDHOLDER_AGREEMENT(cls):
                    return cls("CARDHOLDER_AGREEMENT")
                
                @schemas.classproperty
                def E_SIGN(cls):
                    return cls("E_SIGN")
                
                @schemas.classproperty
                def KYC_DATA_COLLECTION(cls):
                    return cls("KYC_DATA_COLLECTION")
                
                @schemas.classproperty
                def PRIVACY_NOTICE(cls):
                    return cls("PRIVACY_NOTICE")
                
                @schemas.classproperty
                def REG_CC(cls):
                    return cls("REG_CC")
                
                @schemas.classproperty
                def REG_DD(cls):
                    return cls("REG_DD")
                
                @schemas.classproperty
                def REG_E(cls):
                    return cls("REG_E")
                
                @schemas.classproperty
                def TERMS_AND_CONDITIONS(cls):
                    return cls("TERMS_AND_CONDITIONS")
            version = schemas.StrSchema
            creation_time = schemas.DateTimeSchema
            id = schemas.UUIDSchema
            last_updated_time = schemas.DateTimeSchema
            __annotations__ = {
                "event_type": event_type,
                "timestamp": timestamp,
                "type": type,
                "version": version,
                "creation_time": creation_time,
                "id": id,
                "last_updated_time": last_updated_time,
            }
    
    event_type: MetaOapg.properties.event_type
    type: MetaOapg.properties.type
    version: MetaOapg.properties.version
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_updated_time"]) -> MetaOapg.properties.last_updated_time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["event_type", "timestamp", "type", "version", "creation_time", "id", "last_updated_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_time"]) -> typing.Union[MetaOapg.properties.creation_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_updated_time"]) -> typing.Union[MetaOapg.properties.last_updated_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["event_type", "timestamp", "type", "version", "creation_time", "id", "last_updated_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        event_type: typing.Union[MetaOapg.properties.event_type, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, ],
        creation_time: typing.Union[MetaOapg.properties.creation_time, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        last_updated_time: typing.Union[MetaOapg.properties.last_updated_time, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Disclosure1':
        return super().__new__(
            cls,
            *_args,
            event_type=event_type,
            type=type,
            version=version,
            timestamp=timestamp,
            creation_time=creation_time,
            id=id,
            last_updated_time=last_updated_time,
            _configuration=_configuration,
            **kwargs,
        )
